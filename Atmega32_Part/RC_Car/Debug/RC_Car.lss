
RC_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005462  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00005462  000054f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800070  00800070  00005506  2**0
                  ALLOC
  3 .stab         00005ac0  00000000  00000000  00005508  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000271e  00000000  00000000  0000afc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000d6e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ad  00000000  00000000  0000d866  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000022c4  00000000  00000000  0000da13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000125b  00000000  00000000  0000fcd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001055  00000000  00000000  00010f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00011f88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ca  00000000  00000000  00012128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ca  00000000  00000000  000123f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012cbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 92 1b 	jmp	0x3724	; 0x3724 <__vector_1>
       8:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__vector_2>
       c:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__vector_6>
      1c:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__vector_7>
      20:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__vector_8>
      24:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__vector_9>
      28:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__vector_10>
      2c:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__vector_13>
      38:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f4 e5       	ldi	r31, 0x54	; 84
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 81 29 	call	0x5302	; 0x5302 <main>
      8a:	0c 94 2f 2a 	jmp	0x545e	; 0x545e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f8 29 	jmp	0x53f0	; 0x53f0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 14 2a 	jmp	0x5428	; 0x5428 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 04 2a 	jmp	0x5408	; 0x5408 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 20 2a 	jmp	0x5440	; 0x5440 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 04 2a 	jmp	0x5408	; 0x5408 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 20 2a 	jmp	0x5440	; 0x5440 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f8 29 	jmp	0x53f0	; 0x53f0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 14 2a 	jmp	0x5428	; 0x5428 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 00 2a 	jmp	0x5400	; 0x5400 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1c 2a 	jmp	0x5438	; 0x5438 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 04 2a 	jmp	0x5408	; 0x5408 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 20 2a 	jmp	0x5440	; 0x5440 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 04 2a 	jmp	0x5408	; 0x5408 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 20 2a 	jmp	0x5440	; 0x5440 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 04 2a 	jmp	0x5408	; 0x5408 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 20 2a 	jmp	0x5440	; 0x5440 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 04 2a 	jmp	0x5408	; 0x5408 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 20 2a 	jmp	0x5440	; 0x5440 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 08 2a 	jmp	0x5410	; 0x5410 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 24 2a 	jmp	0x5448	; 0x5448 <__epilogue_restores__+0x20>

000009b2 <__pack_f>:
     9b2:	df 92       	push	r13
     9b4:	ef 92       	push	r14
     9b6:	ff 92       	push	r15
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	fc 01       	movw	r30, r24
     9be:	e4 80       	ldd	r14, Z+4	; 0x04
     9c0:	f5 80       	ldd	r15, Z+5	; 0x05
     9c2:	06 81       	ldd	r16, Z+6	; 0x06
     9c4:	17 81       	ldd	r17, Z+7	; 0x07
     9c6:	d1 80       	ldd	r13, Z+1	; 0x01
     9c8:	80 81       	ld	r24, Z
     9ca:	82 30       	cpi	r24, 0x02	; 2
     9cc:	48 f4       	brcc	.+18     	; 0x9e0 <__pack_f+0x2e>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e1       	ldi	r26, 0x10	; 16
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	e8 2a       	or	r14, r24
     9d8:	f9 2a       	or	r15, r25
     9da:	0a 2b       	or	r16, r26
     9dc:	1b 2b       	or	r17, r27
     9de:	a5 c0       	rjmp	.+330    	; 0xb2a <__pack_f+0x178>
     9e0:	84 30       	cpi	r24, 0x04	; 4
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <__pack_f+0x34>
     9e4:	9f c0       	rjmp	.+318    	; 0xb24 <__pack_f+0x172>
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	21 f4       	brne	.+8      	; 0x9f2 <__pack_f+0x40>
     9ea:	ee 24       	eor	r14, r14
     9ec:	ff 24       	eor	r15, r15
     9ee:	87 01       	movw	r16, r14
     9f0:	05 c0       	rjmp	.+10     	; 0x9fc <__pack_f+0x4a>
     9f2:	e1 14       	cp	r14, r1
     9f4:	f1 04       	cpc	r15, r1
     9f6:	01 05       	cpc	r16, r1
     9f8:	11 05       	cpc	r17, r1
     9fa:	19 f4       	brne	.+6      	; 0xa02 <__pack_f+0x50>
     9fc:	e0 e0       	ldi	r30, 0x00	; 0
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	96 c0       	rjmp	.+300    	; 0xb2e <__pack_f+0x17c>
     a02:	62 81       	ldd	r22, Z+2	; 0x02
     a04:	73 81       	ldd	r23, Z+3	; 0x03
     a06:	9f ef       	ldi	r25, 0xFF	; 255
     a08:	62 38       	cpi	r22, 0x82	; 130
     a0a:	79 07       	cpc	r23, r25
     a0c:	0c f0       	brlt	.+2      	; 0xa10 <__pack_f+0x5e>
     a0e:	5b c0       	rjmp	.+182    	; 0xac6 <__pack_f+0x114>
     a10:	22 e8       	ldi	r18, 0x82	; 130
     a12:	3f ef       	ldi	r19, 0xFF	; 255
     a14:	26 1b       	sub	r18, r22
     a16:	37 0b       	sbc	r19, r23
     a18:	2a 31       	cpi	r18, 0x1A	; 26
     a1a:	31 05       	cpc	r19, r1
     a1c:	2c f0       	brlt	.+10     	; 0xa28 <__pack_f+0x76>
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	2a c0       	rjmp	.+84     	; 0xa7c <__pack_f+0xca>
     a28:	b8 01       	movw	r22, r16
     a2a:	a7 01       	movw	r20, r14
     a2c:	02 2e       	mov	r0, r18
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0x86>
     a30:	76 95       	lsr	r23
     a32:	67 95       	ror	r22
     a34:	57 95       	ror	r21
     a36:	47 95       	ror	r20
     a38:	0a 94       	dec	r0
     a3a:	d2 f7       	brpl	.-12     	; 0xa30 <__pack_f+0x7e>
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	04 c0       	rjmp	.+8      	; 0xa4e <__pack_f+0x9c>
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	aa 1f       	adc	r26, r26
     a4c:	bb 1f       	adc	r27, r27
     a4e:	2a 95       	dec	r18
     a50:	d2 f7       	brpl	.-12     	; 0xa46 <__pack_f+0x94>
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	a1 09       	sbc	r26, r1
     a56:	b1 09       	sbc	r27, r1
     a58:	8e 21       	and	r24, r14
     a5a:	9f 21       	and	r25, r15
     a5c:	a0 23       	and	r26, r16
     a5e:	b1 23       	and	r27, r17
     a60:	00 97       	sbiw	r24, 0x00	; 0
     a62:	a1 05       	cpc	r26, r1
     a64:	b1 05       	cpc	r27, r1
     a66:	21 f0       	breq	.+8      	; 0xa70 <__pack_f+0xbe>
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	9a 01       	movw	r18, r20
     a72:	ab 01       	movw	r20, r22
     a74:	28 2b       	or	r18, r24
     a76:	39 2b       	or	r19, r25
     a78:	4a 2b       	or	r20, r26
     a7a:	5b 2b       	or	r21, r27
     a7c:	da 01       	movw	r26, r20
     a7e:	c9 01       	movw	r24, r18
     a80:	8f 77       	andi	r24, 0x7F	; 127
     a82:	90 70       	andi	r25, 0x00	; 0
     a84:	a0 70       	andi	r26, 0x00	; 0
     a86:	b0 70       	andi	r27, 0x00	; 0
     a88:	80 34       	cpi	r24, 0x40	; 64
     a8a:	91 05       	cpc	r25, r1
     a8c:	a1 05       	cpc	r26, r1
     a8e:	b1 05       	cpc	r27, r1
     a90:	39 f4       	brne	.+14     	; 0xaa0 <__pack_f+0xee>
     a92:	27 ff       	sbrs	r18, 7
     a94:	09 c0       	rjmp	.+18     	; 0xaa8 <__pack_f+0xf6>
     a96:	20 5c       	subi	r18, 0xC0	; 192
     a98:	3f 4f       	sbci	r19, 0xFF	; 255
     a9a:	4f 4f       	sbci	r20, 0xFF	; 255
     a9c:	5f 4f       	sbci	r21, 0xFF	; 255
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0xf6>
     aa0:	21 5c       	subi	r18, 0xC1	; 193
     aa2:	3f 4f       	sbci	r19, 0xFF	; 255
     aa4:	4f 4f       	sbci	r20, 0xFF	; 255
     aa6:	5f 4f       	sbci	r21, 0xFF	; 255
     aa8:	e0 e0       	ldi	r30, 0x00	; 0
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	20 30       	cpi	r18, 0x00	; 0
     aae:	a0 e0       	ldi	r26, 0x00	; 0
     ab0:	3a 07       	cpc	r19, r26
     ab2:	a0 e0       	ldi	r26, 0x00	; 0
     ab4:	4a 07       	cpc	r20, r26
     ab6:	a0 e4       	ldi	r26, 0x40	; 64
     ab8:	5a 07       	cpc	r21, r26
     aba:	10 f0       	brcs	.+4      	; 0xac0 <__pack_f+0x10e>
     abc:	e1 e0       	ldi	r30, 0x01	; 1
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	79 01       	movw	r14, r18
     ac2:	8a 01       	movw	r16, r20
     ac4:	27 c0       	rjmp	.+78     	; 0xb14 <__pack_f+0x162>
     ac6:	60 38       	cpi	r22, 0x80	; 128
     ac8:	71 05       	cpc	r23, r1
     aca:	64 f5       	brge	.+88     	; 0xb24 <__pack_f+0x172>
     acc:	fb 01       	movw	r30, r22
     ace:	e1 58       	subi	r30, 0x81	; 129
     ad0:	ff 4f       	sbci	r31, 0xFF	; 255
     ad2:	d8 01       	movw	r26, r16
     ad4:	c7 01       	movw	r24, r14
     ad6:	8f 77       	andi	r24, 0x7F	; 127
     ad8:	90 70       	andi	r25, 0x00	; 0
     ada:	a0 70       	andi	r26, 0x00	; 0
     adc:	b0 70       	andi	r27, 0x00	; 0
     ade:	80 34       	cpi	r24, 0x40	; 64
     ae0:	91 05       	cpc	r25, r1
     ae2:	a1 05       	cpc	r26, r1
     ae4:	b1 05       	cpc	r27, r1
     ae6:	39 f4       	brne	.+14     	; 0xaf6 <__pack_f+0x144>
     ae8:	e7 fe       	sbrs	r14, 7
     aea:	0d c0       	rjmp	.+26     	; 0xb06 <__pack_f+0x154>
     aec:	80 e4       	ldi	r24, 0x40	; 64
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	a0 e0       	ldi	r26, 0x00	; 0
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	04 c0       	rjmp	.+8      	; 0xafe <__pack_f+0x14c>
     af6:	8f e3       	ldi	r24, 0x3F	; 63
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	e8 0e       	add	r14, r24
     b00:	f9 1e       	adc	r15, r25
     b02:	0a 1f       	adc	r16, r26
     b04:	1b 1f       	adc	r17, r27
     b06:	17 ff       	sbrs	r17, 7
     b08:	05 c0       	rjmp	.+10     	; 0xb14 <__pack_f+0x162>
     b0a:	16 95       	lsr	r17
     b0c:	07 95       	ror	r16
     b0e:	f7 94       	ror	r15
     b10:	e7 94       	ror	r14
     b12:	31 96       	adiw	r30, 0x01	; 1
     b14:	87 e0       	ldi	r24, 0x07	; 7
     b16:	16 95       	lsr	r17
     b18:	07 95       	ror	r16
     b1a:	f7 94       	ror	r15
     b1c:	e7 94       	ror	r14
     b1e:	8a 95       	dec	r24
     b20:	d1 f7       	brne	.-12     	; 0xb16 <__pack_f+0x164>
     b22:	05 c0       	rjmp	.+10     	; 0xb2e <__pack_f+0x17c>
     b24:	ee 24       	eor	r14, r14
     b26:	ff 24       	eor	r15, r15
     b28:	87 01       	movw	r16, r14
     b2a:	ef ef       	ldi	r30, 0xFF	; 255
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	6e 2f       	mov	r22, r30
     b30:	67 95       	ror	r22
     b32:	66 27       	eor	r22, r22
     b34:	67 95       	ror	r22
     b36:	90 2f       	mov	r25, r16
     b38:	9f 77       	andi	r25, 0x7F	; 127
     b3a:	d7 94       	ror	r13
     b3c:	dd 24       	eor	r13, r13
     b3e:	d7 94       	ror	r13
     b40:	8e 2f       	mov	r24, r30
     b42:	86 95       	lsr	r24
     b44:	49 2f       	mov	r20, r25
     b46:	46 2b       	or	r20, r22
     b48:	58 2f       	mov	r21, r24
     b4a:	5d 29       	or	r21, r13
     b4c:	b7 01       	movw	r22, r14
     b4e:	ca 01       	movw	r24, r20
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	df 90       	pop	r13
     b5a:	08 95       	ret

00000b5c <__unpack_f>:
     b5c:	fc 01       	movw	r30, r24
     b5e:	db 01       	movw	r26, r22
     b60:	40 81       	ld	r20, Z
     b62:	51 81       	ldd	r21, Z+1	; 0x01
     b64:	22 81       	ldd	r18, Z+2	; 0x02
     b66:	62 2f       	mov	r22, r18
     b68:	6f 77       	andi	r22, 0x7F	; 127
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	22 1f       	adc	r18, r18
     b6e:	22 27       	eor	r18, r18
     b70:	22 1f       	adc	r18, r18
     b72:	93 81       	ldd	r25, Z+3	; 0x03
     b74:	89 2f       	mov	r24, r25
     b76:	88 0f       	add	r24, r24
     b78:	82 2b       	or	r24, r18
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	99 1f       	adc	r25, r25
     b80:	99 27       	eor	r25, r25
     b82:	99 1f       	adc	r25, r25
     b84:	11 96       	adiw	r26, 0x01	; 1
     b86:	9c 93       	st	X, r25
     b88:	11 97       	sbiw	r26, 0x01	; 1
     b8a:	21 15       	cp	r18, r1
     b8c:	31 05       	cpc	r19, r1
     b8e:	a9 f5       	brne	.+106    	; 0xbfa <__unpack_f+0x9e>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	11 f4       	brne	.+4      	; 0xb9e <__unpack_f+0x42>
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	37 c0       	rjmp	.+110    	; 0xc0c <__unpack_f+0xb0>
     b9e:	82 e8       	ldi	r24, 0x82	; 130
     ba0:	9f ef       	ldi	r25, 0xFF	; 255
     ba2:	13 96       	adiw	r26, 0x03	; 3
     ba4:	9c 93       	st	X, r25
     ba6:	8e 93       	st	-X, r24
     ba8:	12 97       	sbiw	r26, 0x02	; 2
     baa:	9a 01       	movw	r18, r20
     bac:	ab 01       	movw	r20, r22
     bae:	67 e0       	ldi	r22, 0x07	; 7
     bb0:	22 0f       	add	r18, r18
     bb2:	33 1f       	adc	r19, r19
     bb4:	44 1f       	adc	r20, r20
     bb6:	55 1f       	adc	r21, r21
     bb8:	6a 95       	dec	r22
     bba:	d1 f7       	brne	.-12     	; 0xbb0 <__unpack_f+0x54>
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	0d c0       	rjmp	.+26     	; 0xbdc <__unpack_f+0x80>
     bc2:	22 0f       	add	r18, r18
     bc4:	33 1f       	adc	r19, r19
     bc6:	44 1f       	adc	r20, r20
     bc8:	55 1f       	adc	r21, r21
     bca:	12 96       	adiw	r26, 0x02	; 2
     bcc:	8d 91       	ld	r24, X+
     bce:	9c 91       	ld	r25, X
     bd0:	13 97       	sbiw	r26, 0x03	; 3
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	13 96       	adiw	r26, 0x03	; 3
     bd6:	9c 93       	st	X, r25
     bd8:	8e 93       	st	-X, r24
     bda:	12 97       	sbiw	r26, 0x02	; 2
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	38 07       	cpc	r19, r24
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	48 07       	cpc	r20, r24
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	58 07       	cpc	r21, r24
     bea:	58 f3       	brcs	.-42     	; 0xbc2 <__unpack_f+0x66>
     bec:	14 96       	adiw	r26, 0x04	; 4
     bee:	2d 93       	st	X+, r18
     bf0:	3d 93       	st	X+, r19
     bf2:	4d 93       	st	X+, r20
     bf4:	5c 93       	st	X, r21
     bf6:	17 97       	sbiw	r26, 0x07	; 7
     bf8:	08 95       	ret
     bfa:	2f 3f       	cpi	r18, 0xFF	; 255
     bfc:	31 05       	cpc	r19, r1
     bfe:	79 f4       	brne	.+30     	; 0xc1e <__unpack_f+0xc2>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	19 f4       	brne	.+6      	; 0xc10 <__unpack_f+0xb4>
     c0a:	84 e0       	ldi	r24, 0x04	; 4
     c0c:	8c 93       	st	X, r24
     c0e:	08 95       	ret
     c10:	64 ff       	sbrs	r22, 4
     c12:	03 c0       	rjmp	.+6      	; 0xc1a <__unpack_f+0xbe>
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	8c 93       	st	X, r24
     c18:	12 c0       	rjmp	.+36     	; 0xc3e <__unpack_f+0xe2>
     c1a:	1c 92       	st	X, r1
     c1c:	10 c0       	rjmp	.+32     	; 0xc3e <__unpack_f+0xe2>
     c1e:	2f 57       	subi	r18, 0x7F	; 127
     c20:	30 40       	sbci	r19, 0x00	; 0
     c22:	13 96       	adiw	r26, 0x03	; 3
     c24:	3c 93       	st	X, r19
     c26:	2e 93       	st	-X, r18
     c28:	12 97       	sbiw	r26, 0x02	; 2
     c2a:	83 e0       	ldi	r24, 0x03	; 3
     c2c:	8c 93       	st	X, r24
     c2e:	87 e0       	ldi	r24, 0x07	; 7
     c30:	44 0f       	add	r20, r20
     c32:	55 1f       	adc	r21, r21
     c34:	66 1f       	adc	r22, r22
     c36:	77 1f       	adc	r23, r23
     c38:	8a 95       	dec	r24
     c3a:	d1 f7       	brne	.-12     	; 0xc30 <__unpack_f+0xd4>
     c3c:	70 64       	ori	r23, 0x40	; 64
     c3e:	14 96       	adiw	r26, 0x04	; 4
     c40:	4d 93       	st	X+, r20
     c42:	5d 93       	st	X+, r21
     c44:	6d 93       	st	X+, r22
     c46:	7c 93       	st	X, r23
     c48:	17 97       	sbiw	r26, 0x07	; 7
     c4a:	08 95       	ret

00000c4c <__fpcmp_parts_f>:
     c4c:	1f 93       	push	r17
     c4e:	dc 01       	movw	r26, r24
     c50:	fb 01       	movw	r30, r22
     c52:	9c 91       	ld	r25, X
     c54:	92 30       	cpi	r25, 0x02	; 2
     c56:	08 f4       	brcc	.+2      	; 0xc5a <__fpcmp_parts_f+0xe>
     c58:	47 c0       	rjmp	.+142    	; 0xce8 <__fpcmp_parts_f+0x9c>
     c5a:	80 81       	ld	r24, Z
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	08 f4       	brcc	.+2      	; 0xc62 <__fpcmp_parts_f+0x16>
     c60:	43 c0       	rjmp	.+134    	; 0xce8 <__fpcmp_parts_f+0x9c>
     c62:	94 30       	cpi	r25, 0x04	; 4
     c64:	51 f4       	brne	.+20     	; 0xc7a <__fpcmp_parts_f+0x2e>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	84 30       	cpi	r24, 0x04	; 4
     c6c:	99 f5       	brne	.+102    	; 0xcd4 <__fpcmp_parts_f+0x88>
     c6e:	81 81       	ldd	r24, Z+1	; 0x01
     c70:	68 2f       	mov	r22, r24
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	61 1b       	sub	r22, r17
     c76:	71 09       	sbc	r23, r1
     c78:	3f c0       	rjmp	.+126    	; 0xcf8 <__fpcmp_parts_f+0xac>
     c7a:	84 30       	cpi	r24, 0x04	; 4
     c7c:	21 f0       	breq	.+8      	; 0xc86 <__fpcmp_parts_f+0x3a>
     c7e:	92 30       	cpi	r25, 0x02	; 2
     c80:	31 f4       	brne	.+12     	; 0xc8e <__fpcmp_parts_f+0x42>
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	b9 f1       	breq	.+110    	; 0xcf4 <__fpcmp_parts_f+0xa8>
     c86:	81 81       	ldd	r24, Z+1	; 0x01
     c88:	88 23       	and	r24, r24
     c8a:	89 f1       	breq	.+98     	; 0xcee <__fpcmp_parts_f+0xa2>
     c8c:	2d c0       	rjmp	.+90     	; 0xce8 <__fpcmp_parts_f+0x9c>
     c8e:	11 96       	adiw	r26, 0x01	; 1
     c90:	1c 91       	ld	r17, X
     c92:	11 97       	sbiw	r26, 0x01	; 1
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	f1 f0       	breq	.+60     	; 0xcd4 <__fpcmp_parts_f+0x88>
     c98:	81 81       	ldd	r24, Z+1	; 0x01
     c9a:	18 17       	cp	r17, r24
     c9c:	d9 f4       	brne	.+54     	; 0xcd4 <__fpcmp_parts_f+0x88>
     c9e:	12 96       	adiw	r26, 0x02	; 2
     ca0:	2d 91       	ld	r18, X+
     ca2:	3c 91       	ld	r19, X
     ca4:	13 97       	sbiw	r26, 0x03	; 3
     ca6:	82 81       	ldd	r24, Z+2	; 0x02
     ca8:	93 81       	ldd	r25, Z+3	; 0x03
     caa:	82 17       	cp	r24, r18
     cac:	93 07       	cpc	r25, r19
     cae:	94 f0       	brlt	.+36     	; 0xcd4 <__fpcmp_parts_f+0x88>
     cb0:	28 17       	cp	r18, r24
     cb2:	39 07       	cpc	r19, r25
     cb4:	bc f0       	brlt	.+46     	; 0xce4 <__fpcmp_parts_f+0x98>
     cb6:	14 96       	adiw	r26, 0x04	; 4
     cb8:	8d 91       	ld	r24, X+
     cba:	9d 91       	ld	r25, X+
     cbc:	0d 90       	ld	r0, X+
     cbe:	bc 91       	ld	r27, X
     cc0:	a0 2d       	mov	r26, r0
     cc2:	24 81       	ldd	r18, Z+4	; 0x04
     cc4:	35 81       	ldd	r19, Z+5	; 0x05
     cc6:	46 81       	ldd	r20, Z+6	; 0x06
     cc8:	57 81       	ldd	r21, Z+7	; 0x07
     cca:	28 17       	cp	r18, r24
     ccc:	39 07       	cpc	r19, r25
     cce:	4a 07       	cpc	r20, r26
     cd0:	5b 07       	cpc	r21, r27
     cd2:	18 f4       	brcc	.+6      	; 0xcda <__fpcmp_parts_f+0x8e>
     cd4:	11 23       	and	r17, r17
     cd6:	41 f0       	breq	.+16     	; 0xce8 <__fpcmp_parts_f+0x9c>
     cd8:	0a c0       	rjmp	.+20     	; 0xcee <__fpcmp_parts_f+0xa2>
     cda:	82 17       	cp	r24, r18
     cdc:	93 07       	cpc	r25, r19
     cde:	a4 07       	cpc	r26, r20
     ce0:	b5 07       	cpc	r27, r21
     ce2:	40 f4       	brcc	.+16     	; 0xcf4 <__fpcmp_parts_f+0xa8>
     ce4:	11 23       	and	r17, r17
     ce6:	19 f0       	breq	.+6      	; 0xcee <__fpcmp_parts_f+0xa2>
     ce8:	61 e0       	ldi	r22, 0x01	; 1
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	05 c0       	rjmp	.+10     	; 0xcf8 <__fpcmp_parts_f+0xac>
     cee:	6f ef       	ldi	r22, 0xFF	; 255
     cf0:	7f ef       	ldi	r23, 0xFF	; 255
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <__fpcmp_parts_f+0xac>
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	cb 01       	movw	r24, r22
     cfa:	1f 91       	pop	r17
     cfc:	08 95       	ret

00000cfe <UART_vidInit>:
static UART_Status_t UART_u8CheckErrors(void);

/* Function Implementations */

UART_Status_t UART_vidInit(void)
{
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
    return UART_voidInitWithBaudRate(UART_BAUD_RATE);
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	72 ec       	ldi	r23, 0xC2	; 194
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 8c 06 	call	0xd18	; 0xd18 <UART_voidInitWithBaudRate>
}
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <UART_voidInitWithBaudRate>:

UART_Status_t UART_voidInitWithBaudRate(u32 Copy_u32BaudRate)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	27 97       	sbiw	r28, 0x07	; 7
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	6c 83       	std	Y+4, r22	; 0x04
     d2e:	7d 83       	std	Y+5, r23	; 0x05
     d30:	8e 83       	std	Y+6, r24	; 0x06
     d32:	9f 83       	std	Y+7, r25	; 0x07
    u16 Local_u16BaudRateValue;
    u8 Local_u8TempUCSRC = 0;
     d34:	19 82       	std	Y+1, r1	; 0x01
    
    /* Calculate baud rate value */
    Local_u16BaudRateValue = UART_u16CalculateBaudRate(Copy_u32BaudRate);
     d36:	8c 81       	ldd	r24, Y+4	; 0x04
     d38:	9d 81       	ldd	r25, Y+5	; 0x05
     d3a:	ae 81       	ldd	r26, Y+6	; 0x06
     d3c:	bf 81       	ldd	r27, Y+7	; 0x07
     d3e:	bc 01       	movw	r22, r24
     d40:	cd 01       	movw	r24, r26
     d42:	0e 94 61 09 	call	0x12c2	; 0x12c2 <UART_u16CalculateBaudRate>
     d46:	9b 83       	std	Y+3, r25	; 0x03
     d48:	8a 83       	std	Y+2, r24	; 0x02
    
    /* Set baud rate */
    UBRRH_REG = (u8)(Local_u16BaudRateValue >> 8);
     d4a:	e0 e4       	ldi	r30, 0x40	; 64
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	8a 81       	ldd	r24, Y+2	; 0x02
     d50:	9b 81       	ldd	r25, Y+3	; 0x03
     d52:	89 2f       	mov	r24, r25
     d54:	99 27       	eor	r25, r25
     d56:	80 83       	st	Z, r24
    UBRRL_REG = (u8)Local_u16BaudRateValue;
     d58:	e9 e2       	ldi	r30, 0x29	; 41
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	80 83       	st	Z, r24
    
    /* Configure UCSRC register */
    Local_u8TempUCSRC |= (1 << 7); // URSEL bit to select UCSRC
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	80 68       	ori	r24, 0x80	; 128
     d64:	89 83       	std	Y+1, r24	; 0x01
    #elif UART_DATA_BITS == UART_DATA_6_BITS
        Local_u8TempUCSRC |= (1 << 1); // UCSZ1:0 = 01
    #elif UART_DATA_BITS == UART_DATA_7_BITS
        Local_u8TempUCSRC |= (2 << 1); // UCSZ1:0 = 10
    #elif UART_DATA_BITS == UART_DATA_8_BITS
        Local_u8TempUCSRC |= (3 << 1); // UCSZ1:0 = 11
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	86 60       	ori	r24, 0x06	; 6
     d6a:	89 83       	std	Y+1, r24	; 0x01
        Local_u8TempUCSRC |= (3 << 1); // UCSZ1:0 = 11
        UCSRB_REG |= (1 << 2);         // UCSZ2 = 1
    #endif
    
    /* Write to UCSRC */
    UCSRC_REG = Local_u8TempUCSRC;
     d6c:	e0 e4       	ldi	r30, 0x40	; 64
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	80 83       	st	Z, r24
    
    /* Enable transmitter and receiver */
    UCSRB_REG |= (1 << 3) | (1 << 4); // RXEN and TXEN
     d74:	aa e2       	ldi	r26, 0x2A	; 42
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	ea e2       	ldi	r30, 0x2A	; 42
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	88 61       	ori	r24, 0x18	; 24
     d80:	8c 93       	st	X, r24
    
    /* Configure interrupts */
    #if UART_INTERRUPT_MODE == UART_INT_RX_ENABLED
        UCSRB_REG |= (1 << 7); // RXCIE
     d82:	aa e2       	ldi	r26, 0x2A	; 42
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	ea e2       	ldi	r30, 0x2A	; 42
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	80 68       	ori	r24, 0x80	; 128
     d8e:	8c 93       	st	X, r24
        UCSRB_REG |= (1 << 6); // TXCIE
    #elif UART_INTERRUPT_MODE == UART_INT_BOTH_ENABLED
        UCSRB_REG |= (1 << 7) | (1 << 6); // RXCIE and TXCIE
    #endif
    
    return UART_OK;
     d90:	80 e0       	ldi	r24, 0x00	; 0
}
     d92:	27 96       	adiw	r28, 0x07	; 7
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <UART_u8SendChar>:

UART_Status_t UART_u8SendChar(u8 Copy_u8Data)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	0f 92       	push	r0
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	89 83       	std	Y+1, r24	; 0x01
    /* Wait for transmit buffer to be empty */
    while (!(UCSRA_REG & (1 << 5)));
     db0:	eb e2       	ldi	r30, 0x2B	; 43
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	88 2f       	mov	r24, r24
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	80 72       	andi	r24, 0x20	; 32
     dbc:	90 70       	andi	r25, 0x00	; 0
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	b9 f3       	breq	.-18     	; 0xdb0 <UART_u8SendChar+0xc>

    /* Send data */
    UDR_REG = Copy_u8Data;
     dc2:	ec e2       	ldi	r30, 0x2C	; 44
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	80 83       	st	Z, r24
    
    return UART_OK;
     dca:	80 e0       	ldi	r24, 0x00	; 0
}
     dcc:	0f 90       	pop	r0
     dce:	cf 91       	pop	r28
     dd0:	df 91       	pop	r29
     dd2:	08 95       	ret

00000dd4 <UART_u8SendNumber>:
UART_Status_t UART_u8SendNumber(s32 Copy_s32Number)
{
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	69 97       	sbiw	r28, 0x19	; 25
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	6d 8b       	std	Y+21, r22	; 0x15
     dee:	7e 8b       	std	Y+22, r23	; 0x16
     df0:	8f 8b       	std	Y+23, r24	; 0x17
     df2:	98 8f       	std	Y+24, r25	; 0x18
    u8 Local_u8NumberString[12]; // Enough for 32-bit signed integer
    u8 Local_u8Index = 0;
     df4:	18 86       	std	Y+8, r1	; 0x08
    u8 Local_u8IsNegative = 0;
     df6:	1f 82       	std	Y+7, r1	; 0x07
    s32 Local_s32TempNumber = Copy_s32Number;
     df8:	8d 89       	ldd	r24, Y+21	; 0x15
     dfa:	9e 89       	ldd	r25, Y+22	; 0x16
     dfc:	af 89       	ldd	r26, Y+23	; 0x17
     dfe:	b8 8d       	ldd	r27, Y+24	; 0x18
     e00:	8b 83       	std	Y+3, r24	; 0x03
     e02:	9c 83       	std	Y+4, r25	; 0x04
     e04:	ad 83       	std	Y+5, r26	; 0x05
     e06:	be 83       	std	Y+6, r27	; 0x06

    /* Handle negative numbers */
    if (Copy_s32Number < 0)
     e08:	8d 89       	ldd	r24, Y+21	; 0x15
     e0a:	9e 89       	ldd	r25, Y+22	; 0x16
     e0c:	af 89       	ldd	r26, Y+23	; 0x17
     e0e:	b8 8d       	ldd	r27, Y+24	; 0x18
     e10:	bb 23       	and	r27, r27
     e12:	8c f4       	brge	.+34     	; 0xe36 <UART_u8SendNumber+0x62>
    {
        Local_u8IsNegative = 1;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	8f 83       	std	Y+7, r24	; 0x07
        Local_s32TempNumber = -Copy_s32Number;
     e18:	8d 89       	ldd	r24, Y+21	; 0x15
     e1a:	9e 89       	ldd	r25, Y+22	; 0x16
     e1c:	af 89       	ldd	r26, Y+23	; 0x17
     e1e:	b8 8d       	ldd	r27, Y+24	; 0x18
     e20:	b0 95       	com	r27
     e22:	a0 95       	com	r26
     e24:	90 95       	com	r25
     e26:	81 95       	neg	r24
     e28:	9f 4f       	sbci	r25, 0xFF	; 255
     e2a:	af 4f       	sbci	r26, 0xFF	; 255
     e2c:	bf 4f       	sbci	r27, 0xFF	; 255
     e2e:	8b 83       	std	Y+3, r24	; 0x03
     e30:	9c 83       	std	Y+4, r25	; 0x04
     e32:	ad 83       	std	Y+5, r26	; 0x05
     e34:	be 83       	std	Y+6, r27	; 0x06
    }

    /* Handle zero case */
    if (Local_s32TempNumber == 0)
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	9c 81       	ldd	r25, Y+4	; 0x04
     e3a:	ad 81       	ldd	r26, Y+5	; 0x05
     e3c:	be 81       	ldd	r27, Y+6	; 0x06
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	a1 05       	cpc	r26, r1
     e42:	b1 05       	cpc	r27, r1
     e44:	99 f5       	brne	.+102    	; 0xeac <UART_u8SendNumber+0xd8>
    {
        return UART_u8SendChar('0');
     e46:	80 e3       	ldi	r24, 0x30	; 48
     e48:	0e 94 d2 06 	call	0xda4	; 0xda4 <UART_u8SendChar>
     e4c:	89 8f       	std	Y+25, r24	; 0x19
     e4e:	66 c0       	rjmp	.+204    	; 0xf1c <UART_u8SendNumber+0x148>
    }

    /* Convert number to string */
    while (Local_s32TempNumber > 0)
    {
        Local_u8NumberString[Local_u8Index] = (Local_s32TempNumber % 10) + '0';
     e50:	88 85       	ldd	r24, Y+8	; 0x08
     e52:	08 2f       	mov	r16, r24
     e54:	10 e0       	ldi	r17, 0x00	; 0
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	9c 81       	ldd	r25, Y+4	; 0x04
     e5a:	ad 81       	ldd	r26, Y+5	; 0x05
     e5c:	be 81       	ldd	r27, Y+6	; 0x06
     e5e:	2a e0       	ldi	r18, 0x0A	; 10
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	50 e0       	ldi	r21, 0x00	; 0
     e66:	bc 01       	movw	r22, r24
     e68:	cd 01       	movw	r24, r26
     e6a:	0e 94 dd 29 	call	0x53ba	; 0x53ba <__divmodsi4>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	28 2f       	mov	r18, r24
     e74:	20 5d       	subi	r18, 0xD0	; 208
     e76:	ce 01       	movw	r24, r28
     e78:	09 96       	adiw	r24, 0x09	; 9
     e7a:	fc 01       	movw	r30, r24
     e7c:	e0 0f       	add	r30, r16
     e7e:	f1 1f       	adc	r31, r17
     e80:	20 83       	st	Z, r18
        Local_s32TempNumber /= 10;
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	9c 81       	ldd	r25, Y+4	; 0x04
     e86:	ad 81       	ldd	r26, Y+5	; 0x05
     e88:	be 81       	ldd	r27, Y+6	; 0x06
     e8a:	2a e0       	ldi	r18, 0x0A	; 10
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	0e 94 dd 29 	call	0x53ba	; 0x53ba <__divmodsi4>
     e9a:	da 01       	movw	r26, r20
     e9c:	c9 01       	movw	r24, r18
     e9e:	8b 83       	std	Y+3, r24	; 0x03
     ea0:	9c 83       	std	Y+4, r25	; 0x04
     ea2:	ad 83       	std	Y+5, r26	; 0x05
     ea4:	be 83       	std	Y+6, r27	; 0x06
        Local_u8Index++;
     ea6:	88 85       	ldd	r24, Y+8	; 0x08
     ea8:	8f 5f       	subi	r24, 0xFF	; 255
     eaa:	88 87       	std	Y+8, r24	; 0x08
    {
        return UART_u8SendChar('0');
    }

    /* Convert number to string */
    while (Local_s32TempNumber > 0)
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	ad 81       	ldd	r26, Y+5	; 0x05
     eb2:	be 81       	ldd	r27, Y+6	; 0x06
     eb4:	18 16       	cp	r1, r24
     eb6:	19 06       	cpc	r1, r25
     eb8:	1a 06       	cpc	r1, r26
     eba:	1b 06       	cpc	r1, r27
     ebc:	4c f2       	brlt	.-110    	; 0xe50 <UART_u8SendNumber+0x7c>
        Local_s32TempNumber /= 10;
        Local_u8Index++;
    }

    /* Add negative sign if needed */
    if (Local_u8IsNegative)
     ebe:	8f 81       	ldd	r24, Y+7	; 0x07
     ec0:	88 23       	and	r24, r24
     ec2:	69 f0       	breq	.+26     	; 0xede <UART_u8SendNumber+0x10a>
    {
        Local_u8NumberString[Local_u8Index] = '-';
     ec4:	88 85       	ldd	r24, Y+8	; 0x08
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	ce 01       	movw	r24, r28
     ecc:	09 96       	adiw	r24, 0x09	; 9
     ece:	fc 01       	movw	r30, r24
     ed0:	e2 0f       	add	r30, r18
     ed2:	f3 1f       	adc	r31, r19
     ed4:	8d e2       	ldi	r24, 0x2D	; 45
     ed6:	80 83       	st	Z, r24
        Local_u8Index++;
     ed8:	88 85       	ldd	r24, Y+8	; 0x08
     eda:	8f 5f       	subi	r24, 0xFF	; 255
     edc:	88 87       	std	Y+8, r24	; 0x08
    }

    /* Send string in reverse order */
    for (u8 i = Local_u8Index; i > 0; i--)
     ede:	88 85       	ldd	r24, Y+8	; 0x08
     ee0:	8a 83       	std	Y+2, r24	; 0x02
     ee2:	18 c0       	rjmp	.+48     	; 0xf14 <UART_u8SendNumber+0x140>
    {
        UART_Status_t Local_Status = UART_u8SendChar(Local_u8NumberString[i - 1]);
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	88 2f       	mov	r24, r24
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	9c 01       	movw	r18, r24
     eec:	21 50       	subi	r18, 0x01	; 1
     eee:	30 40       	sbci	r19, 0x00	; 0
     ef0:	ce 01       	movw	r24, r28
     ef2:	09 96       	adiw	r24, 0x09	; 9
     ef4:	fc 01       	movw	r30, r24
     ef6:	e2 0f       	add	r30, r18
     ef8:	f3 1f       	adc	r31, r19
     efa:	80 81       	ld	r24, Z
     efc:	0e 94 d2 06 	call	0xda4	; 0xda4 <UART_u8SendChar>
     f00:	89 83       	std	Y+1, r24	; 0x01
        if (Local_Status != UART_OK)
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	88 23       	and	r24, r24
     f06:	19 f0       	breq	.+6      	; 0xf0e <UART_u8SendNumber+0x13a>
        {
            return Local_Status;
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	89 8f       	std	Y+25, r24	; 0x19
     f0c:	07 c0       	rjmp	.+14     	; 0xf1c <UART_u8SendNumber+0x148>
        Local_u8NumberString[Local_u8Index] = '-';
        Local_u8Index++;
    }

    /* Send string in reverse order */
    for (u8 i = Local_u8Index; i > 0; i--)
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	81 50       	subi	r24, 0x01	; 1
     f12:	8a 83       	std	Y+2, r24	; 0x02
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	88 23       	and	r24, r24
     f18:	29 f7       	brne	.-54     	; 0xee4 <UART_u8SendNumber+0x110>
        {
            return Local_Status;
        }
    }

    return UART_OK;
     f1a:	19 8e       	std	Y+25, r1	; 0x19
     f1c:	89 8d       	ldd	r24, Y+25	; 0x19
}
     f1e:	69 96       	adiw	r28, 0x19	; 25
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	08 95       	ret

00000f34 <UART_u8SendString>:



UART_Status_t UART_u8SendString(const u8* Copy_pu8String)
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	00 d0       	rcall	.+0      	; 0xf3a <UART_u8SendString+0x6>
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <UART_u8SendString+0x8>
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	9b 83       	std	Y+3, r25	; 0x03
     f42:	8a 83       	std	Y+2, r24	; 0x02
    UART_Status_t Local_Status;
    
    if (Copy_pu8String == NULL)
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	9b 81       	ldd	r25, Y+3	; 0x03
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	a1 f4       	brne	.+40     	; 0xf74 <UART_u8SendString+0x40>
    {
        return UART_ERROR;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	8c 83       	std	Y+4, r24	; 0x04
     f50:	17 c0       	rjmp	.+46     	; 0xf80 <UART_u8SendString+0x4c>
    }
    
    while (*Copy_pu8String != '\0')
    {
        Local_Status = UART_u8SendChar(*Copy_pu8String);
     f52:	ea 81       	ldd	r30, Y+2	; 0x02
     f54:	fb 81       	ldd	r31, Y+3	; 0x03
     f56:	80 81       	ld	r24, Z
     f58:	0e 94 d2 06 	call	0xda4	; 0xda4 <UART_u8SendChar>
     f5c:	89 83       	std	Y+1, r24	; 0x01
        if (Local_Status != UART_OK)
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	88 23       	and	r24, r24
     f62:	19 f0       	breq	.+6      	; 0xf6a <UART_u8SendString+0x36>
        {
            return Local_Status;
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	8c 83       	std	Y+4, r24	; 0x04
     f68:	0b c0       	rjmp	.+22     	; 0xf80 <UART_u8SendString+0x4c>
        }
        Copy_pu8String++;
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	9b 81       	ldd	r25, Y+3	; 0x03
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	9b 83       	std	Y+3, r25	; 0x03
     f72:	8a 83       	std	Y+2, r24	; 0x02
    if (Copy_pu8String == NULL)
    {
        return UART_ERROR;
    }
    
    while (*Copy_pu8String != '\0')
     f74:	ea 81       	ldd	r30, Y+2	; 0x02
     f76:	fb 81       	ldd	r31, Y+3	; 0x03
     f78:	80 81       	ld	r24, Z
     f7a:	88 23       	and	r24, r24
     f7c:	51 f7       	brne	.-44     	; 0xf52 <UART_u8SendString+0x1e>
            return Local_Status;
        }
        Copy_pu8String++;
    }
    
    return UART_OK;
     f7e:	1c 82       	std	Y+4, r1	; 0x04
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
}
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <UART_u8SendStringWithLength>:

UART_Status_t UART_u8SendStringWithLength(const u8* Copy_pu8String, u16 Copy_u16Length)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	28 97       	sbiw	r28, 0x08	; 8
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	9d 83       	std	Y+5, r25	; 0x05
     fa6:	8c 83       	std	Y+4, r24	; 0x04
     fa8:	7f 83       	std	Y+7, r23	; 0x07
     faa:	6e 83       	std	Y+6, r22	; 0x06
    UART_Status_t Local_Status;
    u16 Local_u16Counter;
    
    if (Copy_pu8String == NULL)
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	9d 81       	ldd	r25, Y+5	; 0x05
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	19 f4       	brne	.+6      	; 0xfba <UART_u8SendStringWithLength+0x2a>
    {
        return UART_ERROR;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	88 87       	std	Y+8, r24	; 0x08
     fb8:	21 c0       	rjmp	.+66     	; 0xffc <UART_u8SendStringWithLength+0x6c>
    }
    
    for (Local_u16Counter = 0; Local_u16Counter < Copy_u16Length; Local_u16Counter++)
     fba:	1a 82       	std	Y+2, r1	; 0x02
     fbc:	19 82       	std	Y+1, r1	; 0x01
     fbe:	16 c0       	rjmp	.+44     	; 0xfec <UART_u8SendStringWithLength+0x5c>
    {
        Local_Status = UART_u8SendChar(Copy_pu8String[Local_u16Counter]);
     fc0:	2c 81       	ldd	r18, Y+4	; 0x04
     fc2:	3d 81       	ldd	r19, Y+5	; 0x05
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	f9 01       	movw	r30, r18
     fca:	e8 0f       	add	r30, r24
     fcc:	f9 1f       	adc	r31, r25
     fce:	80 81       	ld	r24, Z
     fd0:	0e 94 d2 06 	call	0xda4	; 0xda4 <UART_u8SendChar>
     fd4:	8b 83       	std	Y+3, r24	; 0x03
        if (Local_Status != UART_OK)
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	88 23       	and	r24, r24
     fda:	19 f0       	breq	.+6      	; 0xfe2 <UART_u8SendStringWithLength+0x52>
        {
            return Local_Status;
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	88 87       	std	Y+8, r24	; 0x08
     fe0:	0d c0       	rjmp	.+26     	; 0xffc <UART_u8SendStringWithLength+0x6c>
    if (Copy_pu8String == NULL)
    {
        return UART_ERROR;
    }
    
    for (Local_u16Counter = 0; Local_u16Counter < Copy_u16Length; Local_u16Counter++)
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	29 81       	ldd	r18, Y+1	; 0x01
     fee:	3a 81       	ldd	r19, Y+2	; 0x02
     ff0:	8e 81       	ldd	r24, Y+6	; 0x06
     ff2:	9f 81       	ldd	r25, Y+7	; 0x07
     ff4:	28 17       	cp	r18, r24
     ff6:	39 07       	cpc	r19, r25
     ff8:	18 f3       	brcs	.-58     	; 0xfc0 <UART_u8SendStringWithLength+0x30>
        {
            return Local_Status;
        }
    }
    
    return UART_OK;
     ffa:	18 86       	std	Y+8, r1	; 0x08
     ffc:	88 85       	ldd	r24, Y+8	; 0x08
}
     ffe:	28 96       	adiw	r28, 0x08	; 8
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <UART_u8ReceiveChar>:

UART_Status_t UART_u8ReceiveChar(u8* Copy_pu8Data)
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	00 d0       	rcall	.+0      	; 0x1016 <UART_u8ReceiveChar+0x6>
    1016:	00 d0       	rcall	.+0      	; 0x1018 <UART_u8ReceiveChar+0x8>
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	9b 83       	std	Y+3, r25	; 0x03
    101e:	8a 83       	std	Y+2, r24	; 0x02
    UART_Status_t Local_Status;
    
    if (Copy_pu8Data == NULL)
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	9b 81       	ldd	r25, Y+3	; 0x03
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	19 f4       	brne	.+6      	; 0x102e <UART_u8ReceiveChar+0x1e>
    {
        return UART_ERROR;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	8c 83       	std	Y+4, r24	; 0x04
    102c:	15 c0       	rjmp	.+42     	; 0x1058 <UART_u8ReceiveChar+0x48>
    }
    
    /* Wait for data to be received */
    while (!(UCSRA_REG & (1 << 7)));
    102e:	eb e2       	ldi	r30, 0x2B	; 43
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	88 23       	and	r24, r24
    1036:	dc f7       	brge	.-10     	; 0x102e <UART_u8ReceiveChar+0x1e>

    
    /* Check for errors */
    Local_Status = UART_u8CheckErrors();
    1038:	0e 94 93 09 	call	0x1326	; 0x1326 <UART_u8CheckErrors>
    103c:	89 83       	std	Y+1, r24	; 0x01
    if (Local_Status != UART_OK)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	88 23       	and	r24, r24
    1042:	19 f0       	breq	.+6      	; 0x104a <UART_u8ReceiveChar+0x3a>
    {
        return Local_Status;
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	8c 83       	std	Y+4, r24	; 0x04
    1048:	07 c0       	rjmp	.+14     	; 0x1058 <UART_u8ReceiveChar+0x48>
    }
    
    /* Read data */
    *Copy_pu8Data = UDR_REG;
    104a:	ec e2       	ldi	r30, 0x2C	; 44
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	ea 81       	ldd	r30, Y+2	; 0x02
    1052:	fb 81       	ldd	r31, Y+3	; 0x03
    1054:	80 83       	st	Z, r24
    
    return UART_OK;
    1056:	1c 82       	std	Y+4, r1	; 0x04
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
}
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <UART_u8ReceiveString>:

UART_Status_t UART_u8ReceiveString(u8* Copy_pu8String, u16 Copy_u16MaxLength)
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	29 97       	sbiw	r28, 0x09	; 9
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	9e 83       	std	Y+6, r25	; 0x06
    107e:	8d 83       	std	Y+5, r24	; 0x05
    1080:	78 87       	std	Y+8, r23	; 0x08
    1082:	6f 83       	std	Y+7, r22	; 0x07
    UART_Status_t Local_Status;
    u8 Local_u8ReceivedChar;
    u16 Local_u16Counter = 0;
    1084:	1a 82       	std	Y+2, r1	; 0x02
    1086:	19 82       	std	Y+1, r1	; 0x01
    
    if (Copy_pu8String == NULL || Copy_u16MaxLength == 0)
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	9e 81       	ldd	r25, Y+6	; 0x06
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	21 f0       	breq	.+8      	; 0x1098 <UART_u8ReceiveString+0x30>
    1090:	8f 81       	ldd	r24, Y+7	; 0x07
    1092:	98 85       	ldd	r25, Y+8	; 0x08
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	11 f5       	brne	.+68     	; 0x10dc <UART_u8ReceiveString+0x74>
    {
        return UART_ERROR;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	89 87       	std	Y+9, r24	; 0x09
    109c:	32 c0       	rjmp	.+100    	; 0x1102 <UART_u8ReceiveString+0x9a>
    }
    
    while (Local_u16Counter < (Copy_u16MaxLength - 1))
    {
        Local_Status = UART_u8ReceiveChar(&Local_u8ReceivedChar);
    109e:	ce 01       	movw	r24, r28
    10a0:	04 96       	adiw	r24, 0x04	; 4
    10a2:	0e 94 08 08 	call	0x1010	; 0x1010 <UART_u8ReceiveChar>
    10a6:	8b 83       	std	Y+3, r24	; 0x03
        if (Local_Status != UART_OK)
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	88 23       	and	r24, r24
    10ac:	19 f0       	breq	.+6      	; 0x10b4 <UART_u8ReceiveString+0x4c>
        {
            return Local_Status;
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	89 87       	std	Y+9, r24	; 0x09
    10b2:	27 c0       	rjmp	.+78     	; 0x1102 <UART_u8ReceiveString+0x9a>
        }
        
        if (Local_u8ReceivedChar == '\r' || Local_u8ReceivedChar == '\n')
    10b4:	8c 81       	ldd	r24, Y+4	; 0x04
    10b6:	8d 30       	cpi	r24, 0x0D	; 13
    10b8:	d9 f0       	breq	.+54     	; 0x10f0 <UART_u8ReceiveString+0x88>
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	8a 30       	cpi	r24, 0x0A	; 10
    10be:	c1 f0       	breq	.+48     	; 0x10f0 <UART_u8ReceiveString+0x88>
        {
            break;
        }
        
        Copy_pu8String[Local_u16Counter] = Local_u8ReceivedChar;
    10c0:	2d 81       	ldd	r18, Y+5	; 0x05
    10c2:	3e 81       	ldd	r19, Y+6	; 0x06
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	f9 01       	movw	r30, r18
    10ca:	e8 0f       	add	r30, r24
    10cc:	f9 1f       	adc	r31, r25
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	80 83       	st	Z, r24
        Local_u16Counter++;
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	9a 81       	ldd	r25, Y+2	; 0x02
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	9a 83       	std	Y+2, r25	; 0x02
    10da:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pu8String == NULL || Copy_u16MaxLength == 0)
    {
        return UART_ERROR;
    }
    
    while (Local_u16Counter < (Copy_u16MaxLength - 1))
    10dc:	8f 81       	ldd	r24, Y+7	; 0x07
    10de:	98 85       	ldd	r25, Y+8	; 0x08
    10e0:	9c 01       	movw	r18, r24
    10e2:	21 50       	subi	r18, 0x01	; 1
    10e4:	30 40       	sbci	r19, 0x00	; 0
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	82 17       	cp	r24, r18
    10ec:	93 07       	cpc	r25, r19
    10ee:	b8 f2       	brcs	.-82     	; 0x109e <UART_u8ReceiveString+0x36>
        Copy_pu8String[Local_u16Counter] = Local_u8ReceivedChar;
        Local_u16Counter++;
    }
    
    /* Null terminate the string */
    Copy_pu8String[Local_u16Counter] = '\0';
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	9e 81       	ldd	r25, Y+6	; 0x06
    10f4:	29 81       	ldd	r18, Y+1	; 0x01
    10f6:	3a 81       	ldd	r19, Y+2	; 0x02
    10f8:	fc 01       	movw	r30, r24
    10fa:	e2 0f       	add	r30, r18
    10fc:	f3 1f       	adc	r31, r19
    10fe:	10 82       	st	Z, r1
    
    return UART_OK;
    1100:	19 86       	std	Y+9, r1	; 0x09
    1102:	89 85       	ldd	r24, Y+9	; 0x09
}
    1104:	29 96       	adiw	r28, 0x09	; 9
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <UART_u8ReceiveCharNonBlocking>:

UART_Status_t UART_u8ReceiveCharNonBlocking(u8* Copy_pu8Data)
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	00 d0       	rcall	.+0      	; 0x111c <UART_u8ReceiveCharNonBlocking+0x6>
    111c:	00 d0       	rcall	.+0      	; 0x111e <UART_u8ReceiveCharNonBlocking+0x8>
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	9b 83       	std	Y+3, r25	; 0x03
    1124:	8a 83       	std	Y+2, r24	; 0x02
    UART_Status_t Local_Status;
    
    if (Copy_pu8Data == NULL)
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	9b 81       	ldd	r25, Y+3	; 0x03
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	19 f4       	brne	.+6      	; 0x1134 <UART_u8ReceiveCharNonBlocking+0x1e>
    {
        return UART_ERROR;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	8c 83       	std	Y+4, r24	; 0x04
    1132:	18 c0       	rjmp	.+48     	; 0x1164 <UART_u8ReceiveCharNonBlocking+0x4e>
    }
    
    /* Check if data is available */
    if (!(UCSRA_REG & (1 << 7)))
    1134:	eb e2       	ldi	r30, 0x2B	; 43
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	88 23       	and	r24, r24
    113c:	1c f0       	brlt	.+6      	; 0x1144 <UART_u8ReceiveCharNonBlocking+0x2e>
    {
        return UART_TIMEOUT; // No data available
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	8c 83       	std	Y+4, r24	; 0x04
    1142:	10 c0       	rjmp	.+32     	; 0x1164 <UART_u8ReceiveCharNonBlocking+0x4e>
    }
    
    /* Check for errors */
    Local_Status = UART_u8CheckErrors();
    1144:	0e 94 93 09 	call	0x1326	; 0x1326 <UART_u8CheckErrors>
    1148:	89 83       	std	Y+1, r24	; 0x01
    if (Local_Status != UART_OK)
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	88 23       	and	r24, r24
    114e:	19 f0       	breq	.+6      	; 0x1156 <UART_u8ReceiveCharNonBlocking+0x40>
    {
        return Local_Status;
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	8c 83       	std	Y+4, r24	; 0x04
    1154:	07 c0       	rjmp	.+14     	; 0x1164 <UART_u8ReceiveCharNonBlocking+0x4e>
    }
    
    /* Read data */
    *Copy_pu8Data = UDR_REG;
    1156:	ec e2       	ldi	r30, 0x2C	; 44
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	ea 81       	ldd	r30, Y+2	; 0x02
    115e:	fb 81       	ldd	r31, Y+3	; 0x03
    1160:	80 83       	st	Z, r24
    
    return UART_OK;
    1162:	1c 82       	std	Y+4, r1	; 0x04
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <UART_u8DataAvailable>:


u8 UART_u8DataAvailable(void)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    return (UCSRA_REG & (1 << 7)) ? 1 : 0;
    117e:	eb e2       	ldi	r30, 0x2B	; 43
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	19 82       	std	Y+1, r1	; 0x01
    1186:	88 23       	and	r24, r24
    1188:	14 f4       	brge	.+4      	; 0x118e <UART_u8DataAvailable+0x1a>
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1190:	0f 90       	pop	r0
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <UART_u8TransmitterReady>:

u8 UART_u8TransmitterReady(void)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	0f 92       	push	r0
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    return (UCSRA_REG & (1 << 5)) ? 1 : 0;
    11a2:	eb e2       	ldi	r30, 0x2B	; 43
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	80 72       	andi	r24, 0x20	; 32
    11ae:	90 70       	andi	r25, 0x00	; 0
    11b0:	19 82       	std	Y+1, r1	; 0x01
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	11 f0       	breq	.+4      	; 0x11ba <UART_u8TransmitterReady+0x22>
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <UART_voidSetRxCallback>:

void UART_voidSetRxCallback(void (*Copy_pvCallBack)(u8))
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <UART_voidSetRxCallback+0x6>
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	89 83       	std	Y+1, r24	; 0x01
    UART_pvRxCallback = Copy_pvCallBack;
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	90 93 71 00 	sts	0x0071, r25
    11da:	80 93 70 00 	sts	0x0070, r24
}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <UART_voidSetTxCallback>:

void UART_voidSetTxCallback(void (*Copy_pvCallBack)(void))
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <UART_voidSetTxCallback+0x6>
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	9a 83       	std	Y+2, r25	; 0x02
    11f4:	89 83       	std	Y+1, r24	; 0x01
    UART_pvTxCallback = Copy_pvCallBack;
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	90 93 73 00 	sts	0x0073, r25
    11fe:	80 93 72 00 	sts	0x0072, r24
}
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <UART_voidSetInterruptMode>:

void UART_voidSetInterruptMode(u8 Copy_u8InterruptMode)
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <UART_voidSetInterruptMode+0x6>
    1212:	0f 92       	push	r0
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	89 83       	std	Y+1, r24	; 0x01
    /* Clear interrupt enable bits */
    UCSRB_REG &= ~((1 << 7) | (1 << 6));
    121a:	aa e2       	ldi	r26, 0x2A	; 42
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	ea e2       	ldi	r30, 0x2A	; 42
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8f 73       	andi	r24, 0x3F	; 63
    1226:	8c 93       	st	X, r24
    
    switch (Copy_u8InterruptMode)
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	3b 83       	std	Y+3, r19	; 0x03
    1230:	2a 83       	std	Y+2, r18	; 0x02
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	9b 81       	ldd	r25, Y+3	; 0x03
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	91 05       	cpc	r25, r1
    123a:	91 f0       	breq	.+36     	; 0x1260 <UART_voidSetInterruptMode+0x54>
    123c:	2a 81       	ldd	r18, Y+2	; 0x02
    123e:	3b 81       	ldd	r19, Y+3	; 0x03
    1240:	23 30       	cpi	r18, 0x03	; 3
    1242:	31 05       	cpc	r19, r1
    1244:	a9 f0       	breq	.+42     	; 0x1270 <UART_voidSetInterruptMode+0x64>
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	9b 81       	ldd	r25, Y+3	; 0x03
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	91 05       	cpc	r25, r1
    124e:	b9 f4       	brne	.+46     	; 0x127e <UART_voidSetInterruptMode+0x72>
    {
        case UART_INT_RX_ENABLED:
            UCSRB_REG |= (1 << 7); // RXCIE
    1250:	aa e2       	ldi	r26, 0x2A	; 42
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	ea e2       	ldi	r30, 0x2A	; 42
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	80 68       	ori	r24, 0x80	; 128
    125c:	8c 93       	st	X, r24
    125e:	0f c0       	rjmp	.+30     	; 0x127e <UART_voidSetInterruptMode+0x72>
            break;
        case UART_INT_TX_ENABLED:
            UCSRB_REG |= (1 << 6); // TXCIE
    1260:	aa e2       	ldi	r26, 0x2A	; 42
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	ea e2       	ldi	r30, 0x2A	; 42
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	80 64       	ori	r24, 0x40	; 64
    126c:	8c 93       	st	X, r24
    126e:	07 c0       	rjmp	.+14     	; 0x127e <UART_voidSetInterruptMode+0x72>
            break;
        case UART_INT_BOTH_ENABLED:
            UCSRB_REG |= (1 << 7) | (1 << 6); // RXCIE and TXCIE
    1270:	aa e2       	ldi	r26, 0x2A	; 42
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	ea e2       	ldi	r30, 0x2A	; 42
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	80 6c       	ori	r24, 0xC0	; 192
    127c:	8c 93       	st	X, r24
            break;
        default:
            break;
    }
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <UART_voidFlush>:

void UART_voidFlush(void)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	0f 92       	push	r0
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	04 c0       	rjmp	.+8      	; 0x129e <UART_voidFlush+0x14>
    u8 Local_u8Dummy;
    
    /* Clear any pending received data */
    while (UCSRA_REG & (1 << 7))
    {
        Local_u8Dummy = UDR_REG;
    1296:	ec e2       	ldi	r30, 0x2C	; 44
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	89 83       	std	Y+1, r24	; 0x01
void UART_voidFlush(void)
{
    u8 Local_u8Dummy;
    
    /* Clear any pending received data */
    while (UCSRA_REG & (1 << 7))
    129e:	eb e2       	ldi	r30, 0x2B	; 43
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	88 23       	and	r24, r24
    12a6:	bc f3       	brlt	.-18     	; 0x1296 <UART_voidFlush+0xc>
    {
        Local_u8Dummy = UDR_REG;
    }
    
    /* Wait for any transmission to complete */
    while (!(UCSRA_REG & (1 << 6)));
    12a8:	eb e2       	ldi	r30, 0x2B	; 43
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	88 2f       	mov	r24, r24
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	80 74       	andi	r24, 0x40	; 64
    12b4:	90 70       	andi	r25, 0x00	; 0
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	b9 f3       	breq	.-18     	; 0x12a8 <UART_voidFlush+0x1e>
}
    12ba:	0f 90       	pop	r0
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <UART_u16CalculateBaudRate>:

/* Private Functions */

static u16 UART_u16CalculateBaudRate(u32 Copy_u32BaudRate)
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <UART_u16CalculateBaudRate+0x6>
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <UART_u16CalculateBaudRate+0x8>
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	69 83       	std	Y+1, r22	; 0x01
    12d0:	7a 83       	std	Y+2, r23	; 0x02
    12d2:	8b 83       	std	Y+3, r24	; 0x03
    12d4:	9c 83       	std	Y+4, r25	; 0x04
    return (u16)((F_CPU / (16UL * Copy_u32BaudRate)) - 1);
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	9a 81       	ldd	r25, Y+2	; 0x02
    12da:	ab 81       	ldd	r26, Y+3	; 0x03
    12dc:	bc 81       	ldd	r27, Y+4	; 0x04
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	aa 1f       	adc	r26, r26
    12e4:	bb 1f       	adc	r27, r27
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	aa 1f       	adc	r26, r26
    12ec:	bb 1f       	adc	r27, r27
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	aa 1f       	adc	r26, r26
    12f4:	bb 1f       	adc	r27, r27
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	aa 1f       	adc	r26, r26
    12fc:	bb 1f       	adc	r27, r27
    12fe:	9c 01       	movw	r18, r24
    1300:	ad 01       	movw	r20, r26
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	92 e1       	ldi	r25, 0x12	; 18
    1306:	aa e7       	ldi	r26, 0x7A	; 122
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	bc 01       	movw	r22, r24
    130c:	cd 01       	movw	r24, r26
    130e:	0e 94 bb 29 	call	0x5376	; 0x5376 <__udivmodsi4>
    1312:	da 01       	movw	r26, r20
    1314:	c9 01       	movw	r24, r18
    1316:	01 97       	sbiw	r24, 0x01	; 1
}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <UART_u8CheckErrors>:

static UART_Status_t UART_u8CheckErrors(void)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <UART_u8CheckErrors+0x6>
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8Status = UCSRA_REG;
    1330:	eb e2       	ldi	r30, 0x2B	; 43
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	89 83       	std	Y+1, r24	; 0x01
    
    if (Local_u8Status & (1 << 4)) // Frame Error
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	88 2f       	mov	r24, r24
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	80 71       	andi	r24, 0x10	; 16
    1340:	90 70       	andi	r25, 0x00	; 0
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	19 f0       	breq	.+6      	; 0x134c <UART_u8CheckErrors+0x26>
    {
        return UART_FRAME_ERROR;
    1346:	84 e0       	ldi	r24, 0x04	; 4
    1348:	8a 83       	std	Y+2, r24	; 0x02
    134a:	15 c0       	rjmp	.+42     	; 0x1376 <UART_u8CheckErrors+0x50>
    }
    
    if (Local_u8Status & (1 << 3)) // Data Overrun
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	88 70       	andi	r24, 0x08	; 8
    1354:	90 70       	andi	r25, 0x00	; 0
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	19 f0       	breq	.+6      	; 0x1360 <UART_u8CheckErrors+0x3a>
    {
        return UART_OVERRUN_ERROR;
    135a:	85 e0       	ldi	r24, 0x05	; 5
    135c:	8a 83       	std	Y+2, r24	; 0x02
    135e:	0b c0       	rjmp	.+22     	; 0x1376 <UART_u8CheckErrors+0x50>
    }
    
    if (Local_u8Status & (1 << 2)) // Parity Error
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	84 70       	andi	r24, 0x04	; 4
    1368:	90 70       	andi	r25, 0x00	; 0
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	19 f0       	breq	.+6      	; 0x1374 <UART_u8CheckErrors+0x4e>
    {
        return UART_PARITY_ERROR;
    136e:	83 e0       	ldi	r24, 0x03	; 3
    1370:	8a 83       	std	Y+2, r24	; 0x02
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <UART_u8CheckErrors+0x50>
    }
    
    return UART_OK;
    1374:	1a 82       	std	Y+2, r1	; 0x02
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <__vector_13>:
/* Interrupt Service Routines */

/* RX Complete Interrupt */
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    1382:	1f 92       	push	r1
    1384:	0f 92       	push	r0
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	0f 92       	push	r0
    138a:	11 24       	eor	r1, r1
    138c:	2f 93       	push	r18
    138e:	3f 93       	push	r19
    1390:	4f 93       	push	r20
    1392:	5f 93       	push	r21
    1394:	6f 93       	push	r22
    1396:	7f 93       	push	r23
    1398:	8f 93       	push	r24
    139a:	9f 93       	push	r25
    139c:	af 93       	push	r26
    139e:	bf 93       	push	r27
    13a0:	ef 93       	push	r30
    13a2:	ff 93       	push	r31
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	0f 92       	push	r0
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8ReceivedData = UDR_REG;
    13ae:	ec e2       	ldi	r30, 0x2C	; 44
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	89 83       	std	Y+1, r24	; 0x01
    
    if (UART_pvRxCallback != NULL)
    13b6:	80 91 70 00 	lds	r24, 0x0070
    13ba:	90 91 71 00 	lds	r25, 0x0071
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	31 f0       	breq	.+12     	; 0x13ce <__vector_13+0x4c>
    {
        UART_pvRxCallback(Local_u8ReceivedData);
    13c2:	e0 91 70 00 	lds	r30, 0x0070
    13c6:	f0 91 71 00 	lds	r31, 0x0071
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	09 95       	icall
    }
}
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	ff 91       	pop	r31
    13d6:	ef 91       	pop	r30
    13d8:	bf 91       	pop	r27
    13da:	af 91       	pop	r26
    13dc:	9f 91       	pop	r25
    13de:	8f 91       	pop	r24
    13e0:	7f 91       	pop	r23
    13e2:	6f 91       	pop	r22
    13e4:	5f 91       	pop	r21
    13e6:	4f 91       	pop	r20
    13e8:	3f 91       	pop	r19
    13ea:	2f 91       	pop	r18
    13ec:	0f 90       	pop	r0
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	0f 90       	pop	r0
    13f2:	1f 90       	pop	r1
    13f4:	18 95       	reti

000013f6 <__vector_14>:

/* TX Complete Interrupt */
void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
    13f6:	1f 92       	push	r1
    13f8:	0f 92       	push	r0
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	0f 92       	push	r0
    13fe:	11 24       	eor	r1, r1
    1400:	2f 93       	push	r18
    1402:	3f 93       	push	r19
    1404:	4f 93       	push	r20
    1406:	5f 93       	push	r21
    1408:	6f 93       	push	r22
    140a:	7f 93       	push	r23
    140c:	8f 93       	push	r24
    140e:	9f 93       	push	r25
    1410:	af 93       	push	r26
    1412:	bf 93       	push	r27
    1414:	ef 93       	push	r30
    1416:	ff 93       	push	r31
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    if (UART_pvTxCallback != NULL)
    1420:	80 91 72 00 	lds	r24, 0x0072
    1424:	90 91 73 00 	lds	r25, 0x0073
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	29 f0       	breq	.+10     	; 0x1436 <__vector_14+0x40>
    {
        UART_pvTxCallback();
    142c:	e0 91 72 00 	lds	r30, 0x0072
    1430:	f0 91 73 00 	lds	r31, 0x0073
    1434:	09 95       	icall
    }
}
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	ff 91       	pop	r31
    143c:	ef 91       	pop	r30
    143e:	bf 91       	pop	r27
    1440:	af 91       	pop	r26
    1442:	9f 91       	pop	r25
    1444:	8f 91       	pop	r24
    1446:	7f 91       	pop	r23
    1448:	6f 91       	pop	r22
    144a:	5f 91       	pop	r21
    144c:	4f 91       	pop	r20
    144e:	3f 91       	pop	r19
    1450:	2f 91       	pop	r18
    1452:	0f 90       	pop	r0
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	0f 90       	pop	r0
    1458:	1f 90       	pop	r1
    145a:	18 95       	reti

0000145c <TIMER1_vidInit>:




void TIMER1_vidInit(void)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
#elif(TIMER1_MODE == MODE_13 )
SET_BIT(TCCR1B_REG,4);SET_BIT(TCCR1B_REG,3);
CLR_BIT(TCCR1A_REG,1);CLR_BIT(TCCR1A_REG,0);

#elif(TIMER1_MODE == MODE_14 )
SET_BIT(TCCR1B_REG,4);SET_BIT(TCCR1B_REG,3);
    1464:	ae e4       	ldi	r26, 0x4E	; 78
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	ee e4       	ldi	r30, 0x4E	; 78
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	80 61       	ori	r24, 0x10	; 16
    1470:	8c 93       	st	X, r24
    1472:	ae e4       	ldi	r26, 0x4E	; 78
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ee e4       	ldi	r30, 0x4E	; 78
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	88 60       	ori	r24, 0x08	; 8
    147e:	8c 93       	st	X, r24
SET_BIT(TCCR1A_REG,1);CLR_BIT(TCCR1A_REG,0);
    1480:	af e4       	ldi	r26, 0x4F	; 79
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	ef e4       	ldi	r30, 0x4F	; 79
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	82 60       	ori	r24, 0x02	; 2
    148c:	8c 93       	st	X, r24
    148e:	af e4       	ldi	r26, 0x4F	; 79
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	ef e4       	ldi	r30, 0x4F	; 79
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	8e 7f       	andi	r24, 0xFE	; 254
    149a:	8c 93       	st	X, r24
#elif(TIMER1_MODE == MODE_15 )
SET_BIT(TCCR1B_REG,4);SET_BIT(TCCR1B_REG,3);
SET_BIT(TCCR1A_REG,1);SET_BIT(TCCR1A_REG,0);

#endif
}
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <TIMER1_vidStartTimer_OverFlowMode>:


void TIMER1_vidStartTimer_OverFlowMode(u16 u16InitVal)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <TIMER1_vidStartTimer_OverFlowMode+0x6>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	9a 83       	std	Y+2, r25	; 0x02
    14ae:	89 83       	std	Y+1, r24	; 0x01
/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER1_vidSetInitReg(u16InitVal);
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	9a 81       	ldd	r25, Y+2	; 0x02
    14b4:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <TIMER1_vidSetInitReg>

/**********************************************/
/**************Enable Interrupt ***************/
/**********************************************/
SET_BIT(SR_REG,7);  	//Global Interrupt
    14b8:	af e5       	ldi	r26, 0x5F	; 95
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	ef e5       	ldi	r30, 0x5F	; 95
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	80 68       	ori	r24, 0x80	; 128
    14c4:	8c 93       	st	X, r24
SET_BIT(TIMSK_REG,2);	//Over Flow Interrupt For Timer 1
    14c6:	a9 e5       	ldi	r26, 0x59	; 89
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e9 e5       	ldi	r30, 0x59	; 89
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	84 60       	ori	r24, 0x04	; 4
    14d2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,2);
	SET_BIT(TCCR1B_REG,1);
	CLR_BIT(TCCR1B_REG,0);

#elif(CLOCK_SELECT == CLK_64_PRESCALER )
	CLR_BIT(TCCR1B_REG,2);
    14d4:	ae e4       	ldi	r26, 0x4E	; 78
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	ee e4       	ldi	r30, 0x4E	; 78
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8b 7f       	andi	r24, 0xFB	; 251
    14e0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,1);
    14e2:	ae e4       	ldi	r26, 0x4E	; 78
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	ee e4       	ldi	r30, 0x4E	; 78
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	82 60       	ori	r24, 0x02	; 2
    14ee:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,0);
    14f0:	ae e4       	ldi	r26, 0x4E	; 78
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	ee e4       	ldi	r30, 0x4E	; 78
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	81 60       	ori	r24, 0x01	; 1
    14fc:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,2);
	SET_BIT(TCCR1B_REG,1);
	SET_BIT(TCCR1B_REG,0);

#endif
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <TIMER1_vidStartTimer_CTCMode>:



void TIMER1_vidStartTimer_CTCMode(u16 u16InitVal , u16 u16CompareValue,u8 u8CTCMode,u8 u8Channel)
{
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	66 97       	sbiw	r28, 0x16	; 22
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	9a 83       	std	Y+2, r25	; 0x02
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	7c 83       	std	Y+4, r23	; 0x04
    1522:	6b 83       	std	Y+3, r22	; 0x03
    1524:	4d 83       	std	Y+5, r20	; 0x05
    1526:	2e 83       	std	Y+6, r18	; 0x06
/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER1_vidSetInitReg(u16InitVal);
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	9a 81       	ldd	r25, Y+2	; 0x02
    152c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <TIMER1_vidSetInitReg>

/**********************************************/
/**************Enable Interrupt ***************/
/**********************************************/

switch(u8CTCMode)
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	3e 8b       	std	Y+22, r19	; 0x16
    1538:	2d 8b       	std	Y+21, r18	; 0x15
    153a:	8d 89       	ldd	r24, Y+21	; 0x15
    153c:	9e 89       	ldd	r25, Y+22	; 0x16
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	91 05       	cpc	r25, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <TIMER1_vidStartTimer_CTCMode+0x3e>
    1544:	ac c0       	rjmp	.+344    	; 0x169e <TIMER1_vidStartTimer_CTCMode+0x196>
    1546:	2d 89       	ldd	r18, Y+21	; 0x15
    1548:	3e 89       	ldd	r19, Y+22	; 0x16
    154a:	24 30       	cpi	r18, 0x04	; 4
    154c:	31 05       	cpc	r19, r1
    154e:	8c f4       	brge	.+34     	; 0x1572 <TIMER1_vidStartTimer_CTCMode+0x6a>
    1550:	8d 89       	ldd	r24, Y+21	; 0x15
    1552:	9e 89       	ldd	r25, Y+22	; 0x16
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	91 05       	cpc	r25, r1
    1558:	09 f4       	brne	.+2      	; 0x155c <TIMER1_vidStartTimer_CTCMode+0x54>
    155a:	45 c0       	rjmp	.+138    	; 0x15e6 <TIMER1_vidStartTimer_CTCMode+0xde>
    155c:	2d 89       	ldd	r18, Y+21	; 0x15
    155e:	3e 89       	ldd	r19, Y+22	; 0x16
    1560:	22 30       	cpi	r18, 0x02	; 2
    1562:	31 05       	cpc	r19, r1
    1564:	0c f0       	brlt	.+2      	; 0x1568 <TIMER1_vidStartTimer_CTCMode+0x60>
    1566:	6d c0       	rjmp	.+218    	; 0x1642 <TIMER1_vidStartTimer_CTCMode+0x13a>
    1568:	8d 89       	ldd	r24, Y+21	; 0x15
    156a:	9e 89       	ldd	r25, Y+22	; 0x16
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	a1 f0       	breq	.+40     	; 0x1598 <TIMER1_vidStartTimer_CTCMode+0x90>
    1570:	8c c1       	rjmp	.+792    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
    1572:	2d 89       	ldd	r18, Y+21	; 0x15
    1574:	3e 89       	ldd	r19, Y+22	; 0x16
    1576:	25 30       	cpi	r18, 0x05	; 5
    1578:	31 05       	cpc	r19, r1
    157a:	09 f4       	brne	.+2      	; 0x157e <TIMER1_vidStartTimer_CTCMode+0x76>
    157c:	01 c1       	rjmp	.+514    	; 0x1780 <TIMER1_vidStartTimer_CTCMode+0x278>
    157e:	8d 89       	ldd	r24, Y+21	; 0x15
    1580:	9e 89       	ldd	r25, Y+22	; 0x16
    1582:	85 30       	cpi	r24, 0x05	; 5
    1584:	91 05       	cpc	r25, r1
    1586:	0c f4       	brge	.+2      	; 0x158a <TIMER1_vidStartTimer_CTCMode+0x82>
    1588:	b8 c0       	rjmp	.+368    	; 0x16fa <TIMER1_vidStartTimer_CTCMode+0x1f2>
    158a:	2d 89       	ldd	r18, Y+21	; 0x15
    158c:	3e 89       	ldd	r19, Y+22	; 0x16
    158e:	26 30       	cpi	r18, 0x06	; 6
    1590:	31 05       	cpc	r19, r1
    1592:	09 f4       	brne	.+2      	; 0x1596 <TIMER1_vidStartTimer_CTCMode+0x8e>
    1594:	38 c1       	rjmp	.+624    	; 0x1806 <TIMER1_vidStartTimer_CTCMode+0x2fe>
    1596:	79 c1       	rjmp	.+754    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
{
case (TIMER1_CTC_CM_INTRUPT):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    1598:	af e5       	ldi	r26, 0x5F	; 95
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	ef e5       	ldi	r30, 0x5F	; 95
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	80 68       	ori	r24, 0x80	; 128
    15a4:	8c 93       	st	X, r24

	switch(u8Channel)
    15a6:	8e 81       	ldd	r24, Y+6	; 0x06
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	3c 8b       	std	Y+20, r19	; 0x14
    15ae:	2b 8b       	std	Y+19, r18	; 0x13
    15b0:	8b 89       	ldd	r24, Y+19	; 0x13
    15b2:	9c 89       	ldd	r25, Y+20	; 0x14
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	91 05       	cpc	r25, r1
    15b8:	31 f0       	breq	.+12     	; 0x15c6 <TIMER1_vidStartTimer_CTCMode+0xbe>
    15ba:	2b 89       	ldd	r18, Y+19	; 0x13
    15bc:	3c 89       	ldd	r19, Y+20	; 0x14
    15be:	22 30       	cpi	r18, 0x02	; 2
    15c0:	31 05       	cpc	r19, r1
    15c2:	49 f0       	breq	.+18     	; 0x15d6 <TIMER1_vidStartTimer_CTCMode+0xce>
    15c4:	62 c1       	rjmp	.+708    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	{
	case (TIMER1_CHANNEL_A):SET_BIT(TIMSK_REG,4);break;//Output Compare Interrupt For Timer 1A
    15c6:	a9 e5       	ldi	r26, 0x59	; 89
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e9 e5       	ldi	r30, 0x59	; 89
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	80 61       	ori	r24, 0x10	; 16
    15d2:	8c 93       	st	X, r24
    15d4:	5a c1       	rjmp	.+692    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	case (TIMER1_CHANNEL_B):SET_BIT(TIMSK_REG,3);break;//Output Compare Interrupt For Timer 1B
    15d6:	a9 e5       	ldi	r26, 0x59	; 89
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e9 e5       	ldi	r30, 0x59	; 89
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	88 60       	ori	r24, 0x08	; 8
    15e2:	8c 93       	st	X, r24
    15e4:	52 c1       	rjmp	.+676    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	}
	break;

case (TIMER1_CTC_PINS_TOGGLE):
	switch(u8Channel)
    15e6:	8e 81       	ldd	r24, Y+6	; 0x06
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	3a 8b       	std	Y+18, r19	; 0x12
    15ee:	29 8b       	std	Y+17, r18	; 0x11
    15f0:	89 89       	ldd	r24, Y+17	; 0x11
    15f2:	9a 89       	ldd	r25, Y+18	; 0x12
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	91 05       	cpc	r25, r1
    15f8:	31 f0       	breq	.+12     	; 0x1606 <TIMER1_vidStartTimer_CTCMode+0xfe>
    15fa:	29 89       	ldd	r18, Y+17	; 0x11
    15fc:	3a 89       	ldd	r19, Y+18	; 0x12
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	81 f0       	breq	.+32     	; 0x1624 <TIMER1_vidStartTimer_CTCMode+0x11c>
    1604:	42 c1       	rjmp	.+644    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	{
	case (TIMER1_CHANNEL_A):CLR_BIT(TCCR1A_REG,7);SET_BIT(TCCR1A_REG,6);break;
    1606:	af e4       	ldi	r26, 0x4F	; 79
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	ef e4       	ldi	r30, 0x4F	; 79
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	8f 77       	andi	r24, 0x7F	; 127
    1612:	8c 93       	st	X, r24
    1614:	af e4       	ldi	r26, 0x4F	; 79
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	ef e4       	ldi	r30, 0x4F	; 79
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	80 64       	ori	r24, 0x40	; 64
    1620:	8c 93       	st	X, r24
    1622:	33 c1       	rjmp	.+614    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	case (TIMER1_CHANNEL_B):CLR_BIT(TCCR1A_REG,5);SET_BIT(TCCR1A_REG,4);break;
    1624:	af e4       	ldi	r26, 0x4F	; 79
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	ef e4       	ldi	r30, 0x4F	; 79
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	8f 7d       	andi	r24, 0xDF	; 223
    1630:	8c 93       	st	X, r24
    1632:	af e4       	ldi	r26, 0x4F	; 79
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ef e4       	ldi	r30, 0x4F	; 79
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	80 61       	ori	r24, 0x10	; 16
    163e:	8c 93       	st	X, r24
    1640:	24 c1       	rjmp	.+584    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	} //Toggle The Pin1 A or B on compare match
	break;

case (TIMER1_CTC_PINS_CLEAR):
	switch(u8Channel)
    1642:	8e 81       	ldd	r24, Y+6	; 0x06
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	38 8b       	std	Y+16, r19	; 0x10
    164a:	2f 87       	std	Y+15, r18	; 0x0f
    164c:	8f 85       	ldd	r24, Y+15	; 0x0f
    164e:	98 89       	ldd	r25, Y+16	; 0x10
    1650:	81 30       	cpi	r24, 0x01	; 1
    1652:	91 05       	cpc	r25, r1
    1654:	31 f0       	breq	.+12     	; 0x1662 <TIMER1_vidStartTimer_CTCMode+0x15a>
    1656:	2f 85       	ldd	r18, Y+15	; 0x0f
    1658:	38 89       	ldd	r19, Y+16	; 0x10
    165a:	22 30       	cpi	r18, 0x02	; 2
    165c:	31 05       	cpc	r19, r1
    165e:	81 f0       	breq	.+32     	; 0x1680 <TIMER1_vidStartTimer_CTCMode+0x178>
    1660:	14 c1       	rjmp	.+552    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	{
	case (TIMER1_CHANNEL_A):SET_BIT(TCCR1A_REG,7);CLR_BIT(TCCR1A_REG,6);break;
    1662:	af e4       	ldi	r26, 0x4F	; 79
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	ef e4       	ldi	r30, 0x4F	; 79
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	80 68       	ori	r24, 0x80	; 128
    166e:	8c 93       	st	X, r24
    1670:	af e4       	ldi	r26, 0x4F	; 79
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	ef e4       	ldi	r30, 0x4F	; 79
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	8f 7b       	andi	r24, 0xBF	; 191
    167c:	8c 93       	st	X, r24
    167e:	05 c1       	rjmp	.+522    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	case (TIMER1_CHANNEL_B):SET_BIT(TCCR1A_REG,5);CLR_BIT(TCCR1A_REG,4);break;
    1680:	af e4       	ldi	r26, 0x4F	; 79
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	ef e4       	ldi	r30, 0x4F	; 79
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	80 62       	ori	r24, 0x20	; 32
    168c:	8c 93       	st	X, r24
    168e:	af e4       	ldi	r26, 0x4F	; 79
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	ef e4       	ldi	r30, 0x4F	; 79
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	8f 7e       	andi	r24, 0xEF	; 239
    169a:	8c 93       	st	X, r24
    169c:	f6 c0       	rjmp	.+492    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	}	//Clear The Pin1 A or B on compare match
	break;

case (TIMER1_CTC_PINS_SET):
	switch(u8Channel)
    169e:	8e 81       	ldd	r24, Y+6	; 0x06
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	3e 87       	std	Y+14, r19	; 0x0e
    16a6:	2d 87       	std	Y+13, r18	; 0x0d
    16a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	91 05       	cpc	r25, r1
    16b0:	31 f0       	breq	.+12     	; 0x16be <TIMER1_vidStartTimer_CTCMode+0x1b6>
    16b2:	2d 85       	ldd	r18, Y+13	; 0x0d
    16b4:	3e 85       	ldd	r19, Y+14	; 0x0e
    16b6:	22 30       	cpi	r18, 0x02	; 2
    16b8:	31 05       	cpc	r19, r1
    16ba:	81 f0       	breq	.+32     	; 0x16dc <TIMER1_vidStartTimer_CTCMode+0x1d4>
    16bc:	e6 c0       	rjmp	.+460    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	{
	case (TIMER1_CHANNEL_A):SET_BIT(TCCR1A_REG,7);SET_BIT(TCCR1A_REG,6);break;
    16be:	af e4       	ldi	r26, 0x4F	; 79
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	ef e4       	ldi	r30, 0x4F	; 79
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	80 68       	ori	r24, 0x80	; 128
    16ca:	8c 93       	st	X, r24
    16cc:	af e4       	ldi	r26, 0x4F	; 79
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ef e4       	ldi	r30, 0x4F	; 79
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	80 64       	ori	r24, 0x40	; 64
    16d8:	8c 93       	st	X, r24
    16da:	d7 c0       	rjmp	.+430    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	case (TIMER1_CHANNEL_B):SET_BIT(TCCR1A_REG,5);SET_BIT(TCCR1A_REG,4);break;
    16dc:	af e4       	ldi	r26, 0x4F	; 79
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	ef e4       	ldi	r30, 0x4F	; 79
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	80 62       	ori	r24, 0x20	; 32
    16e8:	8c 93       	st	X, r24
    16ea:	af e4       	ldi	r26, 0x4F	; 79
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	ef e4       	ldi	r30, 0x4F	; 79
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	80 61       	ori	r24, 0x10	; 16
    16f6:	8c 93       	st	X, r24
    16f8:	c8 c0       	rjmp	.+400    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	}	//SET The Pin1 A or B on compare match
	break;

case (TIMER1_CTC_CM_INTRUPT_PINS_TOGGLE):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    16fa:	af e5       	ldi	r26, 0x5F	; 95
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ef e5       	ldi	r30, 0x5F	; 95
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	80 68       	ori	r24, 0x80	; 128
    1706:	8c 93       	st	X, r24
	switch(u8Channel)
    1708:	8e 81       	ldd	r24, Y+6	; 0x06
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	3c 87       	std	Y+12, r19	; 0x0c
    1710:	2b 87       	std	Y+11, r18	; 0x0b
    1712:	8b 85       	ldd	r24, Y+11	; 0x0b
    1714:	9c 85       	ldd	r25, Y+12	; 0x0c
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	91 05       	cpc	r25, r1
    171a:	31 f0       	breq	.+12     	; 0x1728 <TIMER1_vidStartTimer_CTCMode+0x220>
    171c:	2b 85       	ldd	r18, Y+11	; 0x0b
    171e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1720:	22 30       	cpi	r18, 0x02	; 2
    1722:	31 05       	cpc	r19, r1
    1724:	b9 f0       	breq	.+46     	; 0x1754 <TIMER1_vidStartTimer_CTCMode+0x24c>
    1726:	b1 c0       	rjmp	.+354    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	{
	case (TIMER1_CHANNEL_A):CLR_BIT(TCCR1A_REG,7);SET_BIT(TCCR1A_REG,6);//Toggle The Pin1 A  on compare match
    1728:	af e4       	ldi	r26, 0x4F	; 79
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	ef e4       	ldi	r30, 0x4F	; 79
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	8f 77       	andi	r24, 0x7F	; 127
    1734:	8c 93       	st	X, r24
    1736:	af e4       	ldi	r26, 0x4F	; 79
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	ef e4       	ldi	r30, 0x4F	; 79
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	80 64       	ori	r24, 0x40	; 64
    1742:	8c 93       	st	X, r24
							SET_BIT(TIMSK_REG,4);break;//Output Compare Interrupt For Timer 1A
    1744:	a9 e5       	ldi	r26, 0x59	; 89
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e9 e5       	ldi	r30, 0x59	; 89
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	80 61       	ori	r24, 0x10	; 16
    1750:	8c 93       	st	X, r24
    1752:	9b c0       	rjmp	.+310    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	case (TIMER1_CHANNEL_B):CLR_BIT(TCCR1A_REG,5);SET_BIT(TCCR1A_REG,4);//Toggle The Pin1 B on compare match
    1754:	af e4       	ldi	r26, 0x4F	; 79
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	ef e4       	ldi	r30, 0x4F	; 79
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	8f 7d       	andi	r24, 0xDF	; 223
    1760:	8c 93       	st	X, r24
    1762:	af e4       	ldi	r26, 0x4F	; 79
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	ef e4       	ldi	r30, 0x4F	; 79
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	80 61       	ori	r24, 0x10	; 16
    176e:	8c 93       	st	X, r24
							SET_BIT(TIMSK_REG,3);break;//Output Compare Interrupt For Timer 1B
    1770:	a9 e5       	ldi	r26, 0x59	; 89
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e9 e5       	ldi	r30, 0x59	; 89
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	88 60       	ori	r24, 0x08	; 8
    177c:	8c 93       	st	X, r24
    177e:	85 c0       	rjmp	.+266    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	}break;

case (TIMER1_CTC_CM_INTRUPT_PINS_CLEAR):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    1780:	af e5       	ldi	r26, 0x5F	; 95
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	ef e5       	ldi	r30, 0x5F	; 95
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	80 68       	ori	r24, 0x80	; 128
    178c:	8c 93       	st	X, r24
	switch(u8Channel)
    178e:	8e 81       	ldd	r24, Y+6	; 0x06
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	3a 87       	std	Y+10, r19	; 0x0a
    1796:	29 87       	std	Y+9, r18	; 0x09
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	81 30       	cpi	r24, 0x01	; 1
    179e:	91 05       	cpc	r25, r1
    17a0:	31 f0       	breq	.+12     	; 0x17ae <TIMER1_vidStartTimer_CTCMode+0x2a6>
    17a2:	29 85       	ldd	r18, Y+9	; 0x09
    17a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    17a6:	22 30       	cpi	r18, 0x02	; 2
    17a8:	31 05       	cpc	r19, r1
    17aa:	b9 f0       	breq	.+46     	; 0x17da <TIMER1_vidStartTimer_CTCMode+0x2d2>
    17ac:	6e c0       	rjmp	.+220    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	{
	case (TIMER1_CHANNEL_A):SET_BIT(TCCR1A_REG,7);CLR_BIT(TCCR1A_REG,6);//Clear The Pin1 A on compare match
    17ae:	af e4       	ldi	r26, 0x4F	; 79
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ef e4       	ldi	r30, 0x4F	; 79
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	80 68       	ori	r24, 0x80	; 128
    17ba:	8c 93       	st	X, r24
    17bc:	af e4       	ldi	r26, 0x4F	; 79
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	ef e4       	ldi	r30, 0x4F	; 79
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8f 7b       	andi	r24, 0xBF	; 191
    17c8:	8c 93       	st	X, r24
							SET_BIT(TIMSK_REG,4);break;//Output Compare Interrupt For Timer 1A
    17ca:	a9 e5       	ldi	r26, 0x59	; 89
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e9 e5       	ldi	r30, 0x59	; 89
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	80 61       	ori	r24, 0x10	; 16
    17d6:	8c 93       	st	X, r24
    17d8:	58 c0       	rjmp	.+176    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	case (TIMER1_CHANNEL_B):SET_BIT(TCCR1A_REG,5);CLR_BIT(TCCR1A_REG,4);//Clear The Pin1 B on compare match
    17da:	af e4       	ldi	r26, 0x4F	; 79
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	ef e4       	ldi	r30, 0x4F	; 79
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	80 62       	ori	r24, 0x20	; 32
    17e6:	8c 93       	st	X, r24
    17e8:	af e4       	ldi	r26, 0x4F	; 79
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	ef e4       	ldi	r30, 0x4F	; 79
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	8f 7e       	andi	r24, 0xEF	; 239
    17f4:	8c 93       	st	X, r24
							SET_BIT(TIMSK_REG,3);break;//Output Compare Interrupt For Timer 1B
    17f6:	a9 e5       	ldi	r26, 0x59	; 89
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e9 e5       	ldi	r30, 0x59	; 89
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	88 60       	ori	r24, 0x08	; 8
    1802:	8c 93       	st	X, r24
    1804:	42 c0       	rjmp	.+132    	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	}break;

	case (TIMER1_CTC_CM_INTRUPT_PINS_SET):
	SET_BIT(SR_REG,7);  //Global Interrupt
    1806:	af e5       	ldi	r26, 0x5F	; 95
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	ef e5       	ldi	r30, 0x5F	; 95
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	80 68       	ori	r24, 0x80	; 128
    1812:	8c 93       	st	X, r24
	switch(u8Channel)
    1814:	8e 81       	ldd	r24, Y+6	; 0x06
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	38 87       	std	Y+8, r19	; 0x08
    181c:	2f 83       	std	Y+7, r18	; 0x07
    181e:	8f 81       	ldd	r24, Y+7	; 0x07
    1820:	98 85       	ldd	r25, Y+8	; 0x08
    1822:	81 30       	cpi	r24, 0x01	; 1
    1824:	91 05       	cpc	r25, r1
    1826:	31 f0       	breq	.+12     	; 0x1834 <TIMER1_vidStartTimer_CTCMode+0x32c>
    1828:	2f 81       	ldd	r18, Y+7	; 0x07
    182a:	38 85       	ldd	r19, Y+8	; 0x08
    182c:	22 30       	cpi	r18, 0x02	; 2
    182e:	31 05       	cpc	r19, r1
    1830:	b9 f0       	breq	.+46     	; 0x1860 <TIMER1_vidStartTimer_CTCMode+0x358>
    1832:	2b c0       	rjmp	.+86     	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	{
	case (TIMER1_CHANNEL_A):SET_BIT(TCCR1A_REG,7);SET_BIT(TCCR1A_REG,6);//SET The Pin1 A on compare match
    1834:	af e4       	ldi	r26, 0x4F	; 79
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	ef e4       	ldi	r30, 0x4F	; 79
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	80 68       	ori	r24, 0x80	; 128
    1840:	8c 93       	st	X, r24
    1842:	af e4       	ldi	r26, 0x4F	; 79
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	ef e4       	ldi	r30, 0x4F	; 79
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	80 64       	ori	r24, 0x40	; 64
    184e:	8c 93       	st	X, r24
							SET_BIT(TIMSK_REG,4);break;//Output Compare Interrupt For Timer 1A
    1850:	a9 e5       	ldi	r26, 0x59	; 89
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e9 e5       	ldi	r30, 0x59	; 89
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	80 61       	ori	r24, 0x10	; 16
    185c:	8c 93       	st	X, r24
    185e:	15 c0       	rjmp	.+42     	; 0x188a <TIMER1_vidStartTimer_CTCMode+0x382>
	case (TIMER1_CHANNEL_B):SET_BIT(TCCR1A_REG,5);SET_BIT(TCCR1A_REG,4);//SET The Pin1 B on compare match
    1860:	af e4       	ldi	r26, 0x4F	; 79
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	ef e4       	ldi	r30, 0x4F	; 79
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	80 62       	ori	r24, 0x20	; 32
    186c:	8c 93       	st	X, r24
    186e:	af e4       	ldi	r26, 0x4F	; 79
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	ef e4       	ldi	r30, 0x4F	; 79
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	80 61       	ori	r24, 0x10	; 16
    187a:	8c 93       	st	X, r24
							SET_BIT(TIMSK_REG,3);break;//Output Compare Interrupt For Timer 1B
    187c:	a9 e5       	ldi	r26, 0x59	; 89
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e9 e5       	ldi	r30, 0x59	; 89
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	88 60       	ori	r24, 0x08	; 8
    1888:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,2);
	SET_BIT(TCCR1B_REG,1);
	CLR_BIT(TCCR1B_REG,0);

#elif(CLOCK_SELECT == CLK_64_PRESCALER )
	CLR_BIT(TCCR1B_REG,2);
    188a:	ae e4       	ldi	r26, 0x4E	; 78
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	ee e4       	ldi	r30, 0x4E	; 78
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	8b 7f       	andi	r24, 0xFB	; 251
    1896:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,1);
    1898:	ae e4       	ldi	r26, 0x4E	; 78
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	ee e4       	ldi	r30, 0x4E	; 78
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	82 60       	ori	r24, 0x02	; 2
    18a4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,0);
    18a6:	ae e4       	ldi	r26, 0x4E	; 78
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	ee e4       	ldi	r30, 0x4E	; 78
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	81 60       	ori	r24, 0x01	; 1
    18b2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,2);
	SET_BIT(TCCR1B_REG,1);
	SET_BIT(TCCR1B_REG,0);

#endif
}
    18b4:	66 96       	adiw	r28, 0x16	; 22
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <TIMER1_vidStartTimer_PWMMode>:




void TIMER1_vidStartTimer_PWMMode(u16 u16InitVal , u16 u16CompareValue,u8 u8PWMMode ,u8 u8Channel)
{
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	2e 97       	sbiw	r28, 0x0e	; 14
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	9a 83       	std	Y+2, r25	; 0x02
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	7c 83       	std	Y+4, r23	; 0x04
    18e0:	6b 83       	std	Y+3, r22	; 0x03
    18e2:	4d 83       	std	Y+5, r20	; 0x05
    18e4:	2e 83       	std	Y+6, r18	; 0x06
/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER1_vidSetInitReg(u16InitVal);
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ea:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <TIMER1_vidSetInitReg>

/**********************************************/
/**************Set Compared Value **************/
/**********************************************/
	switch(u8Channel)
    18ee:	8e 81       	ldd	r24, Y+6	; 0x06
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	3e 87       	std	Y+14, r19	; 0x0e
    18f6:	2d 87       	std	Y+13, r18	; 0x0d
    18f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	91 05       	cpc	r25, r1
    1900:	31 f0       	breq	.+12     	; 0x190e <TIMER1_vidStartTimer_PWMMode+0x48>
    1902:	2d 85       	ldd	r18, Y+13	; 0x0d
    1904:	3e 85       	ldd	r19, Y+14	; 0x0e
    1906:	22 30       	cpi	r18, 0x02	; 2
    1908:	31 05       	cpc	r19, r1
    190a:	31 f0       	breq	.+12     	; 0x1918 <TIMER1_vidStartTimer_PWMMode+0x52>
    190c:	09 c0       	rjmp	.+18     	; 0x1920 <TIMER1_vidStartTimer_PWMMode+0x5a>
	{
	case (TIMER1_CHANNEL_A):TIMER1_vidSetComparReg_ChannelA(u16CompareValue);break;
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	9c 81       	ldd	r25, Y+4	; 0x04
    1912:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <TIMER1_vidSetComparReg_ChannelA>
    1916:	04 c0       	rjmp	.+8      	; 0x1920 <TIMER1_vidStartTimer_PWMMode+0x5a>
	case (TIMER1_CHANNEL_B):TIMER1_vidSetComparReg_ChannelB(u16CompareValue);break;
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	9c 81       	ldd	r25, Y+4	; 0x04
    191c:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <TIMER1_vidSetComparReg_ChannelB>
	}
/**********************************************/
/**************Enable Interrupt ***************/
/**********************************************/

switch(u8PWMMode)
    1920:	8d 81       	ldd	r24, Y+5	; 0x05
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	3c 87       	std	Y+12, r19	; 0x0c
    1928:	2b 87       	std	Y+11, r18	; 0x0b
    192a:	8b 85       	ldd	r24, Y+11	; 0x0b
    192c:	9c 85       	ldd	r25, Y+12	; 0x0c
    192e:	81 30       	cpi	r24, 0x01	; 1
    1930:	91 05       	cpc	r25, r1
    1932:	31 f0       	breq	.+12     	; 0x1940 <TIMER1_vidStartTimer_PWMMode+0x7a>
    1934:	2b 85       	ldd	r18, Y+11	; 0x0b
    1936:	3c 85       	ldd	r19, Y+12	; 0x0c
    1938:	22 30       	cpi	r18, 0x02	; 2
    193a:	31 05       	cpc	r19, r1
    193c:	79 f1       	breq	.+94     	; 0x199c <TIMER1_vidStartTimer_PWMMode+0xd6>
    193e:	5b c0       	rjmp	.+182    	; 0x19f6 <TIMER1_vidStartTimer_PWMMode+0x130>
{
case (TIMER1_PWM_PIN_CLEAR_SET):
	switch(u8Channel)
    1940:	8e 81       	ldd	r24, Y+6	; 0x06
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	3a 87       	std	Y+10, r19	; 0x0a
    1948:	29 87       	std	Y+9, r18	; 0x09
    194a:	89 85       	ldd	r24, Y+9	; 0x09
    194c:	9a 85       	ldd	r25, Y+10	; 0x0a
    194e:	81 30       	cpi	r24, 0x01	; 1
    1950:	91 05       	cpc	r25, r1
    1952:	31 f0       	breq	.+12     	; 0x1960 <TIMER1_vidStartTimer_PWMMode+0x9a>
    1954:	29 85       	ldd	r18, Y+9	; 0x09
    1956:	3a 85       	ldd	r19, Y+10	; 0x0a
    1958:	22 30       	cpi	r18, 0x02	; 2
    195a:	31 05       	cpc	r19, r1
    195c:	81 f0       	breq	.+32     	; 0x197e <TIMER1_vidStartTimer_PWMMode+0xb8>
    195e:	4b c0       	rjmp	.+150    	; 0x19f6 <TIMER1_vidStartTimer_PWMMode+0x130>
	{
	case (TIMER1_CHANNEL_A):SET_BIT(TCCR1A_REG,7);CLR_BIT(TCCR1A_REG,6);break;
    1960:	af e4       	ldi	r26, 0x4F	; 79
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	ef e4       	ldi	r30, 0x4F	; 79
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	80 68       	ori	r24, 0x80	; 128
    196c:	8c 93       	st	X, r24
    196e:	af e4       	ldi	r26, 0x4F	; 79
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ef e4       	ldi	r30, 0x4F	; 79
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8f 7b       	andi	r24, 0xBF	; 191
    197a:	8c 93       	st	X, r24
    197c:	3c c0       	rjmp	.+120    	; 0x19f6 <TIMER1_vidStartTimer_PWMMode+0x130>
	case (TIMER1_CHANNEL_B):SET_BIT(TCCR1A_REG,5);CLR_BIT(TCCR1A_REG,4);break;
    197e:	af e4       	ldi	r26, 0x4F	; 79
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	ef e4       	ldi	r30, 0x4F	; 79
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	80 62       	ori	r24, 0x20	; 32
    198a:	8c 93       	st	X, r24
    198c:	af e4       	ldi	r26, 0x4F	; 79
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	ef e4       	ldi	r30, 0x4F	; 79
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8f 7e       	andi	r24, 0xEF	; 239
    1998:	8c 93       	st	X, r24
    199a:	2d c0       	rjmp	.+90     	; 0x19f6 <TIMER1_vidStartTimer_PWMMode+0x130>
	}//Clear OC1A/OC1B on compare match, set OC1A/OC1B at TOP
	break;

case (TIMER1_PWM_PIN_SET_CLEAR):
	switch(u8Channel)
    199c:	8e 81       	ldd	r24, Y+6	; 0x06
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	38 87       	std	Y+8, r19	; 0x08
    19a4:	2f 83       	std	Y+7, r18	; 0x07
    19a6:	8f 81       	ldd	r24, Y+7	; 0x07
    19a8:	98 85       	ldd	r25, Y+8	; 0x08
    19aa:	81 30       	cpi	r24, 0x01	; 1
    19ac:	91 05       	cpc	r25, r1
    19ae:	31 f0       	breq	.+12     	; 0x19bc <TIMER1_vidStartTimer_PWMMode+0xf6>
    19b0:	2f 81       	ldd	r18, Y+7	; 0x07
    19b2:	38 85       	ldd	r19, Y+8	; 0x08
    19b4:	22 30       	cpi	r18, 0x02	; 2
    19b6:	31 05       	cpc	r19, r1
    19b8:	81 f0       	breq	.+32     	; 0x19da <TIMER1_vidStartTimer_PWMMode+0x114>
    19ba:	1d c0       	rjmp	.+58     	; 0x19f6 <TIMER1_vidStartTimer_PWMMode+0x130>
	{
	case (TIMER1_CHANNEL_A):SET_BIT(TCCR1A_REG,7);SET_BIT(TCCR1A_REG,6);break;
    19bc:	af e4       	ldi	r26, 0x4F	; 79
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ef e4       	ldi	r30, 0x4F	; 79
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	80 68       	ori	r24, 0x80	; 128
    19c8:	8c 93       	st	X, r24
    19ca:	af e4       	ldi	r26, 0x4F	; 79
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	ef e4       	ldi	r30, 0x4F	; 79
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	80 64       	ori	r24, 0x40	; 64
    19d6:	8c 93       	st	X, r24
    19d8:	0e c0       	rjmp	.+28     	; 0x19f6 <TIMER1_vidStartTimer_PWMMode+0x130>
	case (TIMER1_CHANNEL_B):SET_BIT(TCCR1A_REG,5);SET_BIT(TCCR1A_REG,4);break;
    19da:	af e4       	ldi	r26, 0x4F	; 79
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	ef e4       	ldi	r30, 0x4F	; 79
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	80 62       	ori	r24, 0x20	; 32
    19e6:	8c 93       	st	X, r24
    19e8:	af e4       	ldi	r26, 0x4F	; 79
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	ef e4       	ldi	r30, 0x4F	; 79
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	80 61       	ori	r24, 0x10	; 16
    19f4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,2);
	SET_BIT(TCCR1B_REG,1);
	CLR_BIT(TCCR1B_REG,0);

#elif(CLOCK_SELECT == CLK_64_PRESCALER )
	CLR_BIT(TCCR1B_REG,2);
    19f6:	ae e4       	ldi	r26, 0x4E	; 78
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	ee e4       	ldi	r30, 0x4E	; 78
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	8b 7f       	andi	r24, 0xFB	; 251
    1a02:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,1);
    1a04:	ae e4       	ldi	r26, 0x4E	; 78
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	ee e4       	ldi	r30, 0x4E	; 78
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	82 60       	ori	r24, 0x02	; 2
    1a10:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,0);
    1a12:	ae e4       	ldi	r26, 0x4E	; 78
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	ee e4       	ldi	r30, 0x4E	; 78
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	81 60       	ori	r24, 0x01	; 1
    1a1e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,2);
	SET_BIT(TCCR1B_REG,1);
	SET_BIT(TCCR1B_REG,0);

#endif
}
    1a20:	2e 96       	adiw	r28, 0x0e	; 14
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <TIMER1_vidStartTimer_PhaseCorrectMode>:


void TIMER1_vidStartTimer_PhaseCorrectMode(u16 u16InitVal , u16 u16CompareValue,u8 u8PhsCrrectMode)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	27 97       	sbiw	r28, 0x07	; 7
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	7c 83       	std	Y+4, r23	; 0x04
    1a4c:	6b 83       	std	Y+3, r22	; 0x03
    1a4e:	4d 83       	std	Y+5, r20	; 0x05
/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER1_vidSetInitReg(u16InitVal);
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	9a 81       	ldd	r25, Y+2	; 0x02
    1a54:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <TIMER1_vidSetInitReg>

switch(u8PhsCrrectMode)
    1a58:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	3f 83       	std	Y+7, r19	; 0x07
    1a60:	2e 83       	std	Y+6, r18	; 0x06
    1a62:	8e 81       	ldd	r24, Y+6	; 0x06
    1a64:	9f 81       	ldd	r25, Y+7	; 0x07
    1a66:	82 30       	cpi	r24, 0x02	; 2
    1a68:	91 05       	cpc	r25, r1
    1a6a:	49 f1       	breq	.+82     	; 0x1abe <TIMER1_vidStartTimer_PhaseCorrectMode+0x8c>
    1a6c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a6e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a70:	23 30       	cpi	r18, 0x03	; 3
    1a72:	31 05       	cpc	r19, r1
    1a74:	34 f4       	brge	.+12     	; 0x1a82 <TIMER1_vidStartTimer_PhaseCorrectMode+0x50>
    1a76:	8e 81       	ldd	r24, Y+6	; 0x06
    1a78:	9f 81       	ldd	r25, Y+7	; 0x07
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	61 f0       	breq	.+24     	; 0x1a98 <TIMER1_vidStartTimer_PhaseCorrectMode+0x66>
    1a80:	56 c0       	rjmp	.+172    	; 0x1b2e <TIMER1_vidStartTimer_PhaseCorrectMode+0xfc>
    1a82:	2e 81       	ldd	r18, Y+6	; 0x06
    1a84:	3f 81       	ldd	r19, Y+7	; 0x07
    1a86:	23 30       	cpi	r18, 0x03	; 3
    1a88:	31 05       	cpc	r19, r1
    1a8a:	61 f1       	breq	.+88     	; 0x1ae4 <TIMER1_vidStartTimer_PhaseCorrectMode+0xb2>
    1a8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a90:	84 30       	cpi	r24, 0x04	; 4
    1a92:	91 05       	cpc	r25, r1
    1a94:	d1 f1       	breq	.+116    	; 0x1b0a <TIMER1_vidStartTimer_PhaseCorrectMode+0xd8>
    1a96:	4b c0       	rjmp	.+150    	; 0x1b2e <TIMER1_vidStartTimer_PhaseCorrectMode+0xfc>
{
case (TIMER1_PHASECORRECT_PIN1A_CLEAR_SET):
	SET_BIT(TCCR1A_REG,7);CLR_BIT(TCCR1A_REG,6);//Clear The Pin1A At Up And Set At Down
    1a98:	af e4       	ldi	r26, 0x4F	; 79
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	ef e4       	ldi	r30, 0x4F	; 79
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	80 68       	ori	r24, 0x80	; 128
    1aa4:	8c 93       	st	X, r24
    1aa6:	af e4       	ldi	r26, 0x4F	; 79
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	ef e4       	ldi	r30, 0x4F	; 79
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	8f 7b       	andi	r24, 0xBF	; 191
    1ab2:	8c 93       	st	X, r24
	TIMER1_vidSetComparReg_ChannelA(u16CompareValue);
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <TIMER1_vidSetComparReg_ChannelA>
    1abc:	38 c0       	rjmp	.+112    	; 0x1b2e <TIMER1_vidStartTimer_PhaseCorrectMode+0xfc>
	break;

case (TIMER1_PHASECORRECT_PIN1A_SET_CLEAR):
	SET_BIT(TCCR1A_REG,7);SET_BIT(TCCR1A_REG,6);//Set The Pin1A At Up And Clear At Down
    1abe:	af e4       	ldi	r26, 0x4F	; 79
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	ef e4       	ldi	r30, 0x4F	; 79
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	80 68       	ori	r24, 0x80	; 128
    1aca:	8c 93       	st	X, r24
    1acc:	af e4       	ldi	r26, 0x4F	; 79
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ef e4       	ldi	r30, 0x4F	; 79
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	80 64       	ori	r24, 0x40	; 64
    1ad8:	8c 93       	st	X, r24
	TIMER1_vidSetComparReg_ChannelA(u16CompareValue);
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ade:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <TIMER1_vidSetComparReg_ChannelA>
    1ae2:	25 c0       	rjmp	.+74     	; 0x1b2e <TIMER1_vidStartTimer_PhaseCorrectMode+0xfc>
	break;

case (TIMER1_PHASECORRECT_PIN1B_CLEAR_SET):
	SET_BIT(TCCR1A_REG,5);CLR_BIT(TCCR1A_REG,4);//Clear The Pin1B At Up And Set At Down
    1ae4:	af e4       	ldi	r26, 0x4F	; 79
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	ef e4       	ldi	r30, 0x4F	; 79
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	80 62       	ori	r24, 0x20	; 32
    1af0:	8c 93       	st	X, r24
    1af2:	af e4       	ldi	r26, 0x4F	; 79
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	ef e4       	ldi	r30, 0x4F	; 79
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	8f 7e       	andi	r24, 0xEF	; 239
    1afe:	8c 93       	st	X, r24
	TIMER1_vidSetComparReg_ChannelB(u16CompareValue);
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	9c 81       	ldd	r25, Y+4	; 0x04
    1b04:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <TIMER1_vidSetComparReg_ChannelB>
    1b08:	12 c0       	rjmp	.+36     	; 0x1b2e <TIMER1_vidStartTimer_PhaseCorrectMode+0xfc>
	break;

case (TIMER1_PHASECORRECT_PIN1B_SET_CLEAR):
	SET_BIT(TCCR1A_REG,5);SET_BIT(TCCR1A_REG,4);//Set The Pin1B At Up And Clear At Down
    1b0a:	af e4       	ldi	r26, 0x4F	; 79
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	ef e4       	ldi	r30, 0x4F	; 79
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	80 62       	ori	r24, 0x20	; 32
    1b16:	8c 93       	st	X, r24
    1b18:	af e4       	ldi	r26, 0x4F	; 79
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	ef e4       	ldi	r30, 0x4F	; 79
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	80 61       	ori	r24, 0x10	; 16
    1b24:	8c 93       	st	X, r24
	TIMER1_vidSetComparReg_ChannelB(u16CompareValue);
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <TIMER1_vidSetComparReg_ChannelB>
	CLR_BIT(TCCR1B_REG,2);
	SET_BIT(TCCR1B_REG,1);
	CLR_BIT(TCCR1B_REG,0);

#elif(CLOCK_SELECT == CLK_64_PRESCALER )
	CLR_BIT(TCCR1B_REG,2);
    1b2e:	ae e4       	ldi	r26, 0x4E	; 78
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	ee e4       	ldi	r30, 0x4E	; 78
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	8b 7f       	andi	r24, 0xFB	; 251
    1b3a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,1);
    1b3c:	ae e4       	ldi	r26, 0x4E	; 78
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	ee e4       	ldi	r30, 0x4E	; 78
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	82 60       	ori	r24, 0x02	; 2
    1b48:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,0);
    1b4a:	ae e4       	ldi	r26, 0x4E	; 78
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	ee e4       	ldi	r30, 0x4E	; 78
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	81 60       	ori	r24, 0x01	; 1
    1b56:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,2);
	SET_BIT(TCCR1B_REG,1);
	SET_BIT(TCCR1B_REG,0);

#endif
}
    1b58:	27 96       	adiw	r28, 0x07	; 7
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	de bf       	out	0x3e, r29	; 62
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	cd bf       	out	0x3d, r28	; 61
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <TIMER1_vidDisplayInputCaptureMode>:


void TIMER1_vidDisplayInputCaptureMode(u8 u8EdgeSel)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <TIMER1_vidDisplayInputCaptureMode+0x6>
    1b70:	0f 92       	push	r0
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	89 83       	std	Y+1, r24	; 0x01
	switch (u8EdgeSel)
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	3b 83       	std	Y+3, r19	; 0x03
    1b80:	2a 83       	std	Y+2, r18	; 0x02
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	9b 81       	ldd	r25, Y+3	; 0x03
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	91 05       	cpc	r25, r1
    1b8a:	31 f0       	breq	.+12     	; 0x1b98 <TIMER1_vidDisplayInputCaptureMode+0x2e>
    1b8c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b8e:	3b 81       	ldd	r19, Y+3	; 0x03
    1b90:	22 30       	cpi	r18, 0x02	; 2
    1b92:	31 05       	cpc	r19, r1
    1b94:	49 f0       	breq	.+18     	; 0x1ba8 <TIMER1_vidDisplayInputCaptureMode+0x3e>
    1b96:	0f c0       	rjmp	.+30     	; 0x1bb6 <TIMER1_vidDisplayInputCaptureMode+0x4c>
	{
	case TIMER1_IC_FALLING:CLR_BIT(TCCR1B_REG,6);break;
    1b98:	ae e4       	ldi	r26, 0x4E	; 78
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	ee e4       	ldi	r30, 0x4E	; 78
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8f 7b       	andi	r24, 0xBF	; 191
    1ba4:	8c 93       	st	X, r24
    1ba6:	07 c0       	rjmp	.+14     	; 0x1bb6 <TIMER1_vidDisplayInputCaptureMode+0x4c>
	case TIMER1_IC_RAISING:SET_BIT(TCCR1B_REG,6);break;
    1ba8:	ae e4       	ldi	r26, 0x4E	; 78
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	ee e4       	ldi	r30, 0x4E	; 78
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	80 64       	ori	r24, 0x40	; 64
    1bb4:	8c 93       	st	X, r24
	}
	TIMER1_vidEnableInputCaptureInterrupt();
    1bb6:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <TIMER1_vidEnableInputCaptureInterrupt>
	TIMER1_vidStartTimer_OverFlowMode(0x00);
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <TIMER1_vidStartTimer_OverFlowMode>
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <TIMER1_vidSetInitReg>:


void TIMER1_vidSetInitReg(u16 u16InitVal)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <TIMER1_vidSetInitReg+0x6>
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01
	TCNT1H_REG = (u16InitVal>>8);
    1bdc:	ed e4       	ldi	r30, 0x4D	; 77
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	9a 81       	ldd	r25, Y+2	; 0x02
    1be4:	89 2f       	mov	r24, r25
    1be6:	99 27       	eor	r25, r25
    1be8:	80 83       	st	Z, r24
	TCNT1L_REG = u16InitVal;
    1bea:	ec e4       	ldi	r30, 0x4C	; 76
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	80 83       	st	Z, r24
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	08 95       	ret

00001bfc <TIMER1_vidSetComparReg_ChannelA>:

void TIMER1_vidSetComparReg_ChannelA(u16 u16CompareValue)
{
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <TIMER1_vidSetComparReg_ChannelA+0x6>
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH_REG = (u16CompareValue>>8);
    1c0a:	eb e4       	ldi	r30, 0x4B	; 75
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	9a 81       	ldd	r25, Y+2	; 0x02
    1c12:	89 2f       	mov	r24, r25
    1c14:	99 27       	eor	r25, r25
    1c16:	80 83       	st	Z, r24
	OCR1AL_REG = u16CompareValue;
    1c18:	ea e4       	ldi	r30, 0x4A	; 74
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	80 83       	st	Z, r24
}
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <TIMER1_vidSetInputCaptureReg>:

void TIMER1_vidSetInputCaptureReg(u16 u16InputCapture)
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <TIMER1_vidSetInputCaptureReg+0x6>
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	9a 83       	std	Y+2, r25	; 0x02
    1c36:	89 83       	std	Y+1, r24	; 0x01
	ICR1H_REG = (u16InputCapture>>8);
    1c38:	e7 e4       	ldi	r30, 0x47	; 71
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c40:	89 2f       	mov	r24, r25
    1c42:	99 27       	eor	r25, r25
    1c44:	80 83       	st	Z, r24
	ICR1L_REG = u16InputCapture;
    1c46:	e6 e4       	ldi	r30, 0x46	; 70
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	80 83       	st	Z, r24
}
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <TIMER1_vidSetComparReg_ChannelB>:

void TIMER1_vidSetComparReg_ChannelB(u16 u16CompareValue)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <TIMER1_vidSetComparReg_ChannelB+0x6>
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	9a 83       	std	Y+2, r25	; 0x02
    1c64:	89 83       	std	Y+1, r24	; 0x01
	OCR1BH_REG = (u8)(u16CompareValue>>8);
    1c66:	e9 e4       	ldi	r30, 0x49	; 73
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6e:	89 2f       	mov	r24, r25
    1c70:	99 27       	eor	r25, r25
    1c72:	80 83       	st	Z, r24
	OCR1BL_REG = (u8)u16CompareValue;
    1c74:	e8 e4       	ldi	r30, 0x48	; 72
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	80 83       	st	Z, r24
}
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <TIMER1_u16GetCounterReg>:


u16 TIMER1_u16GetCounterReg(void)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
	return(((u16)TCNT1L_REG)|(((u16)TCNT1H_REG)<<8));
    1c8e:	ec e4       	ldi	r30, 0x4C	; 76
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	ed e4       	ldi	r30, 0x4D	; 77
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	88 2f       	mov	r24, r24
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	98 2f       	mov	r25, r24
    1ca4:	88 27       	eor	r24, r24
    1ca6:	82 2b       	or	r24, r18
    1ca8:	93 2b       	or	r25, r19
}
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <TIMER1_u16GetComparReg_ChannelA>:

u16 TIMER1_u16GetComparReg_ChannelA(void)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
	return(((u16)OCR1AL_REG)|(((u16)OCR1AH_REG)<<8));
    1cb8:	ea e4       	ldi	r30, 0x4A	; 74
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	eb e4       	ldi	r30, 0x4B	; 75
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	88 2f       	mov	r24, r24
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	98 2f       	mov	r25, r24
    1cce:	88 27       	eor	r24, r24
    1cd0:	82 2b       	or	r24, r18
    1cd2:	93 2b       	or	r25, r19
}
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <TIMER1_u16GetComparReg_ChannelB>:

u16 TIMER1_u16GetComparReg_ChannelB(void)
{
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
	return(((u16)OCR1BL_REG)|(((u16)OCR1BH_REG)<<8));
    1ce2:	e8 e4       	ldi	r30, 0x48	; 72
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	e9 e4       	ldi	r30, 0x49	; 73
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	98 2f       	mov	r25, r24
    1cf8:	88 27       	eor	r24, r24
    1cfa:	82 2b       	or	r24, r18
    1cfc:	93 2b       	or	r25, r19
}
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <TIMER1_u16GetInputCaptureReg>:

u16 TIMER1_u16GetInputCaptureReg(void)
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
	return(((u16)ICR1L_REG)|(((u16)ICR1H_REG)<<8));
    1d0c:	e6 e4       	ldi	r30, 0x46	; 70
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	e7 e4       	ldi	r30, 0x47	; 71
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	88 2f       	mov	r24, r24
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	98 2f       	mov	r25, r24
    1d22:	88 27       	eor	r24, r24
    1d24:	82 2b       	or	r24, r18
    1d26:	93 2b       	or	r25, r19
}
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <TIMER1_vidEnableOverFlowInterrupt>:


void TIMER1_vidEnableOverFlowInterrupt(void)
{	SET_BIT(SR_REG,7);  	//Global Interrupt
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	af e5       	ldi	r26, 0x5F	; 95
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	ef e5       	ldi	r30, 0x5F	; 95
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	80 68       	ori	r24, 0x80	; 128
    1d42:	8c 93       	st	X, r24

	SET_BIT(TIMSK_REG,2);
    1d44:	a9 e5       	ldi	r26, 0x59	; 89
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e9 e5       	ldi	r30, 0x59	; 89
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	84 60       	ori	r24, 0x04	; 4
    1d50:	8c 93       	st	X, r24
}
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <TIMER1_vidEnableCompareMatchInterrupt_ChannelA>:

void TIMER1_vidEnableCompareMatchInterrupt_ChannelA(void)
{	SET_BIT(SR_REG,7);  	//Global Interrupt
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	af e5       	ldi	r26, 0x5F	; 95
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	ef e5       	ldi	r30, 0x5F	; 95
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	80 68       	ori	r24, 0x80	; 128
    1d6c:	8c 93       	st	X, r24

	SET_BIT(TIMSK_REG,4);
    1d6e:	a9 e5       	ldi	r26, 0x59	; 89
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e9 e5       	ldi	r30, 0x59	; 89
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	80 61       	ori	r24, 0x10	; 16
    1d7a:	8c 93       	st	X, r24
}
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <TIMER1_vidEnableCompareMatchInterrupt_ChannelB>:

void TIMER1_vidEnableCompareMatchInterrupt_ChannelB(void)
{	SET_BIT(SR_REG,7);  	//Global Interrupt
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	af e5       	ldi	r26, 0x5F	; 95
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	ef e5       	ldi	r30, 0x5F	; 95
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	80 68       	ori	r24, 0x80	; 128
    1d96:	8c 93       	st	X, r24

	SET_BIT(TIMSK_REG,3);
    1d98:	a9 e5       	ldi	r26, 0x59	; 89
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e9 e5       	ldi	r30, 0x59	; 89
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	88 60       	ori	r24, 0x08	; 8
    1da4:	8c 93       	st	X, r24
}
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <TIMER1_vidEnableInputCaptureInterrupt>:

void TIMER1_vidEnableInputCaptureInterrupt(void)
{	SET_BIT(SR_REG,7);  	//Global Interrupt
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	af e5       	ldi	r26, 0x5F	; 95
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	ef e5       	ldi	r30, 0x5F	; 95
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	80 68       	ori	r24, 0x80	; 128
    1dc0:	8c 93       	st	X, r24

	SET_BIT(TIMSK_REG,5);
    1dc2:	a9 e5       	ldi	r26, 0x59	; 89
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e9 e5       	ldi	r30, 0x59	; 89
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	80 62       	ori	r24, 0x20	; 32
    1dce:	8c 93       	st	X, r24
}
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <TIMER1_vidDisableOverFlowInterrupt>:

void TIMER1_vidDisableOverFlowInterrupt(void)
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,2);
    1dde:	a9 e5       	ldi	r26, 0x59	; 89
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e9 e5       	ldi	r30, 0x59	; 89
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	8b 7f       	andi	r24, 0xFB	; 251
    1dea:	8c 93       	st	X, r24
}
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <TIMER1_vidDisableCompareMatchInterrupt_ChannelA>:

void TIMER1_vidDisableCompareMatchInterrupt_ChannelA(void)
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,4);
    1dfa:	a9 e5       	ldi	r26, 0x59	; 89
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e9 e5       	ldi	r30, 0x59	; 89
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	8f 7e       	andi	r24, 0xEF	; 239
    1e06:	8c 93       	st	X, r24
}
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <TIMER1_vidDisableCompareMatchInterrupt_ChannelB>:

void TIMER1_vidDisableCompareMatchInterrupt_ChannelB(void)
{
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,3);
    1e16:	a9 e5       	ldi	r26, 0x59	; 89
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e9 e5       	ldi	r30, 0x59	; 89
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	87 7f       	andi	r24, 0xF7	; 247
    1e22:	8c 93       	st	X, r24
}
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <TIMER1_vidDisableInputCaptureInterrupt>:


void TIMER1_vidDisableInputCaptureInterrupt(void)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,5);
    1e32:	a9 e5       	ldi	r26, 0x59	; 89
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e9 e5       	ldi	r30, 0x59	; 89
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	80 62       	ori	r24, 0x20	; 32
    1e3e:	8c 93       	st	X, r24
}
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <TIMER1_vidStopTimer>:


void TIMER1_vidStopTimer(void)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B_REG,2);
    1e4e:	ae e4       	ldi	r26, 0x4E	; 78
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	ee e4       	ldi	r30, 0x4E	; 78
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	8b 7f       	andi	r24, 0xFB	; 251
    1e5a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,1);
    1e5c:	ae e4       	ldi	r26, 0x4E	; 78
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	ee e4       	ldi	r30, 0x4E	; 78
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	8d 7f       	andi	r24, 0xFD	; 253
    1e68:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,0);
    1e6a:	ae e4       	ldi	r26, 0x4E	; 78
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	ee e4       	ldi	r30, 0x4E	; 78
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	8e 7f       	andi	r24, 0xFE	; 254
    1e76:	8c 93       	st	X, r24
}
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <__vector_9>:


void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
    1e7e:	1f 92       	push	r1
    1e80:	0f 92       	push	r0
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	0f 92       	push	r0
    1e86:	11 24       	eor	r1, r1
    1e88:	2f 93       	push	r18
    1e8a:	3f 93       	push	r19
    1e8c:	4f 93       	push	r20
    1e8e:	5f 93       	push	r21
    1e90:	6f 93       	push	r22
    1e92:	7f 93       	push	r23
    1e94:	8f 93       	push	r24
    1e96:	9f 93       	push	r25
    1e98:	af 93       	push	r26
    1e9a:	bf 93       	push	r27
    1e9c:	ef 93       	push	r30
    1e9e:	ff 93       	push	r31
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
	Timer1_OF_Call_Back();
    1ea8:	e0 91 89 00 	lds	r30, 0x0089
    1eac:	f0 91 8a 00 	lds	r31, 0x008A
    1eb0:	09 95       	icall
}
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	ff 91       	pop	r31
    1eb8:	ef 91       	pop	r30
    1eba:	bf 91       	pop	r27
    1ebc:	af 91       	pop	r26
    1ebe:	9f 91       	pop	r25
    1ec0:	8f 91       	pop	r24
    1ec2:	7f 91       	pop	r23
    1ec4:	6f 91       	pop	r22
    1ec6:	5f 91       	pop	r21
    1ec8:	4f 91       	pop	r20
    1eca:	3f 91       	pop	r19
    1ecc:	2f 91       	pop	r18
    1ece:	0f 90       	pop	r0
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	0f 90       	pop	r0
    1ed4:	1f 90       	pop	r1
    1ed6:	18 95       	reti

00001ed8 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
    1ed8:	1f 92       	push	r1
    1eda:	0f 92       	push	r0
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	0f 92       	push	r0
    1ee0:	11 24       	eor	r1, r1
    1ee2:	2f 93       	push	r18
    1ee4:	3f 93       	push	r19
    1ee6:	4f 93       	push	r20
    1ee8:	5f 93       	push	r21
    1eea:	6f 93       	push	r22
    1eec:	7f 93       	push	r23
    1eee:	8f 93       	push	r24
    1ef0:	9f 93       	push	r25
    1ef2:	af 93       	push	r26
    1ef4:	bf 93       	push	r27
    1ef6:	ef 93       	push	r30
    1ef8:	ff 93       	push	r31
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
	Timer1_CTC_A_Call_Back();
    1f02:	e0 91 83 00 	lds	r30, 0x0083
    1f06:	f0 91 84 00 	lds	r31, 0x0084
    1f0a:	09 95       	icall
}
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	ff 91       	pop	r31
    1f12:	ef 91       	pop	r30
    1f14:	bf 91       	pop	r27
    1f16:	af 91       	pop	r26
    1f18:	9f 91       	pop	r25
    1f1a:	8f 91       	pop	r24
    1f1c:	7f 91       	pop	r23
    1f1e:	6f 91       	pop	r22
    1f20:	5f 91       	pop	r21
    1f22:	4f 91       	pop	r20
    1f24:	3f 91       	pop	r19
    1f26:	2f 91       	pop	r18
    1f28:	0f 90       	pop	r0
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	0f 90       	pop	r0
    1f2e:	1f 90       	pop	r1
    1f30:	18 95       	reti

00001f32 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
    1f32:	1f 92       	push	r1
    1f34:	0f 92       	push	r0
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	0f 92       	push	r0
    1f3a:	11 24       	eor	r1, r1
    1f3c:	2f 93       	push	r18
    1f3e:	3f 93       	push	r19
    1f40:	4f 93       	push	r20
    1f42:	5f 93       	push	r21
    1f44:	6f 93       	push	r22
    1f46:	7f 93       	push	r23
    1f48:	8f 93       	push	r24
    1f4a:	9f 93       	push	r25
    1f4c:	af 93       	push	r26
    1f4e:	bf 93       	push	r27
    1f50:	ef 93       	push	r30
    1f52:	ff 93       	push	r31
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
	Timer1_CTC_B_Call_Back();
    1f5c:	e0 91 85 00 	lds	r30, 0x0085
    1f60:	f0 91 86 00 	lds	r31, 0x0086
    1f64:	09 95       	icall
}
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	ff 91       	pop	r31
    1f6c:	ef 91       	pop	r30
    1f6e:	bf 91       	pop	r27
    1f70:	af 91       	pop	r26
    1f72:	9f 91       	pop	r25
    1f74:	8f 91       	pop	r24
    1f76:	7f 91       	pop	r23
    1f78:	6f 91       	pop	r22
    1f7a:	5f 91       	pop	r21
    1f7c:	4f 91       	pop	r20
    1f7e:	3f 91       	pop	r19
    1f80:	2f 91       	pop	r18
    1f82:	0f 90       	pop	r0
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	0f 90       	pop	r0
    1f88:	1f 90       	pop	r1
    1f8a:	18 95       	reti

00001f8c <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    1f8c:	1f 92       	push	r1
    1f8e:	0f 92       	push	r0
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	0f 92       	push	r0
    1f94:	11 24       	eor	r1, r1
    1f96:	2f 93       	push	r18
    1f98:	3f 93       	push	r19
    1f9a:	4f 93       	push	r20
    1f9c:	5f 93       	push	r21
    1f9e:	6f 93       	push	r22
    1fa0:	7f 93       	push	r23
    1fa2:	8f 93       	push	r24
    1fa4:	9f 93       	push	r25
    1fa6:	af 93       	push	r26
    1fa8:	bf 93       	push	r27
    1faa:	ef 93       	push	r30
    1fac:	ff 93       	push	r31
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
	Timer1_IC_Call_Back();
    1fb6:	e0 91 87 00 	lds	r30, 0x0087
    1fba:	f0 91 88 00 	lds	r31, 0x0088
    1fbe:	09 95       	icall
}
    1fc0:	cf 91       	pop	r28
    1fc2:	df 91       	pop	r29
    1fc4:	ff 91       	pop	r31
    1fc6:	ef 91       	pop	r30
    1fc8:	bf 91       	pop	r27
    1fca:	af 91       	pop	r26
    1fcc:	9f 91       	pop	r25
    1fce:	8f 91       	pop	r24
    1fd0:	7f 91       	pop	r23
    1fd2:	6f 91       	pop	r22
    1fd4:	5f 91       	pop	r21
    1fd6:	4f 91       	pop	r20
    1fd8:	3f 91       	pop	r19
    1fda:	2f 91       	pop	r18
    1fdc:	0f 90       	pop	r0
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	0f 90       	pop	r0
    1fe2:	1f 90       	pop	r1
    1fe4:	18 95       	reti

00001fe6 <TIMER0_vidInit>:




void TIMER0_vidInit()
{
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
#if(TIMER0_MODE == NORMAL_MODE0 )
	CLR_BIT(TCCR0_REG,3);
    1fee:	a3 e5       	ldi	r26, 0x53	; 83
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e3 e5       	ldi	r30, 0x53	; 83
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	87 7f       	andi	r24, 0xF7	; 247
    1ffa:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,6);
    1ffc:	a3 e5       	ldi	r26, 0x53	; 83
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e3 e5       	ldi	r30, 0x53	; 83
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	8f 7b       	andi	r24, 0xBF	; 191
    2008:	8c 93       	st	X, r24

#elif(TIMER0_MODE == FASTPWM_MODE0 )
	SET_BIT(TCCR0_REG,3);
	SET_BIT(TCCR0_REG,6);
#endif
}
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <TIMER0_vidStartTimer_OverFlowMode>:


void TIMER0_vidStartTimer_OverFlowMode(u8 u8InitVal)
{
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	0f 92       	push	r0
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	89 83       	std	Y+1, r24	; 0x01
/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER0_vidSetInitReg(u8InitVal);
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	0e 94 02 13 	call	0x2604	; 0x2604 <TIMER0_vidSetInitReg>

/**********************************************/
/**************Enable Interrupt ***************/
/**********************************************/
SET_BIT(SR_REG,7);  	//Global Interrupt
    2022:	af e5       	ldi	r26, 0x5F	; 95
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	ef e5       	ldi	r30, 0x5F	; 95
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	80 68       	ori	r24, 0x80	; 128
    202e:	8c 93       	st	X, r24
SET_BIT(TIMSK_REG,0);	//Over Flow Interrupt For Timer 0
    2030:	a9 e5       	ldi	r26, 0x59	; 89
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	e9 e5       	ldi	r30, 0x59	; 89
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	81 60       	ori	r24, 0x01	; 1
    203c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,2);
	CLR_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#elif(CLOCK_SELECT == CLK_8_PRESCALER )
	CLR_BIT(TCCR0_REG,2);
    203e:	a3 e5       	ldi	r26, 0x53	; 83
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e3 e5       	ldi	r30, 0x53	; 83
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	8b 7f       	andi	r24, 0xFB	; 251
    204a:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,1);
    204c:	a3 e5       	ldi	r26, 0x53	; 83
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e3 e5       	ldi	r30, 0x53	; 83
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	82 60       	ori	r24, 0x02	; 2
    2058:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,0);
    205a:	a3 e5       	ldi	r26, 0x53	; 83
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e3 e5       	ldi	r30, 0x53	; 83
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	8e 7f       	andi	r24, 0xFE	; 254
    2066:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,2);
	SET_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#endif
}
    2068:	0f 90       	pop	r0
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	08 95       	ret

00002070 <TIMER0_vidStartTimer_CTCMode>:



void TIMER0_vidStartTimer_CTCMode(u8 u8InitVal , u8 u8CompareValue,u8 u8CTCMode)
{
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	00 d0       	rcall	.+0      	; 0x2076 <TIMER0_vidStartTimer_CTCMode+0x6>
    2076:	00 d0       	rcall	.+0      	; 0x2078 <TIMER0_vidStartTimer_CTCMode+0x8>
    2078:	0f 92       	push	r0
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	6a 83       	std	Y+2, r22	; 0x02
    2082:	4b 83       	std	Y+3, r20	; 0x03
/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER0_vidSetInitReg(u8InitVal);
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	0e 94 02 13 	call	0x2604	; 0x2604 <TIMER0_vidSetInitReg>

/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER0_vidSetComparReg(u8CompareValue);
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	0e 94 10 13 	call	0x2620	; 0x2620 <TIMER0_vidSetComparReg>

/**********************************************/
/**************Enable Interrupt ***************/
/**********************************************/

switch(u8CTCMode)
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	28 2f       	mov	r18, r24
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	3d 83       	std	Y+5, r19	; 0x05
    2098:	2c 83       	std	Y+4, r18	; 0x04
    209a:	8c 81       	ldd	r24, Y+4	; 0x04
    209c:	9d 81       	ldd	r25, Y+5	; 0x05
    209e:	83 30       	cpi	r24, 0x03	; 3
    20a0:	91 05       	cpc	r25, r1
    20a2:	09 f4       	brne	.+2      	; 0x20a6 <TIMER0_vidStartTimer_CTCMode+0x36>
    20a4:	63 c0       	rjmp	.+198    	; 0x216c <TIMER0_vidStartTimer_CTCMode+0xfc>
    20a6:	2c 81       	ldd	r18, Y+4	; 0x04
    20a8:	3d 81       	ldd	r19, Y+5	; 0x05
    20aa:	24 30       	cpi	r18, 0x04	; 4
    20ac:	31 05       	cpc	r19, r1
    20ae:	84 f4       	brge	.+32     	; 0x20d0 <TIMER0_vidStartTimer_CTCMode+0x60>
    20b0:	8c 81       	ldd	r24, Y+4	; 0x04
    20b2:	9d 81       	ldd	r25, Y+5	; 0x05
    20b4:	81 30       	cpi	r24, 0x01	; 1
    20b6:	91 05       	cpc	r25, r1
    20b8:	d9 f1       	breq	.+118    	; 0x2130 <TIMER0_vidStartTimer_CTCMode+0xc0>
    20ba:	2c 81       	ldd	r18, Y+4	; 0x04
    20bc:	3d 81       	ldd	r19, Y+5	; 0x05
    20be:	22 30       	cpi	r18, 0x02	; 2
    20c0:	31 05       	cpc	r19, r1
    20c2:	0c f0       	brlt	.+2      	; 0x20c6 <TIMER0_vidStartTimer_CTCMode+0x56>
    20c4:	44 c0       	rjmp	.+136    	; 0x214e <TIMER0_vidStartTimer_CTCMode+0xde>
    20c6:	8c 81       	ldd	r24, Y+4	; 0x04
    20c8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	a1 f0       	breq	.+40     	; 0x20f6 <TIMER0_vidStartTimer_CTCMode+0x86>
    20ce:	b3 c0       	rjmp	.+358    	; 0x2236 <TIMER0_vidStartTimer_CTCMode+0x1c6>
    20d0:	2c 81       	ldd	r18, Y+4	; 0x04
    20d2:	3d 81       	ldd	r19, Y+5	; 0x05
    20d4:	25 30       	cpi	r18, 0x05	; 5
    20d6:	31 05       	cpc	r19, r1
    20d8:	09 f4       	brne	.+2      	; 0x20dc <TIMER0_vidStartTimer_CTCMode+0x6c>
    20da:	74 c0       	rjmp	.+232    	; 0x21c4 <TIMER0_vidStartTimer_CTCMode+0x154>
    20dc:	8c 81       	ldd	r24, Y+4	; 0x04
    20de:	9d 81       	ldd	r25, Y+5	; 0x05
    20e0:	85 30       	cpi	r24, 0x05	; 5
    20e2:	91 05       	cpc	r25, r1
    20e4:	0c f4       	brge	.+2      	; 0x20e8 <TIMER0_vidStartTimer_CTCMode+0x78>
    20e6:	51 c0       	rjmp	.+162    	; 0x218a <TIMER0_vidStartTimer_CTCMode+0x11a>
    20e8:	2c 81       	ldd	r18, Y+4	; 0x04
    20ea:	3d 81       	ldd	r19, Y+5	; 0x05
    20ec:	26 30       	cpi	r18, 0x06	; 6
    20ee:	31 05       	cpc	r19, r1
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <TIMER0_vidStartTimer_CTCMode+0x84>
    20f2:	85 c0       	rjmp	.+266    	; 0x21fe <TIMER0_vidStartTimer_CTCMode+0x18e>
    20f4:	a0 c0       	rjmp	.+320    	; 0x2236 <TIMER0_vidStartTimer_CTCMode+0x1c6>
{
case (TIMER0_CTC_CM_INTRUPT):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    20f6:	af e5       	ldi	r26, 0x5F	; 95
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	ef e5       	ldi	r30, 0x5F	; 95
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	80 68       	ori	r24, 0x80	; 128
    2102:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    2104:	a9 e5       	ldi	r26, 0x59	; 89
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e9 e5       	ldi	r30, 0x59	; 89
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	82 60       	ori	r24, 0x02	; 2
    2110:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Disable The Pin Mode
    2112:	a3 e5       	ldi	r26, 0x53	; 83
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e3 e5       	ldi	r30, 0x53	; 83
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	8f 7d       	andi	r24, 0xDF	; 223
    211e:	8c 93       	st	X, r24
    2120:	a3 e5       	ldi	r26, 0x53	; 83
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e3 e5       	ldi	r30, 0x53	; 83
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	8f 7e       	andi	r24, 0xEF	; 239
    212c:	8c 93       	st	X, r24
    212e:	83 c0       	rjmp	.+262    	; 0x2236 <TIMER0_vidStartTimer_CTCMode+0x1c6>
	break;

case (TIMER0_CTC_PINS_TOGGLE):
	CLR_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//Toggle The Pin(OC0) on compare match
    2130:	a3 e5       	ldi	r26, 0x53	; 83
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e3 e5       	ldi	r30, 0x53	; 83
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	8f 7d       	andi	r24, 0xDF	; 223
    213c:	8c 93       	st	X, r24
    213e:	a3 e5       	ldi	r26, 0x53	; 83
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e3 e5       	ldi	r30, 0x53	; 83
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	80 61       	ori	r24, 0x10	; 16
    214a:	8c 93       	st	X, r24
    214c:	74 c0       	rjmp	.+232    	; 0x2236 <TIMER0_vidStartTimer_CTCMode+0x1c6>
	break;

case (TIMER0_CTC_PINS_CLEAR):
	SET_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Clear The Pin(OC0) on compare match
    214e:	a3 e5       	ldi	r26, 0x53	; 83
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e3 e5       	ldi	r30, 0x53	; 83
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	80 62       	ori	r24, 0x20	; 32
    215a:	8c 93       	st	X, r24
    215c:	a3 e5       	ldi	r26, 0x53	; 83
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e3 e5       	ldi	r30, 0x53	; 83
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	8f 7e       	andi	r24, 0xEF	; 239
    2168:	8c 93       	st	X, r24
    216a:	65 c0       	rjmp	.+202    	; 0x2236 <TIMER0_vidStartTimer_CTCMode+0x1c6>
	break;

case (TIMER0_CTC_PINS_SET):
	SET_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//SET The Pin(OC0) on compare match
    216c:	a3 e5       	ldi	r26, 0x53	; 83
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e3 e5       	ldi	r30, 0x53	; 83
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	80 62       	ori	r24, 0x20	; 32
    2178:	8c 93       	st	X, r24
    217a:	a3 e5       	ldi	r26, 0x53	; 83
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e3 e5       	ldi	r30, 0x53	; 83
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	80 61       	ori	r24, 0x10	; 16
    2186:	8c 93       	st	X, r24
    2188:	56 c0       	rjmp	.+172    	; 0x2236 <TIMER0_vidStartTimer_CTCMode+0x1c6>
	break;

case (TIMER0_CTC_CM_INTRUPT_PINS_TOGGLE):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    218a:	af e5       	ldi	r26, 0x5F	; 95
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	ef e5       	ldi	r30, 0x5F	; 95
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	80 68       	ori	r24, 0x80	; 128
    2196:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    2198:	a9 e5       	ldi	r26, 0x59	; 89
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e9 e5       	ldi	r30, 0x59	; 89
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	82 60       	ori	r24, 0x02	; 2
    21a4:	8c 93       	st	X, r24

	CLR_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//Toggle The Pin(OC0) on compare match
    21a6:	a3 e5       	ldi	r26, 0x53	; 83
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e3 e5       	ldi	r30, 0x53	; 83
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	8f 7d       	andi	r24, 0xDF	; 223
    21b2:	8c 93       	st	X, r24
    21b4:	a3 e5       	ldi	r26, 0x53	; 83
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e3 e5       	ldi	r30, 0x53	; 83
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	80 61       	ori	r24, 0x10	; 16
    21c0:	8c 93       	st	X, r24
    21c2:	39 c0       	rjmp	.+114    	; 0x2236 <TIMER0_vidStartTimer_CTCMode+0x1c6>
	break;

case (TIMER0_CTC_CM_INTRUPT_PINS_CLEAR):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    21c4:	af e5       	ldi	r26, 0x5F	; 95
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	ef e5       	ldi	r30, 0x5F	; 95
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	80 68       	ori	r24, 0x80	; 128
    21d0:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    21d2:	a9 e5       	ldi	r26, 0x59	; 89
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e9 e5       	ldi	r30, 0x59	; 89
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	82 60       	ori	r24, 0x02	; 2
    21de:	8c 93       	st	X, r24

	SET_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Clear The Pin(OC0) on compare match
    21e0:	a3 e5       	ldi	r26, 0x53	; 83
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e3 e5       	ldi	r30, 0x53	; 83
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	80 62       	ori	r24, 0x20	; 32
    21ec:	8c 93       	st	X, r24
    21ee:	a3 e5       	ldi	r26, 0x53	; 83
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	e3 e5       	ldi	r30, 0x53	; 83
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	8f 7e       	andi	r24, 0xEF	; 239
    21fa:	8c 93       	st	X, r24
    21fc:	1c c0       	rjmp	.+56     	; 0x2236 <TIMER0_vidStartTimer_CTCMode+0x1c6>
	break;

case (TIMER0_CTC_CM_INTRUPT_PINS_SET):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    21fe:	af e5       	ldi	r26, 0x5F	; 95
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	ef e5       	ldi	r30, 0x5F	; 95
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	80 68       	ori	r24, 0x80	; 128
    220a:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    220c:	a9 e5       	ldi	r26, 0x59	; 89
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e9 e5       	ldi	r30, 0x59	; 89
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	82 60       	ori	r24, 0x02	; 2
    2218:	8c 93       	st	X, r24

	SET_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//SET The Pin(OC0) on compare match
    221a:	a3 e5       	ldi	r26, 0x53	; 83
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e3 e5       	ldi	r30, 0x53	; 83
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	80 62       	ori	r24, 0x20	; 32
    2226:	8c 93       	st	X, r24
    2228:	a3 e5       	ldi	r26, 0x53	; 83
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e3 e5       	ldi	r30, 0x53	; 83
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	80 61       	ori	r24, 0x10	; 16
    2234:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,2);
	CLR_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#elif(CLOCK_SELECT == CLK_8_PRESCALER )
	CLR_BIT(TCCR0_REG,2);
    2236:	a3 e5       	ldi	r26, 0x53	; 83
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e3 e5       	ldi	r30, 0x53	; 83
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	8b 7f       	andi	r24, 0xFB	; 251
    2242:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,1);
    2244:	a3 e5       	ldi	r26, 0x53	; 83
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e3 e5       	ldi	r30, 0x53	; 83
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	82 60       	ori	r24, 0x02	; 2
    2250:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,0);
    2252:	a3 e5       	ldi	r26, 0x53	; 83
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	e3 e5       	ldi	r30, 0x53	; 83
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	8e 7f       	andi	r24, 0xFE	; 254
    225e:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,2);
	SET_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#endif
}
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <TIMER0_vidStartTimer_PWMMode>:




void TIMER0_vidStartTimer_PWMMode(u8 u8InitVal , u8 u8CompareValue,u8 u8PWMMode)
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	00 d0       	rcall	.+0      	; 0x2276 <TIMER0_vidStartTimer_PWMMode+0x6>
    2276:	00 d0       	rcall	.+0      	; 0x2278 <TIMER0_vidStartTimer_PWMMode+0x8>
    2278:	0f 92       	push	r0
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	89 83       	std	Y+1, r24	; 0x01
    2280:	6a 83       	std	Y+2, r22	; 0x02
    2282:	4b 83       	std	Y+3, r20	; 0x03
/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER0_vidSetInitReg(u8InitVal);
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	0e 94 02 13 	call	0x2604	; 0x2604 <TIMER0_vidSetInitReg>

/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER0_vidSetComparReg(u8CompareValue);
    228a:	8a 81       	ldd	r24, Y+2	; 0x02
    228c:	0e 94 10 13 	call	0x2620	; 0x2620 <TIMER0_vidSetComparReg>

/**********************************************/
/**************Enable Interrupt ***************/
/**********************************************/

switch(u8PWMMode)
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	3d 83       	std	Y+5, r19	; 0x05
    2298:	2c 83       	std	Y+4, r18	; 0x04
    229a:	8c 81       	ldd	r24, Y+4	; 0x04
    229c:	9d 81       	ldd	r25, Y+5	; 0x05
    229e:	84 30       	cpi	r24, 0x04	; 4
    22a0:	91 05       	cpc	r25, r1
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <TIMER0_vidStartTimer_PWMMode+0x36>
    22a4:	9a c0       	rjmp	.+308    	; 0x23da <TIMER0_vidStartTimer_PWMMode+0x16a>
    22a6:	2c 81       	ldd	r18, Y+4	; 0x04
    22a8:	3d 81       	ldd	r19, Y+5	; 0x05
    22aa:	25 30       	cpi	r18, 0x05	; 5
    22ac:	31 05       	cpc	r19, r1
    22ae:	ec f4       	brge	.+58     	; 0x22ea <TIMER0_vidStartTimer_PWMMode+0x7a>
    22b0:	8c 81       	ldd	r24, Y+4	; 0x04
    22b2:	9d 81       	ldd	r25, Y+5	; 0x05
    22b4:	81 30       	cpi	r24, 0x01	; 1
    22b6:	91 05       	cpc	r25, r1
    22b8:	09 f4       	brne	.+2      	; 0x22bc <TIMER0_vidStartTimer_PWMMode+0x4c>
    22ba:	54 c0       	rjmp	.+168    	; 0x2364 <TIMER0_vidStartTimer_PWMMode+0xf4>
    22bc:	2c 81       	ldd	r18, Y+4	; 0x04
    22be:	3d 81       	ldd	r19, Y+5	; 0x05
    22c0:	22 30       	cpi	r18, 0x02	; 2
    22c2:	31 05       	cpc	r19, r1
    22c4:	2c f4       	brge	.+10     	; 0x22d0 <TIMER0_vidStartTimer_PWMMode+0x60>
    22c6:	8c 81       	ldd	r24, Y+4	; 0x04
    22c8:	9d 81       	ldd	r25, Y+5	; 0x05
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	39 f1       	breq	.+78     	; 0x231c <TIMER0_vidStartTimer_PWMMode+0xac>
    22ce:	23 c1       	rjmp	.+582    	; 0x2516 <TIMER0_vidStartTimer_PWMMode+0x2a6>
    22d0:	2c 81       	ldd	r18, Y+4	; 0x04
    22d2:	3d 81       	ldd	r19, Y+5	; 0x05
    22d4:	22 30       	cpi	r18, 0x02	; 2
    22d6:	31 05       	cpc	r19, r1
    22d8:	09 f4       	brne	.+2      	; 0x22dc <TIMER0_vidStartTimer_PWMMode+0x6c>
    22da:	53 c0       	rjmp	.+166    	; 0x2382 <TIMER0_vidStartTimer_PWMMode+0x112>
    22dc:	8c 81       	ldd	r24, Y+4	; 0x04
    22de:	9d 81       	ldd	r25, Y+5	; 0x05
    22e0:	83 30       	cpi	r24, 0x03	; 3
    22e2:	91 05       	cpc	r25, r1
    22e4:	09 f4       	brne	.+2      	; 0x22e8 <TIMER0_vidStartTimer_PWMMode+0x78>
    22e6:	5c c0       	rjmp	.+184    	; 0x23a0 <TIMER0_vidStartTimer_PWMMode+0x130>
    22e8:	16 c1       	rjmp	.+556    	; 0x2516 <TIMER0_vidStartTimer_PWMMode+0x2a6>
    22ea:	2c 81       	ldd	r18, Y+4	; 0x04
    22ec:	3d 81       	ldd	r19, Y+5	; 0x05
    22ee:	26 30       	cpi	r18, 0x06	; 6
    22f0:	31 05       	cpc	r19, r1
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <TIMER0_vidStartTimer_PWMMode+0x86>
    22f4:	ac c0       	rjmp	.+344    	; 0x244e <TIMER0_vidStartTimer_PWMMode+0x1de>
    22f6:	8c 81       	ldd	r24, Y+4	; 0x04
    22f8:	9d 81       	ldd	r25, Y+5	; 0x05
    22fa:	86 30       	cpi	r24, 0x06	; 6
    22fc:	91 05       	cpc	r25, r1
    22fe:	0c f4       	brge	.+2      	; 0x2302 <TIMER0_vidStartTimer_PWMMode+0x92>
    2300:	89 c0       	rjmp	.+274    	; 0x2414 <TIMER0_vidStartTimer_PWMMode+0x1a4>
    2302:	2c 81       	ldd	r18, Y+4	; 0x04
    2304:	3d 81       	ldd	r19, Y+5	; 0x05
    2306:	27 30       	cpi	r18, 0x07	; 7
    2308:	31 05       	cpc	r19, r1
    230a:	09 f4       	brne	.+2      	; 0x230e <TIMER0_vidStartTimer_PWMMode+0x9e>
    230c:	bd c0       	rjmp	.+378    	; 0x2488 <TIMER0_vidStartTimer_PWMMode+0x218>
    230e:	8c 81       	ldd	r24, Y+4	; 0x04
    2310:	9d 81       	ldd	r25, Y+5	; 0x05
    2312:	88 30       	cpi	r24, 0x08	; 8
    2314:	91 05       	cpc	r25, r1
    2316:	09 f4       	brne	.+2      	; 0x231a <TIMER0_vidStartTimer_PWMMode+0xaa>
    2318:	db c0       	rjmp	.+438    	; 0x24d0 <TIMER0_vidStartTimer_PWMMode+0x260>
    231a:	fd c0       	rjmp	.+506    	; 0x2516 <TIMER0_vidStartTimer_PWMMode+0x2a6>
{
case (TIMER0_PWM_OF_CM_INTRUPTS_ONLY):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    231c:	af e5       	ldi	r26, 0x5F	; 95
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	ef e5       	ldi	r30, 0x5F	; 95
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	80 68       	ori	r24, 0x80	; 128
    2328:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    232a:	a9 e5       	ldi	r26, 0x59	; 89
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e9 e5       	ldi	r30, 0x59	; 89
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	82 60       	ori	r24, 0x02	; 2
    2336:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,0);	//Over Flow Interrupt For Timer 0
    2338:	a9 e5       	ldi	r26, 0x59	; 89
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e9 e5       	ldi	r30, 0x59	; 89
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	81 60       	ori	r24, 0x01	; 1
    2344:	8c 93       	st	X, r24

	CLR_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Disable The Pin Mode
    2346:	a3 e5       	ldi	r26, 0x53	; 83
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e3 e5       	ldi	r30, 0x53	; 83
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	8f 7d       	andi	r24, 0xDF	; 223
    2352:	8c 93       	st	X, r24
    2354:	a3 e5       	ldi	r26, 0x53	; 83
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e3 e5       	ldi	r30, 0x53	; 83
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	8f 7e       	andi	r24, 0xEF	; 239
    2360:	8c 93       	st	X, r24
    2362:	d9 c0       	rjmp	.+434    	; 0x2516 <TIMER0_vidStartTimer_PWMMode+0x2a6>
	break;

case (TIMER0_PWM_PIN_CLEAR_SET):
	SET_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Clear OC0 on compare match & Set OC0 onThe TOP.
    2364:	a3 e5       	ldi	r26, 0x53	; 83
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e3 e5       	ldi	r30, 0x53	; 83
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	80 62       	ori	r24, 0x20	; 32
    2370:	8c 93       	st	X, r24
    2372:	a3 e5       	ldi	r26, 0x53	; 83
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e3 e5       	ldi	r30, 0x53	; 83
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	8f 7e       	andi	r24, 0xEF	; 239
    237e:	8c 93       	st	X, r24
    2380:	ca c0       	rjmp	.+404    	; 0x2516 <TIMER0_vidStartTimer_PWMMode+0x2a6>
	break;

case (TIMER0_PWM_PIN_SET_CLEAR):
	SET_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//SET OC0 on compare match & CLEAR OC0 onThe TOP.
    2382:	a3 e5       	ldi	r26, 0x53	; 83
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e3 e5       	ldi	r30, 0x53	; 83
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	80 62       	ori	r24, 0x20	; 32
    238e:	8c 93       	st	X, r24
    2390:	a3 e5       	ldi	r26, 0x53	; 83
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e3 e5       	ldi	r30, 0x53	; 83
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	80 61       	ori	r24, 0x10	; 16
    239c:	8c 93       	st	X, r24
    239e:	bb c0       	rjmp	.+374    	; 0x2516 <TIMER0_vidStartTimer_PWMMode+0x2a6>
	break;

case (TIMER0_PWM_OF_INTRUPT_PIN_CLEAR_SET):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    23a0:	af e5       	ldi	r26, 0x5F	; 95
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	ef e5       	ldi	r30, 0x5F	; 95
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	80 68       	ori	r24, 0x80	; 128
    23ac:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,0);	//Over Flow Interrupt For Timer 0
    23ae:	a9 e5       	ldi	r26, 0x59	; 89
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	e9 e5       	ldi	r30, 0x59	; 89
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	81 60       	ori	r24, 0x01	; 1
    23ba:	8c 93       	st	X, r24

	SET_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Clear OC0 on compare match & Set OC0 onThe TOP.
    23bc:	a3 e5       	ldi	r26, 0x53	; 83
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	e3 e5       	ldi	r30, 0x53	; 83
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	80 62       	ori	r24, 0x20	; 32
    23c8:	8c 93       	st	X, r24
    23ca:	a3 e5       	ldi	r26, 0x53	; 83
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e3 e5       	ldi	r30, 0x53	; 83
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	8f 7e       	andi	r24, 0xEF	; 239
    23d6:	8c 93       	st	X, r24
    23d8:	9e c0       	rjmp	.+316    	; 0x2516 <TIMER0_vidStartTimer_PWMMode+0x2a6>
	break;

case (TIMER0_PWM_OF_INTRUPT_PIN_SET_CLEAR):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    23da:	af e5       	ldi	r26, 0x5F	; 95
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	ef e5       	ldi	r30, 0x5F	; 95
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	80 68       	ori	r24, 0x80	; 128
    23e6:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,0);	//Over Flow Interrupt For Timer 0
    23e8:	a9 e5       	ldi	r26, 0x59	; 89
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e9 e5       	ldi	r30, 0x59	; 89
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	81 60       	ori	r24, 0x01	; 1
    23f4:	8c 93       	st	X, r24

	SET_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//SET OC0 on compare match & CLEAR OC0 onThe TOP.
    23f6:	a3 e5       	ldi	r26, 0x53	; 83
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e3 e5       	ldi	r30, 0x53	; 83
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	80 62       	ori	r24, 0x20	; 32
    2402:	8c 93       	st	X, r24
    2404:	a3 e5       	ldi	r26, 0x53	; 83
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e3 e5       	ldi	r30, 0x53	; 83
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	80 61       	ori	r24, 0x10	; 16
    2410:	8c 93       	st	X, r24
    2412:	81 c0       	rjmp	.+258    	; 0x2516 <TIMER0_vidStartTimer_PWMMode+0x2a6>
	break;

case (TIMER0_PWM_CM_INTRUPT_PIN_CLEAR_SET):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    2414:	af e5       	ldi	r26, 0x5F	; 95
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	ef e5       	ldi	r30, 0x5F	; 95
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	80 68       	ori	r24, 0x80	; 128
    2420:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    2422:	a9 e5       	ldi	r26, 0x59	; 89
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e9 e5       	ldi	r30, 0x59	; 89
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	82 60       	ori	r24, 0x02	; 2
    242e:	8c 93       	st	X, r24

	SET_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Clear OC0 on compare match & Set OC0 onThe TOP.
    2430:	a3 e5       	ldi	r26, 0x53	; 83
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e3 e5       	ldi	r30, 0x53	; 83
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	80 62       	ori	r24, 0x20	; 32
    243c:	8c 93       	st	X, r24
    243e:	a3 e5       	ldi	r26, 0x53	; 83
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e3 e5       	ldi	r30, 0x53	; 83
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	8f 7e       	andi	r24, 0xEF	; 239
    244a:	8c 93       	st	X, r24
    244c:	64 c0       	rjmp	.+200    	; 0x2516 <TIMER0_vidStartTimer_PWMMode+0x2a6>
	break;

case (TIMER0_PWM_CM_INTRUPT_PIN_SET_CLEAR):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    244e:	af e5       	ldi	r26, 0x5F	; 95
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	ef e5       	ldi	r30, 0x5F	; 95
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	80 68       	ori	r24, 0x80	; 128
    245a:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    245c:	a9 e5       	ldi	r26, 0x59	; 89
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	e9 e5       	ldi	r30, 0x59	; 89
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	82 60       	ori	r24, 0x02	; 2
    2468:	8c 93       	st	X, r24

	SET_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//SET OC0 on compare match & CLEAR OC0 onThe TOP.
    246a:	a3 e5       	ldi	r26, 0x53	; 83
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	e3 e5       	ldi	r30, 0x53	; 83
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	80 62       	ori	r24, 0x20	; 32
    2476:	8c 93       	st	X, r24
    2478:	a3 e5       	ldi	r26, 0x53	; 83
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e3 e5       	ldi	r30, 0x53	; 83
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	80 61       	ori	r24, 0x10	; 16
    2484:	8c 93       	st	X, r24
    2486:	47 c0       	rjmp	.+142    	; 0x2516 <TIMER0_vidStartTimer_PWMMode+0x2a6>
	break;

case (TIMER0_PWM_OF_CM_INTRUPT_PIN_SET_CLEAR):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    2488:	af e5       	ldi	r26, 0x5F	; 95
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	ef e5       	ldi	r30, 0x5F	; 95
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	80 68       	ori	r24, 0x80	; 128
    2494:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,0);	//Over Flow Interrupt For Timer 0
    2496:	a9 e5       	ldi	r26, 0x59	; 89
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	e9 e5       	ldi	r30, 0x59	; 89
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	81 60       	ori	r24, 0x01	; 1
    24a2:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    24a4:	a9 e5       	ldi	r26, 0x59	; 89
    24a6:	b0 e0       	ldi	r27, 0x00	; 0
    24a8:	e9 e5       	ldi	r30, 0x59	; 89
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 81       	ld	r24, Z
    24ae:	82 60       	ori	r24, 0x02	; 2
    24b0:	8c 93       	st	X, r24

	SET_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//SET OC0 on compare match & CLEAR OC0 onThe TOP.
    24b2:	a3 e5       	ldi	r26, 0x53	; 83
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e3 e5       	ldi	r30, 0x53	; 83
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	80 62       	ori	r24, 0x20	; 32
    24be:	8c 93       	st	X, r24
    24c0:	a3 e5       	ldi	r26, 0x53	; 83
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e3 e5       	ldi	r30, 0x53	; 83
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	80 61       	ori	r24, 0x10	; 16
    24cc:	8c 93       	st	X, r24
    24ce:	23 c0       	rjmp	.+70     	; 0x2516 <TIMER0_vidStartTimer_PWMMode+0x2a6>
	break;

case (TIMER0_PWM_OF_CM_INTRUPT_PIN_CLEAR_SET):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    24d0:	af e5       	ldi	r26, 0x5F	; 95
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	ef e5       	ldi	r30, 0x5F	; 95
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	80 68       	ori	r24, 0x80	; 128
    24dc:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,0);	//Over Flow Interrupt For Timer 0
    24de:	a9 e5       	ldi	r26, 0x59	; 89
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e9 e5       	ldi	r30, 0x59	; 89
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	81 60       	ori	r24, 0x01	; 1
    24ea:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    24ec:	a9 e5       	ldi	r26, 0x59	; 89
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	e9 e5       	ldi	r30, 0x59	; 89
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	82 60       	ori	r24, 0x02	; 2
    24f8:	8c 93       	st	X, r24

	SET_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Clear OC0 on compare match & Set OC0 onThe TOP.
    24fa:	a3 e5       	ldi	r26, 0x53	; 83
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e3 e5       	ldi	r30, 0x53	; 83
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	80 62       	ori	r24, 0x20	; 32
    2506:	8c 93       	st	X, r24
    2508:	a3 e5       	ldi	r26, 0x53	; 83
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	e3 e5       	ldi	r30, 0x53	; 83
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	8f 7e       	andi	r24, 0xEF	; 239
    2514:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,2);
	CLR_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#elif(CLOCK_SELECT == CLK_8_PRESCALER )
	CLR_BIT(TCCR0_REG,2);
    2516:	a3 e5       	ldi	r26, 0x53	; 83
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	e3 e5       	ldi	r30, 0x53	; 83
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	8b 7f       	andi	r24, 0xFB	; 251
    2522:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,1);
    2524:	a3 e5       	ldi	r26, 0x53	; 83
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	e3 e5       	ldi	r30, 0x53	; 83
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	82 60       	ori	r24, 0x02	; 2
    2530:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,0);
    2532:	a3 e5       	ldi	r26, 0x53	; 83
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e3 e5       	ldi	r30, 0x53	; 83
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	8e 7f       	andi	r24, 0xFE	; 254
    253e:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,2);
	SET_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#endif
}
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <TIMER0_vidStartTimer_PhaseCorrectMode>:


void TIMER0_vidStartTimer_PhaseCorrectMode(u8 u8InitVal , u8 u8CompareValue,u8 u8PhsCrrectMode)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	00 d0       	rcall	.+0      	; 0x2556 <TIMER0_vidStartTimer_PhaseCorrectMode+0x6>
    2556:	00 d0       	rcall	.+0      	; 0x2558 <TIMER0_vidStartTimer_PhaseCorrectMode+0x8>
    2558:	0f 92       	push	r0
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	89 83       	std	Y+1, r24	; 0x01
    2560:	6a 83       	std	Y+2, r22	; 0x02
    2562:	4b 83       	std	Y+3, r20	; 0x03
/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER0_vidSetInitReg(u8InitVal);
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	0e 94 02 13 	call	0x2604	; 0x2604 <TIMER0_vidSetInitReg>

/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER0_vidSetComparReg(u8CompareValue);
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	0e 94 10 13 	call	0x2620	; 0x2620 <TIMER0_vidSetComparReg>

switch(u8PhsCrrectMode)
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	28 2f       	mov	r18, r24
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	3d 83       	std	Y+5, r19	; 0x05
    2578:	2c 83       	std	Y+4, r18	; 0x04
    257a:	8c 81       	ldd	r24, Y+4	; 0x04
    257c:	9d 81       	ldd	r25, Y+5	; 0x05
    257e:	81 30       	cpi	r24, 0x01	; 1
    2580:	91 05       	cpc	r25, r1
    2582:	31 f0       	breq	.+12     	; 0x2590 <TIMER0_vidStartTimer_PhaseCorrectMode+0x40>
    2584:	2c 81       	ldd	r18, Y+4	; 0x04
    2586:	3d 81       	ldd	r19, Y+5	; 0x05
    2588:	22 30       	cpi	r18, 0x02	; 2
    258a:	31 05       	cpc	r19, r1
    258c:	81 f0       	breq	.+32     	; 0x25ae <TIMER0_vidStartTimer_PhaseCorrectMode+0x5e>
    258e:	1d c0       	rjmp	.+58     	; 0x25ca <TIMER0_vidStartTimer_PhaseCorrectMode+0x7a>
{
case (TIMER0_PHASECORRECT_PIN_CLEAR_SET):
	SET_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Clear The Pin At Up And Set At Down
    2590:	a3 e5       	ldi	r26, 0x53	; 83
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e3 e5       	ldi	r30, 0x53	; 83
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	80 62       	ori	r24, 0x20	; 32
    259c:	8c 93       	st	X, r24
    259e:	a3 e5       	ldi	r26, 0x53	; 83
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e3 e5       	ldi	r30, 0x53	; 83
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	8f 7e       	andi	r24, 0xEF	; 239
    25aa:	8c 93       	st	X, r24
    25ac:	0e c0       	rjmp	.+28     	; 0x25ca <TIMER0_vidStartTimer_PhaseCorrectMode+0x7a>
	break;

case (TIMER0_PHASECORRECT_PIN_SET_CLEAR):
	SET_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//Set The Pin At Up And Clear At Down
    25ae:	a3 e5       	ldi	r26, 0x53	; 83
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	e3 e5       	ldi	r30, 0x53	; 83
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	80 62       	ori	r24, 0x20	; 32
    25ba:	8c 93       	st	X, r24
    25bc:	a3 e5       	ldi	r26, 0x53	; 83
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e3 e5       	ldi	r30, 0x53	; 83
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	80 61       	ori	r24, 0x10	; 16
    25c8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,2);
	CLR_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#elif(CLOCK_SELECT == CLK_8_PRESCALER )
	CLR_BIT(TCCR0_REG,2);
    25ca:	a3 e5       	ldi	r26, 0x53	; 83
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	e3 e5       	ldi	r30, 0x53	; 83
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	8b 7f       	andi	r24, 0xFB	; 251
    25d6:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,1);
    25d8:	a3 e5       	ldi	r26, 0x53	; 83
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e3 e5       	ldi	r30, 0x53	; 83
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	82 60       	ori	r24, 0x02	; 2
    25e4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,0);
    25e6:	a3 e5       	ldi	r26, 0x53	; 83
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	e3 e5       	ldi	r30, 0x53	; 83
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	8e 7f       	andi	r24, 0xFE	; 254
    25f2:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,2);
	SET_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#endif
}
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <TIMER0_vidSetInitReg>:


void TIMER0_vidSetInitReg(u8 u8InitVal)
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	0f 92       	push	r0
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	89 83       	std	Y+1, r24	; 0x01
	 TCNT0_REG = u8InitVal;
    2610:	e2 e5       	ldi	r30, 0x52	; 82
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	80 83       	st	Z, r24
}
    2618:	0f 90       	pop	r0
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	08 95       	ret

00002620 <TIMER0_vidSetComparReg>:

void TIMER0_vidSetComparReg(u8 u8CompareValue)
{
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	0f 92       	push	r0
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	89 83       	std	Y+1, r24	; 0x01
	 OCR0_REG = u8CompareValue;
    262c:	ec e5       	ldi	r30, 0x5C	; 92
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	80 83       	st	Z, r24
}
    2634:	0f 90       	pop	r0
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <TIMER0_vidGetCounterReg>:


u8 TIMER0_vidGetCounterReg(void)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
	return (TCNT0_REG) ;
    2644:	e2 e5       	ldi	r30, 0x52	; 82
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
}
    264a:	cf 91       	pop	r28
    264c:	df 91       	pop	r29
    264e:	08 95       	ret

00002650 <TIMER0_vidGETComparReg>:

u8 TIMER0_vidGETComparReg(void)
{
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
	return (OCR0_REG);
    2658:	ec e5       	ldi	r30, 0x5C	; 92
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
}
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	08 95       	ret

00002664 <TIMER0_vidEnableOverFlowInterrupt>:

void TIMER0_vidEnableOverFlowInterrupt(void)
{
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SR_REG,7);  	//Global Interrupt
    266c:	af e5       	ldi	r26, 0x5F	; 95
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	ef e5       	ldi	r30, 0x5F	; 95
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	80 68       	ori	r24, 0x80	; 128
    2678:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,0);	//Over Flow Interrupt For Timer 0
    267a:	a9 e5       	ldi	r26, 0x59	; 89
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	e9 e5       	ldi	r30, 0x59	; 89
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	81 60       	ori	r24, 0x01	; 1
    2686:	8c 93       	st	X, r24
}
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	08 95       	ret

0000268e <TIMER0_vidEnableCompareMatchInterrupt>:
void TIMER0_vidEnableCompareMatchInterrupt(void)
{
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SR_REG,7);  	//Global Interrupt
    2696:	af e5       	ldi	r26, 0x5F	; 95
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	ef e5       	ldi	r30, 0x5F	; 95
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	80 68       	ori	r24, 0x80	; 128
    26a2:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    26a4:	a9 e5       	ldi	r26, 0x59	; 89
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e9 e5       	ldi	r30, 0x59	; 89
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	82 60       	ori	r24, 0x02	; 2
    26b0:	8c 93       	st	X, r24
}
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <TIMER0_vidDisableOverFlowInterrupt>:

void TIMER0_vidDisableOverFlowInterrupt(void)
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,0);	//Over Flow Interrupt For Timer 0
    26c0:	a9 e5       	ldi	r26, 0x59	; 89
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	e9 e5       	ldi	r30, 0x59	; 89
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	8e 7f       	andi	r24, 0xFE	; 254
    26cc:	8c 93       	st	X, r24
}
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	08 95       	ret

000026d4 <TIMER0_vidDisableCompareMatchInterrupt>:
void TIMER0_vidDisableCompareMatchInterrupt(void)
{
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    26dc:	a9 e5       	ldi	r26, 0x59	; 89
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	e9 e5       	ldi	r30, 0x59	; 89
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	8d 7f       	andi	r24, 0xFD	; 253
    26e8:	8c 93       	st	X, r24
}
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	08 95       	ret

000026f0 <TIMER0_vidStopTimer>:

void TIMER0_vidStopTimer(void)
{
    26f0:	df 93       	push	r29
    26f2:	cf 93       	push	r28
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0_REG,2);
    26f8:	a3 e5       	ldi	r26, 0x53	; 83
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	e3 e5       	ldi	r30, 0x53	; 83
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	8b 7f       	andi	r24, 0xFB	; 251
    2704:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,1);
    2706:	a3 e5       	ldi	r26, 0x53	; 83
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	e3 e5       	ldi	r30, 0x53	; 83
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	8d 7f       	andi	r24, 0xFD	; 253
    2712:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,0);
    2714:	a3 e5       	ldi	r26, 0x53	; 83
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	e3 e5       	ldi	r30, 0x53	; 83
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	8e 7f       	andi	r24, 0xFE	; 254
    2720:	8c 93       	st	X, r24
}
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    2728:	1f 92       	push	r1
    272a:	0f 92       	push	r0
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	0f 92       	push	r0
    2730:	11 24       	eor	r1, r1
    2732:	2f 93       	push	r18
    2734:	3f 93       	push	r19
    2736:	4f 93       	push	r20
    2738:	5f 93       	push	r21
    273a:	6f 93       	push	r22
    273c:	7f 93       	push	r23
    273e:	8f 93       	push	r24
    2740:	9f 93       	push	r25
    2742:	af 93       	push	r26
    2744:	bf 93       	push	r27
    2746:	ef 93       	push	r30
    2748:	ff 93       	push	r31
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
	Timer0_OF_Call_Back();
    2752:	e0 91 8d 00 	lds	r30, 0x008D
    2756:	f0 91 8e 00 	lds	r31, 0x008E
    275a:	09 95       	icall
}
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	ff 91       	pop	r31
    2762:	ef 91       	pop	r30
    2764:	bf 91       	pop	r27
    2766:	af 91       	pop	r26
    2768:	9f 91       	pop	r25
    276a:	8f 91       	pop	r24
    276c:	7f 91       	pop	r23
    276e:	6f 91       	pop	r22
    2770:	5f 91       	pop	r21
    2772:	4f 91       	pop	r20
    2774:	3f 91       	pop	r19
    2776:	2f 91       	pop	r18
    2778:	0f 90       	pop	r0
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	0f 90       	pop	r0
    277e:	1f 90       	pop	r1
    2780:	18 95       	reti

00002782 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    2782:	1f 92       	push	r1
    2784:	0f 92       	push	r0
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	0f 92       	push	r0
    278a:	11 24       	eor	r1, r1
    278c:	2f 93       	push	r18
    278e:	3f 93       	push	r19
    2790:	4f 93       	push	r20
    2792:	5f 93       	push	r21
    2794:	6f 93       	push	r22
    2796:	7f 93       	push	r23
    2798:	8f 93       	push	r24
    279a:	9f 93       	push	r25
    279c:	af 93       	push	r26
    279e:	bf 93       	push	r27
    27a0:	ef 93       	push	r30
    27a2:	ff 93       	push	r31
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
	Timer0_CTC_Call_Back();
    27ac:	e0 91 8b 00 	lds	r30, 0x008B
    27b0:	f0 91 8c 00 	lds	r31, 0x008C
    27b4:	09 95       	icall
}
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	ff 91       	pop	r31
    27bc:	ef 91       	pop	r30
    27be:	bf 91       	pop	r27
    27c0:	af 91       	pop	r26
    27c2:	9f 91       	pop	r25
    27c4:	8f 91       	pop	r24
    27c6:	7f 91       	pop	r23
    27c8:	6f 91       	pop	r22
    27ca:	5f 91       	pop	r21
    27cc:	4f 91       	pop	r20
    27ce:	3f 91       	pop	r19
    27d0:	2f 91       	pop	r18
    27d2:	0f 90       	pop	r0
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	0f 90       	pop	r0
    27d8:	1f 90       	pop	r1
    27da:	18 95       	reti

000027dc <ICU_u8Init>:
static void ICU_voidExtIntCallback(void);
static void ICU_voidTimer0OverflowCallback(void);
static u32 ICU_u32GetCurrentTime(void);

u8 ICU_u8Init(void)
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    /* Initialize Timer0 in normal mode */
    TIMER0_vidInit();
    27e4:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <TIMER0_vidInit>

    /* Set Timer0 overflow callback */
    Timer0_OF_Call_Back = ICU_voidTimer0OverflowCallback;
    27e8:	8a e5       	ldi	r24, 0x5A	; 90
    27ea:	95 e1       	ldi	r25, 0x15	; 21
    27ec:	90 93 8e 00 	sts	0x008E, r25
    27f0:	80 93 8d 00 	sts	0x008D, r24

    /* Configure external interrupt */
    #if ICU_EXT_INT_NUM == 0
        EXT_INT0_Call_Back = ICU_voidExtIntCallback;
    27f4:	87 e2       	ldi	r24, 0x27	; 39
    27f6:	95 e1       	ldi	r25, 0x15	; 21
    27f8:	90 93 92 00 	sts	0x0092, r25
    27fc:	80 93 91 00 	sts	0x0091, r24
    #elif ICU_EXT_INT_NUM == 2
        EXT_INT2_Call_Back = ICU_voidExtIntCallback;
    #endif

    /* Initialize state */
    g_u8ICUState = ICU_STATE_IDLE;
    2800:	10 92 74 00 	sts	0x0074, r1
    g_u32StartTime = 0;
    2804:	10 92 75 00 	sts	0x0075, r1
    2808:	10 92 76 00 	sts	0x0076, r1
    280c:	10 92 77 00 	sts	0x0077, r1
    2810:	10 92 78 00 	sts	0x0078, r1
    g_u32EndTime = 0;
    2814:	10 92 79 00 	sts	0x0079, r1
    2818:	10 92 7a 00 	sts	0x007A, r1
    281c:	10 92 7b 00 	sts	0x007B, r1
    2820:	10 92 7c 00 	sts	0x007C, r1
    g_u32OverflowCount = 0;
    2824:	10 92 7d 00 	sts	0x007D, r1
    2828:	10 92 7e 00 	sts	0x007E, r1
    282c:	10 92 7f 00 	sts	0x007F, r1
    2830:	10 92 80 00 	sts	0x0080, r1
    g_u8EdgeCount = 0;
    2834:	10 92 81 00 	sts	0x0081, r1

    return ICU_OK;
    2838:	80 e0       	ldi	r24, 0x00	; 0
}
    283a:	cf 91       	pop	r28
    283c:	df 91       	pop	r29
    283e:	08 95       	ret

00002840 <ICU_u8StartMeasurement>:

u8 ICU_u8StartMeasurement(void)
{
    2840:	df 93       	push	r29
    2842:	cf 93       	push	r28
    2844:	0f 92       	push	r0
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    /* Check if already measuring */
    if (g_u8ICUState == ICU_STATE_MEASURING)
    284a:	80 91 74 00 	lds	r24, 0x0074
    284e:	81 30       	cpi	r24, 0x01	; 1
    2850:	19 f4       	brne	.+6      	; 0x2858 <ICU_u8StartMeasurement+0x18>
    {
        return ICU_BUSY;
    2852:	83 e0       	ldi	r24, 0x03	; 3
    2854:	89 83       	std	Y+1, r24	; 0x01
    2856:	2a c0       	rjmp	.+84     	; 0x28ac <ICU_u8StartMeasurement+0x6c>
    }

    /* Stop any previous timer */
    TIMER0_vidStopTimer();
    2858:	0e 94 78 13 	call	0x26f0	; 0x26f0 <TIMER0_vidStopTimer>

    /* Reset variables */
    g_u32StartTime = 0;
    285c:	10 92 75 00 	sts	0x0075, r1
    2860:	10 92 76 00 	sts	0x0076, r1
    2864:	10 92 77 00 	sts	0x0077, r1
    2868:	10 92 78 00 	sts	0x0078, r1
    g_u32EndTime = 0;
    286c:	10 92 79 00 	sts	0x0079, r1
    2870:	10 92 7a 00 	sts	0x007A, r1
    2874:	10 92 7b 00 	sts	0x007B, r1
    2878:	10 92 7c 00 	sts	0x007C, r1
    g_u32OverflowCount = 0;
    287c:	10 92 7d 00 	sts	0x007D, r1
    2880:	10 92 7e 00 	sts	0x007E, r1
    2884:	10 92 7f 00 	sts	0x007F, r1
    2888:	10 92 80 00 	sts	0x0080, r1
    g_u8EdgeCount = 0;
    288c:	10 92 81 00 	sts	0x0081, r1

    /* Clear timer counter */
    TIMER0_vidSetInitReg(0);
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	0e 94 02 13 	call	0x2604	; 0x2604 <TIMER0_vidSetInitReg>

    /* Start Timer0 with overflow interrupt */
    TIMER0_vidStartTimer_OverFlowMode(0);
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	0e 94 08 10 	call	0x2010	; 0x2010 <TIMER0_vidStartTimer_OverFlowMode>

    /* Enable external interrupt */
    DIO_vidEnableIntrupt(ICU_EXT_INT_NUM, ICU_EDGE_MODE);
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	61 e0       	ldi	r22, 0x01	; 1
    28a0:	0e 94 0e 1a 	call	0x341c	; 0x341c <DIO_vidEnableIntrupt>

    /* Set state to measuring */
    g_u8ICUState = ICU_STATE_MEASURING;
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	80 93 74 00 	sts	0x0074, r24

    return ICU_OK;
    28aa:	19 82       	std	Y+1, r1	; 0x01
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    28ae:	0f 90       	pop	r0
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <ICU_voidReset>:

void ICU_voidReset(void)
{
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    /* Stop measurement */
    TIMER0_vidStopTimer();
    28be:	0e 94 78 13 	call	0x26f0	; 0x26f0 <TIMER0_vidStopTimer>

    /* Disable external interrupt */
    DIO_vidDisableExtInt(ICU_EXT_INT_NUM);
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	0e 94 4d 1b 	call	0x369a	; 0x369a <DIO_vidDisableExtInt>

    /* Reset all variables */
    g_u32StartTime = 0;
    28c8:	10 92 75 00 	sts	0x0075, r1
    28cc:	10 92 76 00 	sts	0x0076, r1
    28d0:	10 92 77 00 	sts	0x0077, r1
    28d4:	10 92 78 00 	sts	0x0078, r1
    g_u32EndTime = 0;
    28d8:	10 92 79 00 	sts	0x0079, r1
    28dc:	10 92 7a 00 	sts	0x007A, r1
    28e0:	10 92 7b 00 	sts	0x007B, r1
    28e4:	10 92 7c 00 	sts	0x007C, r1
    g_u32OverflowCount = 0;
    28e8:	10 92 7d 00 	sts	0x007D, r1
    28ec:	10 92 7e 00 	sts	0x007E, r1
    28f0:	10 92 7f 00 	sts	0x007F, r1
    28f4:	10 92 80 00 	sts	0x0080, r1
    g_u8EdgeCount = 0;
    28f8:	10 92 81 00 	sts	0x0081, r1
    g_u8ICUState = ICU_STATE_IDLE;
    28fc:	10 92 74 00 	sts	0x0074, r1
}
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <ICU_u8StopMeasurement>:

u8 ICU_u8StopMeasurement(void)
{
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    /* Stop Timer0 */
    TIMER0_vidStopTimer();
    290e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <TIMER0_vidStopTimer>

    /* Disable external interrupt */
    DIO_vidDisableExtInt(ICU_EXT_INT_NUM);
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	0e 94 4d 1b 	call	0x369a	; 0x369a <DIO_vidDisableExtInt>

    /* Set state to idle */
    g_u8ICUState = ICU_STATE_IDLE;
    2918:	10 92 74 00 	sts	0x0074, r1

    return ICU_OK;
    291c:	80 e0       	ldi	r24, 0x00	; 0
}
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	08 95       	ret

00002924 <ICU_u8GetMeasuredTime>:

u8 ICU_u8GetMeasuredTime(u32* Copy_pu32Time)
{
    2924:	ef 92       	push	r14
    2926:	ff 92       	push	r15
    2928:	0f 93       	push	r16
    292a:	1f 93       	push	r17
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	00 d0       	rcall	.+0      	; 0x2932 <ICU_u8GetMeasuredTime+0xe>
    2932:	0f 92       	push	r0
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	9a 83       	std	Y+2, r25	; 0x02
    293a:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pu32Time == NULL)
    293c:	89 81       	ldd	r24, Y+1	; 0x01
    293e:	9a 81       	ldd	r25, Y+2	; 0x02
    2940:	00 97       	sbiw	r24, 0x00	; 0
    2942:	19 f4       	brne	.+6      	; 0x294a <ICU_u8GetMeasuredTime+0x26>
    {
        return ICU_ERROR;
    2944:	01 e0       	ldi	r16, 0x01	; 1
    2946:	0b 83       	std	Y+3, r16	; 0x03
    2948:	26 c0       	rjmp	.+76     	; 0x2996 <ICU_u8GetMeasuredTime+0x72>
    }

    if (g_u8ICUState != ICU_STATE_COMPLETE)
    294a:	80 91 74 00 	lds	r24, 0x0074
    294e:	82 30       	cpi	r24, 0x02	; 2
    2950:	19 f0       	breq	.+6      	; 0x2958 <ICU_u8GetMeasuredTime+0x34>
    {
        return ICU_ERROR;
    2952:	11 e0       	ldi	r17, 0x01	; 1
    2954:	1b 83       	std	Y+3, r17	; 0x03
    2956:	1f c0       	rjmp	.+62     	; 0x2996 <ICU_u8GetMeasuredTime+0x72>
    }

    /* Calculate total time in Timer0 counts */
    *Copy_pu32Time = g_u32EndTime - g_u32StartTime;
    2958:	20 91 79 00 	lds	r18, 0x0079
    295c:	30 91 7a 00 	lds	r19, 0x007A
    2960:	40 91 7b 00 	lds	r20, 0x007B
    2964:	50 91 7c 00 	lds	r21, 0x007C
    2968:	80 91 75 00 	lds	r24, 0x0075
    296c:	90 91 76 00 	lds	r25, 0x0076
    2970:	a0 91 77 00 	lds	r26, 0x0077
    2974:	b0 91 78 00 	lds	r27, 0x0078
    2978:	79 01       	movw	r14, r18
    297a:	8a 01       	movw	r16, r20
    297c:	e8 1a       	sub	r14, r24
    297e:	f9 0a       	sbc	r15, r25
    2980:	0a 0b       	sbc	r16, r26
    2982:	1b 0b       	sbc	r17, r27
    2984:	d8 01       	movw	r26, r16
    2986:	c7 01       	movw	r24, r14
    2988:	e9 81       	ldd	r30, Y+1	; 0x01
    298a:	fa 81       	ldd	r31, Y+2	; 0x02
    298c:	80 83       	st	Z, r24
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	a2 83       	std	Z+2, r26	; 0x02
    2992:	b3 83       	std	Z+3, r27	; 0x03

    return ICU_OK;
    2994:	1b 82       	std	Y+3, r1	; 0x03
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	1f 91       	pop	r17
    29a4:	0f 91       	pop	r16
    29a6:	ff 90       	pop	r15
    29a8:	ef 90       	pop	r14
    29aa:	08 95       	ret

000029ac <ICU_u8GetMeasuredTimeUs>:

u8 ICU_u8GetMeasuredTimeUs(u32* Copy_pu32TimeUs)
{
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	28 97       	sbiw	r28, 0x08	; 8
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	9f 83       	std	Y+7, r25	; 0x07
    29c2:	8e 83       	std	Y+6, r24	; 0x06
    u32 Local_u32TimeCounts;
    u8 Local_u8Status;

    if (Copy_pu32TimeUs == NULL)
    29c4:	8e 81       	ldd	r24, Y+6	; 0x06
    29c6:	9f 81       	ldd	r25, Y+7	; 0x07
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	19 f4       	brne	.+6      	; 0x29d2 <ICU_u8GetMeasuredTimeUs+0x26>
    {
        return ICU_ERROR;
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	88 87       	std	Y+8, r24	; 0x08
    29d0:	1a c0       	rjmp	.+52     	; 0x2a06 <ICU_u8GetMeasuredTimeUs+0x5a>
    }

    /* Get measured time in counts */
    Local_u8Status = ICU_u8GetMeasuredTime(&Local_u32TimeCounts);
    29d2:	ce 01       	movw	r24, r28
    29d4:	02 96       	adiw	r24, 0x02	; 2
    29d6:	0e 94 92 14 	call	0x2924	; 0x2924 <ICU_u8GetMeasuredTime>
    29da:	89 83       	std	Y+1, r24	; 0x01
    if (Local_u8Status != ICU_OK)
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	88 23       	and	r24, r24
    29e0:	19 f0       	breq	.+6      	; 0x29e8 <ICU_u8GetMeasuredTimeUs+0x3c>
    {
        return Local_u8Status;
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	88 87       	std	Y+8, r24	; 0x08
    29e6:	0f c0       	rjmp	.+30     	; 0x2a06 <ICU_u8GetMeasuredTimeUs+0x5a>
    }

    /* Convert to microseconds based on Timer0 configuration */
    /* Timer0 with 8 prescaler: 16MHz/8 = 2MHz, 1 count = 0.5us */
    *Copy_pu32TimeUs = (Local_u32TimeCounts * 1) / 2;  /* 0.5us per count */
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	9b 81       	ldd	r25, Y+3	; 0x03
    29ec:	ac 81       	ldd	r26, Y+4	; 0x04
    29ee:	bd 81       	ldd	r27, Y+5	; 0x05
    29f0:	b6 95       	lsr	r27
    29f2:	a7 95       	ror	r26
    29f4:	97 95       	ror	r25
    29f6:	87 95       	ror	r24
    29f8:	ee 81       	ldd	r30, Y+6	; 0x06
    29fa:	ff 81       	ldd	r31, Y+7	; 0x07
    29fc:	80 83       	st	Z, r24
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	a2 83       	std	Z+2, r26	; 0x02
    2a02:	b3 83       	std	Z+3, r27	; 0x03

    return ICU_OK;
    2a04:	18 86       	std	Y+8, r1	; 0x08
    2a06:	88 85       	ldd	r24, Y+8	; 0x08
}
    2a08:	28 96       	adiw	r28, 0x08	; 8
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	08 95       	ret

00002a1a <ICU_u8IsMeasurementComplete>:

u8 ICU_u8IsMeasurementComplete(void)
{
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	0f 92       	push	r0
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    return (g_u8ICUState == ICU_STATE_COMPLETE) ? 1 : 0;
    2a24:	80 91 74 00 	lds	r24, 0x0074
    2a28:	19 82       	std	Y+1, r1	; 0x01
    2a2a:	82 30       	cpi	r24, 0x02	; 2
    2a2c:	11 f4       	brne	.+4      	; 0x2a32 <ICU_u8IsMeasurementComplete+0x18>
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	89 83       	std	Y+1, r24	; 0x01
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a34:	0f 90       	pop	r0
    2a36:	cf 91       	pop	r28
    2a38:	df 91       	pop	r29
    2a3a:	08 95       	ret

00002a3c <ICU_u8GetState>:

u8 ICU_u8GetState(void)
{
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    return g_u8ICUState;
    2a44:	80 91 74 00 	lds	r24, 0x0074
}
    2a48:	cf 91       	pop	r28
    2a4a:	df 91       	pop	r29
    2a4c:	08 95       	ret

00002a4e <ICU_voidExtIntCallback>:


/* Private Functions */

static void ICU_voidExtIntCallback(void)
{
    2a4e:	df 93       	push	r29
    2a50:	cf 93       	push	r28
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
    if (g_u8ICUState == ICU_STATE_MEASURING)
    2a56:	80 91 74 00 	lds	r24, 0x0074
    2a5a:	81 30       	cpi	r24, 0x01	; 1
    2a5c:	41 f5       	brne	.+80     	; 0x2aae <ICU_voidExtIntCallback+0x60>
    {
        if (g_u8EdgeCount == 0)
    2a5e:	80 91 81 00 	lds	r24, 0x0081
    2a62:	88 23       	and	r24, r24
    2a64:	81 f4       	brne	.+32     	; 0x2a86 <ICU_voidExtIntCallback+0x38>
        {
            /* First edge - start measurement */
            g_u32StartTime = ICU_u32GetCurrentTime();
    2a66:	0e 94 83 15 	call	0x2b06	; 0x2b06 <ICU_u32GetCurrentTime>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	80 93 75 00 	sts	0x0075, r24
    2a72:	90 93 76 00 	sts	0x0076, r25
    2a76:	a0 93 77 00 	sts	0x0077, r26
    2a7a:	b0 93 78 00 	sts	0x0078, r27
            g_u8EdgeCount = 1;
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	80 93 81 00 	sts	0x0081, r24
    2a84:	14 c0       	rjmp	.+40     	; 0x2aae <ICU_voidExtIntCallback+0x60>
        }
        else
        {
            /* Second edge - complete measurement */
            g_u32EndTime = ICU_u32GetCurrentTime();
    2a86:	0e 94 83 15 	call	0x2b06	; 0x2b06 <ICU_u32GetCurrentTime>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	80 93 79 00 	sts	0x0079, r24
    2a92:	90 93 7a 00 	sts	0x007A, r25
    2a96:	a0 93 7b 00 	sts	0x007B, r26
    2a9a:	b0 93 7c 00 	sts	0x007C, r27
            g_u8ICUState = ICU_STATE_COMPLETE;
    2a9e:	82 e0       	ldi	r24, 0x02	; 2
    2aa0:	80 93 74 00 	sts	0x0074, r24

            /* Stop timer and interrupt */
            TIMER0_vidStopTimer();
    2aa4:	0e 94 78 13 	call	0x26f0	; 0x26f0 <TIMER0_vidStopTimer>
            DIO_vidDisableExtInt(ICU_EXT_INT_NUM);
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	0e 94 4d 1b 	call	0x369a	; 0x369a <DIO_vidDisableExtInt>
        }
    }
}
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	08 95       	ret

00002ab4 <ICU_voidTimer0OverflowCallback>:

static void ICU_voidTimer0OverflowCallback(void)
{
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    g_u32OverflowCount++;
    2abc:	80 91 7d 00 	lds	r24, 0x007D
    2ac0:	90 91 7e 00 	lds	r25, 0x007E
    2ac4:	a0 91 7f 00 	lds	r26, 0x007F
    2ac8:	b0 91 80 00 	lds	r27, 0x0080
    2acc:	01 96       	adiw	r24, 0x01	; 1
    2ace:	a1 1d       	adc	r26, r1
    2ad0:	b1 1d       	adc	r27, r1
    2ad2:	80 93 7d 00 	sts	0x007D, r24
    2ad6:	90 93 7e 00 	sts	0x007E, r25
    2ada:	a0 93 7f 00 	sts	0x007F, r26
    2ade:	b0 93 80 00 	sts	0x0080, r27

    /* Check for timeout */
    if (g_u32OverflowCount > ICU_MAX_OVERFLOWS)
    2ae2:	80 91 7d 00 	lds	r24, 0x007D
    2ae6:	90 91 7e 00 	lds	r25, 0x007E
    2aea:	a0 91 7f 00 	lds	r26, 0x007F
    2aee:	b0 91 80 00 	lds	r27, 0x0080
    2af2:	85 36       	cpi	r24, 0x65	; 101
    2af4:	91 05       	cpc	r25, r1
    2af6:	a1 05       	cpc	r26, r1
    2af8:	b1 05       	cpc	r27, r1
    2afa:	10 f0       	brcs	.+4      	; 0x2b00 <ICU_voidTimer0OverflowCallback+0x4c>
    {
        /* Timeout - reset measurement */
        ICU_voidReset();
    2afc:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <ICU_voidReset>
    }
}
    2b00:	cf 91       	pop	r28
    2b02:	df 91       	pop	r29
    2b04:	08 95       	ret

00002b06 <ICU_u32GetCurrentTime>:

static u32 ICU_u32GetCurrentTime(void)
{
    2b06:	ef 92       	push	r14
    2b08:	ff 92       	push	r15
    2b0a:	0f 93       	push	r16
    2b0c:	1f 93       	push	r17
    2b0e:	df 93       	push	r29
    2b10:	cf 93       	push	r28
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    /* Return current time as (overflows * 256) + current timer value */
    return (g_u32OverflowCount * 256) + TIMER0_vidGetCounterReg();
    2b16:	80 91 7d 00 	lds	r24, 0x007D
    2b1a:	90 91 7e 00 	lds	r25, 0x007E
    2b1e:	a0 91 7f 00 	lds	r26, 0x007F
    2b22:	b0 91 80 00 	lds	r27, 0x0080
    2b26:	ee 24       	eor	r14, r14
    2b28:	f8 2e       	mov	r15, r24
    2b2a:	09 2f       	mov	r16, r25
    2b2c:	1a 2f       	mov	r17, r26
    2b2e:	0e 94 1e 13 	call	0x263c	; 0x263c <TIMER0_vidGetCounterReg>
    2b32:	88 2f       	mov	r24, r24
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	a0 e0       	ldi	r26, 0x00	; 0
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	8e 0d       	add	r24, r14
    2b3c:	9f 1d       	adc	r25, r15
    2b3e:	a0 1f       	adc	r26, r16
    2b40:	b1 1f       	adc	r27, r17
}
    2b42:	bc 01       	movw	r22, r24
    2b44:	cd 01       	movw	r24, r26
    2b46:	cf 91       	pop	r28
    2b48:	df 91       	pop	r29
    2b4a:	1f 91       	pop	r17
    2b4c:	0f 91       	pop	r16
    2b4e:	ff 90       	pop	r15
    2b50:	ef 90       	pop	r14
    2b52:	08 95       	ret

00002b54 <DIO_vidSetPinDir>:




void DIO_vidSetPinDir(u8 u8PortId , u8 u8PinId , u8 u8PinDir)
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	cd b7       	in	r28, 0x3d	; 61
    2b5a:	de b7       	in	r29, 0x3e	; 62
    2b5c:	27 97       	sbiw	r28, 0x07	; 7
    2b5e:	0f b6       	in	r0, 0x3f	; 63
    2b60:	f8 94       	cli
    2b62:	de bf       	out	0x3e, r29	; 62
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	cd bf       	out	0x3d, r28	; 61
    2b68:	89 83       	std	Y+1, r24	; 0x01
    2b6a:	6a 83       	std	Y+2, r22	; 0x02
    2b6c:	4b 83       	std	Y+3, r20	; 0x03
	if ((u8PortId <= DIO_PORTD)&&(u8PinId <= DIO_PIN7))
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	84 30       	cpi	r24, 0x04	; 4
    2b72:	08 f0       	brcs	.+2      	; 0x2b76 <DIO_vidSetPinDir+0x22>
    2b74:	ee c0       	rjmp	.+476    	; 0x2d52 <DIO_vidSetPinDir+0x1fe>
    2b76:	8a 81       	ldd	r24, Y+2	; 0x02
    2b78:	88 30       	cpi	r24, 0x08	; 8
    2b7a:	08 f0       	brcs	.+2      	; 0x2b7e <DIO_vidSetPinDir+0x2a>
    2b7c:	ea c0       	rjmp	.+468    	; 0x2d52 <DIO_vidSetPinDir+0x1fe>
	{
		if(u8PinDir == DIO_OUTPUT)
    2b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b80:	8f 3f       	cpi	r24, 0xFF	; 255
    2b82:	09 f0       	breq	.+2      	; 0x2b86 <DIO_vidSetPinDir+0x32>
    2b84:	6f c0       	rjmp	.+222    	; 0x2c64 <DIO_vidSetPinDir+0x110>
		{
			switch(u8PortId)
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	28 2f       	mov	r18, r24
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	3f 83       	std	Y+7, r19	; 0x07
    2b8e:	2e 83       	std	Y+6, r18	; 0x06
    2b90:	8e 81       	ldd	r24, Y+6	; 0x06
    2b92:	9f 81       	ldd	r25, Y+7	; 0x07
    2b94:	81 30       	cpi	r24, 0x01	; 1
    2b96:	91 05       	cpc	r25, r1
    2b98:	49 f1       	breq	.+82     	; 0x2bec <DIO_vidSetPinDir+0x98>
    2b9a:	2e 81       	ldd	r18, Y+6	; 0x06
    2b9c:	3f 81       	ldd	r19, Y+7	; 0x07
    2b9e:	22 30       	cpi	r18, 0x02	; 2
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	2c f4       	brge	.+10     	; 0x2bae <DIO_vidSetPinDir+0x5a>
    2ba4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ba6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ba8:	00 97       	sbiw	r24, 0x00	; 0
    2baa:	61 f0       	breq	.+24     	; 0x2bc4 <DIO_vidSetPinDir+0x70>
    2bac:	d2 c0       	rjmp	.+420    	; 0x2d52 <DIO_vidSetPinDir+0x1fe>
    2bae:	2e 81       	ldd	r18, Y+6	; 0x06
    2bb0:	3f 81       	ldd	r19, Y+7	; 0x07
    2bb2:	22 30       	cpi	r18, 0x02	; 2
    2bb4:	31 05       	cpc	r19, r1
    2bb6:	71 f1       	breq	.+92     	; 0x2c14 <DIO_vidSetPinDir+0xc0>
    2bb8:	8e 81       	ldd	r24, Y+6	; 0x06
    2bba:	9f 81       	ldd	r25, Y+7	; 0x07
    2bbc:	83 30       	cpi	r24, 0x03	; 3
    2bbe:	91 05       	cpc	r25, r1
    2bc0:	e9 f1       	breq	.+122    	; 0x2c3c <DIO_vidSetPinDir+0xe8>
    2bc2:	c7 c0       	rjmp	.+398    	; 0x2d52 <DIO_vidSetPinDir+0x1fe>
			{
			case (DIO_PORTA) : SET_BIT(DDRA_REG , u8PinId); break;
    2bc4:	aa e3       	ldi	r26, 0x3A	; 58
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
    2bc8:	ea e3       	ldi	r30, 0x3A	; 58
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	48 2f       	mov	r20, r24
    2bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	02 2e       	mov	r0, r18
    2bdc:	02 c0       	rjmp	.+4      	; 0x2be2 <DIO_vidSetPinDir+0x8e>
    2bde:	88 0f       	add	r24, r24
    2be0:	99 1f       	adc	r25, r25
    2be2:	0a 94       	dec	r0
    2be4:	e2 f7       	brpl	.-8      	; 0x2bde <DIO_vidSetPinDir+0x8a>
    2be6:	84 2b       	or	r24, r20
    2be8:	8c 93       	st	X, r24
    2bea:	b3 c0       	rjmp	.+358    	; 0x2d52 <DIO_vidSetPinDir+0x1fe>
			case (DIO_PORTB) : SET_BIT(DDRB_REG , u8PinId); break;
    2bec:	a7 e3       	ldi	r26, 0x37	; 55
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	e7 e3       	ldi	r30, 0x37	; 55
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	48 2f       	mov	r20, r24
    2bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	02 2e       	mov	r0, r18
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <DIO_vidSetPinDir+0xb6>
    2c06:	88 0f       	add	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	0a 94       	dec	r0
    2c0c:	e2 f7       	brpl	.-8      	; 0x2c06 <DIO_vidSetPinDir+0xb2>
    2c0e:	84 2b       	or	r24, r20
    2c10:	8c 93       	st	X, r24
    2c12:	9f c0       	rjmp	.+318    	; 0x2d52 <DIO_vidSetPinDir+0x1fe>
			case (DIO_PORTC) : SET_BIT(DDRC_REG , u8PinId); break;
    2c14:	a4 e3       	ldi	r26, 0x34	; 52
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	e4 e3       	ldi	r30, 0x34	; 52
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	48 2f       	mov	r20, r24
    2c20:	8a 81       	ldd	r24, Y+2	; 0x02
    2c22:	28 2f       	mov	r18, r24
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	02 2e       	mov	r0, r18
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <DIO_vidSetPinDir+0xde>
    2c2e:	88 0f       	add	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	0a 94       	dec	r0
    2c34:	e2 f7       	brpl	.-8      	; 0x2c2e <DIO_vidSetPinDir+0xda>
    2c36:	84 2b       	or	r24, r20
    2c38:	8c 93       	st	X, r24
    2c3a:	8b c0       	rjmp	.+278    	; 0x2d52 <DIO_vidSetPinDir+0x1fe>
			case (DIO_PORTD) : SET_BIT(DDRD_REG , u8PinId); break;
    2c3c:	a1 e3       	ldi	r26, 0x31	; 49
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	e1 e3       	ldi	r30, 0x31	; 49
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	48 2f       	mov	r20, r24
    2c48:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4a:	28 2f       	mov	r18, r24
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	02 2e       	mov	r0, r18
    2c54:	02 c0       	rjmp	.+4      	; 0x2c5a <DIO_vidSetPinDir+0x106>
    2c56:	88 0f       	add	r24, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	0a 94       	dec	r0
    2c5c:	e2 f7       	brpl	.-8      	; 0x2c56 <DIO_vidSetPinDir+0x102>
    2c5e:	84 2b       	or	r24, r20
    2c60:	8c 93       	st	X, r24
    2c62:	77 c0       	rjmp	.+238    	; 0x2d52 <DIO_vidSetPinDir+0x1fe>
			}
		}
		else if(u8PinDir == DIO_INPUT)
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	88 23       	and	r24, r24
    2c68:	09 f0       	breq	.+2      	; 0x2c6c <DIO_vidSetPinDir+0x118>
    2c6a:	73 c0       	rjmp	.+230    	; 0x2d52 <DIO_vidSetPinDir+0x1fe>
		{
			switch(u8PortId)
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	28 2f       	mov	r18, r24
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	3d 83       	std	Y+5, r19	; 0x05
    2c74:	2c 83       	std	Y+4, r18	; 0x04
    2c76:	8c 81       	ldd	r24, Y+4	; 0x04
    2c78:	9d 81       	ldd	r25, Y+5	; 0x05
    2c7a:	81 30       	cpi	r24, 0x01	; 1
    2c7c:	91 05       	cpc	r25, r1
    2c7e:	59 f1       	breq	.+86     	; 0x2cd6 <DIO_vidSetPinDir+0x182>
    2c80:	2c 81       	ldd	r18, Y+4	; 0x04
    2c82:	3d 81       	ldd	r19, Y+5	; 0x05
    2c84:	22 30       	cpi	r18, 0x02	; 2
    2c86:	31 05       	cpc	r19, r1
    2c88:	2c f4       	brge	.+10     	; 0x2c94 <DIO_vidSetPinDir+0x140>
    2c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	69 f0       	breq	.+26     	; 0x2cac <DIO_vidSetPinDir+0x158>
    2c92:	5f c0       	rjmp	.+190    	; 0x2d52 <DIO_vidSetPinDir+0x1fe>
    2c94:	2c 81       	ldd	r18, Y+4	; 0x04
    2c96:	3d 81       	ldd	r19, Y+5	; 0x05
    2c98:	22 30       	cpi	r18, 0x02	; 2
    2c9a:	31 05       	cpc	r19, r1
    2c9c:	89 f1       	breq	.+98     	; 0x2d00 <DIO_vidSetPinDir+0x1ac>
    2c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca2:	83 30       	cpi	r24, 0x03	; 3
    2ca4:	91 05       	cpc	r25, r1
    2ca6:	09 f4       	brne	.+2      	; 0x2caa <DIO_vidSetPinDir+0x156>
    2ca8:	40 c0       	rjmp	.+128    	; 0x2d2a <DIO_vidSetPinDir+0x1d6>
    2caa:	53 c0       	rjmp	.+166    	; 0x2d52 <DIO_vidSetPinDir+0x1fe>
			{
			case (DIO_PORTA) : CLR_BIT(DDRA_REG , u8PinId); break;
    2cac:	aa e3       	ldi	r26, 0x3A	; 58
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	ea e3       	ldi	r30, 0x3A	; 58
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	48 2f       	mov	r20, r24
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	28 2f       	mov	r18, r24
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	02 2e       	mov	r0, r18
    2cc4:	02 c0       	rjmp	.+4      	; 0x2cca <DIO_vidSetPinDir+0x176>
    2cc6:	88 0f       	add	r24, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	0a 94       	dec	r0
    2ccc:	e2 f7       	brpl	.-8      	; 0x2cc6 <DIO_vidSetPinDir+0x172>
    2cce:	80 95       	com	r24
    2cd0:	84 23       	and	r24, r20
    2cd2:	8c 93       	st	X, r24
    2cd4:	3e c0       	rjmp	.+124    	; 0x2d52 <DIO_vidSetPinDir+0x1fe>
			case (DIO_PORTB) : CLR_BIT(DDRB_REG , u8PinId); break;
    2cd6:	a7 e3       	ldi	r26, 0x37	; 55
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	e7 e3       	ldi	r30, 0x37	; 55
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 81       	ld	r24, Z
    2ce0:	48 2f       	mov	r20, r24
    2ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce4:	28 2f       	mov	r18, r24
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	02 2e       	mov	r0, r18
    2cee:	02 c0       	rjmp	.+4      	; 0x2cf4 <DIO_vidSetPinDir+0x1a0>
    2cf0:	88 0f       	add	r24, r24
    2cf2:	99 1f       	adc	r25, r25
    2cf4:	0a 94       	dec	r0
    2cf6:	e2 f7       	brpl	.-8      	; 0x2cf0 <DIO_vidSetPinDir+0x19c>
    2cf8:	80 95       	com	r24
    2cfa:	84 23       	and	r24, r20
    2cfc:	8c 93       	st	X, r24
    2cfe:	29 c0       	rjmp	.+82     	; 0x2d52 <DIO_vidSetPinDir+0x1fe>
			case (DIO_PORTC) : CLR_BIT(DDRC_REG , u8PinId); break;
    2d00:	a4 e3       	ldi	r26, 0x34	; 52
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	e4 e3       	ldi	r30, 0x34	; 52
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	48 2f       	mov	r20, r24
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	28 2f       	mov	r18, r24
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	02 2e       	mov	r0, r18
    2d18:	02 c0       	rjmp	.+4      	; 0x2d1e <DIO_vidSetPinDir+0x1ca>
    2d1a:	88 0f       	add	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	0a 94       	dec	r0
    2d20:	e2 f7       	brpl	.-8      	; 0x2d1a <DIO_vidSetPinDir+0x1c6>
    2d22:	80 95       	com	r24
    2d24:	84 23       	and	r24, r20
    2d26:	8c 93       	st	X, r24
    2d28:	14 c0       	rjmp	.+40     	; 0x2d52 <DIO_vidSetPinDir+0x1fe>
			case (DIO_PORTD) : CLR_BIT(DDRD_REG , u8PinId); break;
    2d2a:	a1 e3       	ldi	r26, 0x31	; 49
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	e1 e3       	ldi	r30, 0x31	; 49
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	48 2f       	mov	r20, r24
    2d36:	8a 81       	ldd	r24, Y+2	; 0x02
    2d38:	28 2f       	mov	r18, r24
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	02 2e       	mov	r0, r18
    2d42:	02 c0       	rjmp	.+4      	; 0x2d48 <DIO_vidSetPinDir+0x1f4>
    2d44:	88 0f       	add	r24, r24
    2d46:	99 1f       	adc	r25, r25
    2d48:	0a 94       	dec	r0
    2d4a:	e2 f7       	brpl	.-8      	; 0x2d44 <DIO_vidSetPinDir+0x1f0>
    2d4c:	80 95       	com	r24
    2d4e:	84 23       	and	r24, r20
    2d50:	8c 93       	st	X, r24
			}
		}
		else{/* wrong Pin Direction */}
	}
	else{/* wrong PortId OR PinId  */}
}
    2d52:	27 96       	adiw	r28, 0x07	; 7
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <DIO_vidSetPinVal>:

void DIO_vidSetPinVal(u8 u8PortId , u8 u8PinId , u8 u8PinVal){
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	27 97       	sbiw	r28, 0x07	; 7
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	89 83       	std	Y+1, r24	; 0x01
    2d7a:	6a 83       	std	Y+2, r22	; 0x02
    2d7c:	4b 83       	std	Y+3, r20	; 0x03
	if ((u8PortId <= DIO_PORTD)&&(u8PinId <= DIO_PIN7))
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	84 30       	cpi	r24, 0x04	; 4
    2d82:	08 f0       	brcs	.+2      	; 0x2d86 <DIO_vidSetPinVal+0x22>
    2d84:	ee c0       	rjmp	.+476    	; 0x2f62 <DIO_vidSetPinVal+0x1fe>
    2d86:	8a 81       	ldd	r24, Y+2	; 0x02
    2d88:	88 30       	cpi	r24, 0x08	; 8
    2d8a:	08 f0       	brcs	.+2      	; 0x2d8e <DIO_vidSetPinVal+0x2a>
    2d8c:	ea c0       	rjmp	.+468    	; 0x2f62 <DIO_vidSetPinVal+0x1fe>
	{
		if(u8PinVal == DIO_HIGH)
    2d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d90:	8f 3f       	cpi	r24, 0xFF	; 255
    2d92:	09 f0       	breq	.+2      	; 0x2d96 <DIO_vidSetPinVal+0x32>
    2d94:	6f c0       	rjmp	.+222    	; 0x2e74 <DIO_vidSetPinVal+0x110>
		{
			switch(u8PortId)
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	28 2f       	mov	r18, r24
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	3f 83       	std	Y+7, r19	; 0x07
    2d9e:	2e 83       	std	Y+6, r18	; 0x06
    2da0:	8e 81       	ldd	r24, Y+6	; 0x06
    2da2:	9f 81       	ldd	r25, Y+7	; 0x07
    2da4:	81 30       	cpi	r24, 0x01	; 1
    2da6:	91 05       	cpc	r25, r1
    2da8:	49 f1       	breq	.+82     	; 0x2dfc <DIO_vidSetPinVal+0x98>
    2daa:	2e 81       	ldd	r18, Y+6	; 0x06
    2dac:	3f 81       	ldd	r19, Y+7	; 0x07
    2dae:	22 30       	cpi	r18, 0x02	; 2
    2db0:	31 05       	cpc	r19, r1
    2db2:	2c f4       	brge	.+10     	; 0x2dbe <DIO_vidSetPinVal+0x5a>
    2db4:	8e 81       	ldd	r24, Y+6	; 0x06
    2db6:	9f 81       	ldd	r25, Y+7	; 0x07
    2db8:	00 97       	sbiw	r24, 0x00	; 0
    2dba:	61 f0       	breq	.+24     	; 0x2dd4 <DIO_vidSetPinVal+0x70>
    2dbc:	d2 c0       	rjmp	.+420    	; 0x2f62 <DIO_vidSetPinVal+0x1fe>
    2dbe:	2e 81       	ldd	r18, Y+6	; 0x06
    2dc0:	3f 81       	ldd	r19, Y+7	; 0x07
    2dc2:	22 30       	cpi	r18, 0x02	; 2
    2dc4:	31 05       	cpc	r19, r1
    2dc6:	71 f1       	breq	.+92     	; 0x2e24 <DIO_vidSetPinVal+0xc0>
    2dc8:	8e 81       	ldd	r24, Y+6	; 0x06
    2dca:	9f 81       	ldd	r25, Y+7	; 0x07
    2dcc:	83 30       	cpi	r24, 0x03	; 3
    2dce:	91 05       	cpc	r25, r1
    2dd0:	e9 f1       	breq	.+122    	; 0x2e4c <DIO_vidSetPinVal+0xe8>
    2dd2:	c7 c0       	rjmp	.+398    	; 0x2f62 <DIO_vidSetPinVal+0x1fe>
			{
			case (DIO_PORTA) : SET_BIT(PORTA_REG , u8PinId); break;
    2dd4:	ab e3       	ldi	r26, 0x3B	; 59
    2dd6:	b0 e0       	ldi	r27, 0x00	; 0
    2dd8:	eb e3       	ldi	r30, 0x3B	; 59
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	80 81       	ld	r24, Z
    2dde:	48 2f       	mov	r20, r24
    2de0:	8a 81       	ldd	r24, Y+2	; 0x02
    2de2:	28 2f       	mov	r18, r24
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	02 2e       	mov	r0, r18
    2dec:	02 c0       	rjmp	.+4      	; 0x2df2 <DIO_vidSetPinVal+0x8e>
    2dee:	88 0f       	add	r24, r24
    2df0:	99 1f       	adc	r25, r25
    2df2:	0a 94       	dec	r0
    2df4:	e2 f7       	brpl	.-8      	; 0x2dee <DIO_vidSetPinVal+0x8a>
    2df6:	84 2b       	or	r24, r20
    2df8:	8c 93       	st	X, r24
    2dfa:	b3 c0       	rjmp	.+358    	; 0x2f62 <DIO_vidSetPinVal+0x1fe>
			case (DIO_PORTB) : SET_BIT(PORTB_REG , u8PinId); break;
    2dfc:	a8 e3       	ldi	r26, 0x38	; 56
    2dfe:	b0 e0       	ldi	r27, 0x00	; 0
    2e00:	e8 e3       	ldi	r30, 0x38	; 56
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	80 81       	ld	r24, Z
    2e06:	48 2f       	mov	r20, r24
    2e08:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0a:	28 2f       	mov	r18, r24
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	02 2e       	mov	r0, r18
    2e14:	02 c0       	rjmp	.+4      	; 0x2e1a <DIO_vidSetPinVal+0xb6>
    2e16:	88 0f       	add	r24, r24
    2e18:	99 1f       	adc	r25, r25
    2e1a:	0a 94       	dec	r0
    2e1c:	e2 f7       	brpl	.-8      	; 0x2e16 <DIO_vidSetPinVal+0xb2>
    2e1e:	84 2b       	or	r24, r20
    2e20:	8c 93       	st	X, r24
    2e22:	9f c0       	rjmp	.+318    	; 0x2f62 <DIO_vidSetPinVal+0x1fe>
			case (DIO_PORTC) : SET_BIT(PORTC_REG , u8PinId); break;
    2e24:	a5 e3       	ldi	r26, 0x35	; 53
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	e5 e3       	ldi	r30, 0x35	; 53
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	80 81       	ld	r24, Z
    2e2e:	48 2f       	mov	r20, r24
    2e30:	8a 81       	ldd	r24, Y+2	; 0x02
    2e32:	28 2f       	mov	r18, r24
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	02 2e       	mov	r0, r18
    2e3c:	02 c0       	rjmp	.+4      	; 0x2e42 <DIO_vidSetPinVal+0xde>
    2e3e:	88 0f       	add	r24, r24
    2e40:	99 1f       	adc	r25, r25
    2e42:	0a 94       	dec	r0
    2e44:	e2 f7       	brpl	.-8      	; 0x2e3e <DIO_vidSetPinVal+0xda>
    2e46:	84 2b       	or	r24, r20
    2e48:	8c 93       	st	X, r24
    2e4a:	8b c0       	rjmp	.+278    	; 0x2f62 <DIO_vidSetPinVal+0x1fe>
			case (DIO_PORTD) : SET_BIT(PORTD_REG , u8PinId); break;
    2e4c:	a2 e3       	ldi	r26, 0x32	; 50
    2e4e:	b0 e0       	ldi	r27, 0x00	; 0
    2e50:	e2 e3       	ldi	r30, 0x32	; 50
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 81       	ld	r24, Z
    2e56:	48 2f       	mov	r20, r24
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	02 2e       	mov	r0, r18
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <DIO_vidSetPinVal+0x106>
    2e66:	88 0f       	add	r24, r24
    2e68:	99 1f       	adc	r25, r25
    2e6a:	0a 94       	dec	r0
    2e6c:	e2 f7       	brpl	.-8      	; 0x2e66 <DIO_vidSetPinVal+0x102>
    2e6e:	84 2b       	or	r24, r20
    2e70:	8c 93       	st	X, r24
    2e72:	77 c0       	rjmp	.+238    	; 0x2f62 <DIO_vidSetPinVal+0x1fe>
			}
		}
		else if(u8PinVal == DIO_INPUT)
    2e74:	8b 81       	ldd	r24, Y+3	; 0x03
    2e76:	88 23       	and	r24, r24
    2e78:	09 f0       	breq	.+2      	; 0x2e7c <DIO_vidSetPinVal+0x118>
    2e7a:	73 c0       	rjmp	.+230    	; 0x2f62 <DIO_vidSetPinVal+0x1fe>
		{
			switch(u8PortId)
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	28 2f       	mov	r18, r24
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	3d 83       	std	Y+5, r19	; 0x05
    2e84:	2c 83       	std	Y+4, r18	; 0x04
    2e86:	8c 81       	ldd	r24, Y+4	; 0x04
    2e88:	9d 81       	ldd	r25, Y+5	; 0x05
    2e8a:	81 30       	cpi	r24, 0x01	; 1
    2e8c:	91 05       	cpc	r25, r1
    2e8e:	59 f1       	breq	.+86     	; 0x2ee6 <DIO_vidSetPinVal+0x182>
    2e90:	2c 81       	ldd	r18, Y+4	; 0x04
    2e92:	3d 81       	ldd	r19, Y+5	; 0x05
    2e94:	22 30       	cpi	r18, 0x02	; 2
    2e96:	31 05       	cpc	r19, r1
    2e98:	2c f4       	brge	.+10     	; 0x2ea4 <DIO_vidSetPinVal+0x140>
    2e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e9e:	00 97       	sbiw	r24, 0x00	; 0
    2ea0:	69 f0       	breq	.+26     	; 0x2ebc <DIO_vidSetPinVal+0x158>
    2ea2:	5f c0       	rjmp	.+190    	; 0x2f62 <DIO_vidSetPinVal+0x1fe>
    2ea4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ea6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ea8:	22 30       	cpi	r18, 0x02	; 2
    2eaa:	31 05       	cpc	r19, r1
    2eac:	89 f1       	breq	.+98     	; 0x2f10 <DIO_vidSetPinVal+0x1ac>
    2eae:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb2:	83 30       	cpi	r24, 0x03	; 3
    2eb4:	91 05       	cpc	r25, r1
    2eb6:	09 f4       	brne	.+2      	; 0x2eba <DIO_vidSetPinVal+0x156>
    2eb8:	40 c0       	rjmp	.+128    	; 0x2f3a <DIO_vidSetPinVal+0x1d6>
    2eba:	53 c0       	rjmp	.+166    	; 0x2f62 <DIO_vidSetPinVal+0x1fe>
			{
			case (DIO_PORTA) : CLR_BIT(PORTA_REG , u8PinId); break;
    2ebc:	ab e3       	ldi	r26, 0x3B	; 59
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	eb e3       	ldi	r30, 0x3B	; 59
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	48 2f       	mov	r20, r24
    2ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eca:	28 2f       	mov	r18, r24
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	02 2e       	mov	r0, r18
    2ed4:	02 c0       	rjmp	.+4      	; 0x2eda <DIO_vidSetPinVal+0x176>
    2ed6:	88 0f       	add	r24, r24
    2ed8:	99 1f       	adc	r25, r25
    2eda:	0a 94       	dec	r0
    2edc:	e2 f7       	brpl	.-8      	; 0x2ed6 <DIO_vidSetPinVal+0x172>
    2ede:	80 95       	com	r24
    2ee0:	84 23       	and	r24, r20
    2ee2:	8c 93       	st	X, r24
    2ee4:	3e c0       	rjmp	.+124    	; 0x2f62 <DIO_vidSetPinVal+0x1fe>
			case (DIO_PORTB) : CLR_BIT(PORTB_REG , u8PinId); break;
    2ee6:	a8 e3       	ldi	r26, 0x38	; 56
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	e8 e3       	ldi	r30, 0x38	; 56
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	48 2f       	mov	r20, r24
    2ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	02 2e       	mov	r0, r18
    2efe:	02 c0       	rjmp	.+4      	; 0x2f04 <DIO_vidSetPinVal+0x1a0>
    2f00:	88 0f       	add	r24, r24
    2f02:	99 1f       	adc	r25, r25
    2f04:	0a 94       	dec	r0
    2f06:	e2 f7       	brpl	.-8      	; 0x2f00 <DIO_vidSetPinVal+0x19c>
    2f08:	80 95       	com	r24
    2f0a:	84 23       	and	r24, r20
    2f0c:	8c 93       	st	X, r24
    2f0e:	29 c0       	rjmp	.+82     	; 0x2f62 <DIO_vidSetPinVal+0x1fe>
			case (DIO_PORTC) : CLR_BIT(PORTC_REG , u8PinId); break;
    2f10:	a5 e3       	ldi	r26, 0x35	; 53
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	e5 e3       	ldi	r30, 0x35	; 53
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	48 2f       	mov	r20, r24
    2f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1e:	28 2f       	mov	r18, r24
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	02 2e       	mov	r0, r18
    2f28:	02 c0       	rjmp	.+4      	; 0x2f2e <DIO_vidSetPinVal+0x1ca>
    2f2a:	88 0f       	add	r24, r24
    2f2c:	99 1f       	adc	r25, r25
    2f2e:	0a 94       	dec	r0
    2f30:	e2 f7       	brpl	.-8      	; 0x2f2a <DIO_vidSetPinVal+0x1c6>
    2f32:	80 95       	com	r24
    2f34:	84 23       	and	r24, r20
    2f36:	8c 93       	st	X, r24
    2f38:	14 c0       	rjmp	.+40     	; 0x2f62 <DIO_vidSetPinVal+0x1fe>
			case (DIO_PORTD) : CLR_BIT(PORTD_REG , u8PinId); break;
    2f3a:	a2 e3       	ldi	r26, 0x32	; 50
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	e2 e3       	ldi	r30, 0x32	; 50
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	80 81       	ld	r24, Z
    2f44:	48 2f       	mov	r20, r24
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	28 2f       	mov	r18, r24
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	02 2e       	mov	r0, r18
    2f52:	02 c0       	rjmp	.+4      	; 0x2f58 <DIO_vidSetPinVal+0x1f4>
    2f54:	88 0f       	add	r24, r24
    2f56:	99 1f       	adc	r25, r25
    2f58:	0a 94       	dec	r0
    2f5a:	e2 f7       	brpl	.-8      	; 0x2f54 <DIO_vidSetPinVal+0x1f0>
    2f5c:	80 95       	com	r24
    2f5e:	84 23       	and	r24, r20
    2f60:	8c 93       	st	X, r24
		else{/* wrong Pin Value */}

	}
	else{/* wrong PortId OR PinId  */}

}
    2f62:	27 96       	adiw	r28, 0x07	; 7
    2f64:	0f b6       	in	r0, 0x3f	; 63
    2f66:	f8 94       	cli
    2f68:	de bf       	out	0x3e, r29	; 62
    2f6a:	0f be       	out	0x3f, r0	; 63
    2f6c:	cd bf       	out	0x3d, r28	; 61
    2f6e:	cf 91       	pop	r28
    2f70:	df 91       	pop	r29
    2f72:	08 95       	ret

00002f74 <DIO_vidTogglePinVal>:

void DIO_vidTogglePinVal(u8 u8PortId , u8 u8PinId)
{
    2f74:	df 93       	push	r29
    2f76:	cf 93       	push	r28
    2f78:	00 d0       	rcall	.+0      	; 0x2f7a <DIO_vidTogglePinVal+0x6>
    2f7a:	00 d0       	rcall	.+0      	; 0x2f7c <DIO_vidTogglePinVal+0x8>
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	89 83       	std	Y+1, r24	; 0x01
    2f82:	6a 83       	std	Y+2, r22	; 0x02
	if ((u8PortId <= DIO_PORTD)&&(u8PinId <= DIO_PIN7))
    2f84:	89 81       	ldd	r24, Y+1	; 0x01
    2f86:	84 30       	cpi	r24, 0x04	; 4
    2f88:	08 f0       	brcs	.+2      	; 0x2f8c <DIO_vidTogglePinVal+0x18>
    2f8a:	72 c0       	rjmp	.+228    	; 0x3070 <DIO_vidTogglePinVal+0xfc>
    2f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8e:	88 30       	cpi	r24, 0x08	; 8
    2f90:	08 f0       	brcs	.+2      	; 0x2f94 <DIO_vidTogglePinVal+0x20>
    2f92:	6e c0       	rjmp	.+220    	; 0x3070 <DIO_vidTogglePinVal+0xfc>
	{
		switch(u8PortId)
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	28 2f       	mov	r18, r24
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	3c 83       	std	Y+4, r19	; 0x04
    2f9c:	2b 83       	std	Y+3, r18	; 0x03
    2f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa2:	81 30       	cpi	r24, 0x01	; 1
    2fa4:	91 05       	cpc	r25, r1
    2fa6:	49 f1       	breq	.+82     	; 0x2ffa <DIO_vidTogglePinVal+0x86>
    2fa8:	2b 81       	ldd	r18, Y+3	; 0x03
    2faa:	3c 81       	ldd	r19, Y+4	; 0x04
    2fac:	22 30       	cpi	r18, 0x02	; 2
    2fae:	31 05       	cpc	r19, r1
    2fb0:	2c f4       	brge	.+10     	; 0x2fbc <DIO_vidTogglePinVal+0x48>
    2fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb6:	00 97       	sbiw	r24, 0x00	; 0
    2fb8:	61 f0       	breq	.+24     	; 0x2fd2 <DIO_vidTogglePinVal+0x5e>
    2fba:	5a c0       	rjmp	.+180    	; 0x3070 <DIO_vidTogglePinVal+0xfc>
    2fbc:	2b 81       	ldd	r18, Y+3	; 0x03
    2fbe:	3c 81       	ldd	r19, Y+4	; 0x04
    2fc0:	22 30       	cpi	r18, 0x02	; 2
    2fc2:	31 05       	cpc	r19, r1
    2fc4:	71 f1       	breq	.+92     	; 0x3022 <DIO_vidTogglePinVal+0xae>
    2fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fca:	83 30       	cpi	r24, 0x03	; 3
    2fcc:	91 05       	cpc	r25, r1
    2fce:	e9 f1       	breq	.+122    	; 0x304a <DIO_vidTogglePinVal+0xd6>
    2fd0:	4f c0       	rjmp	.+158    	; 0x3070 <DIO_vidTogglePinVal+0xfc>
		{
		case (DIO_PORTA) : TOG_BIT(PORTA_REG , u8PinId); break;
    2fd2:	ab e3       	ldi	r26, 0x3B	; 59
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	eb e3       	ldi	r30, 0x3B	; 59
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	48 2f       	mov	r20, r24
    2fde:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe0:	28 2f       	mov	r18, r24
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	02 2e       	mov	r0, r18
    2fea:	02 c0       	rjmp	.+4      	; 0x2ff0 <DIO_vidTogglePinVal+0x7c>
    2fec:	88 0f       	add	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	0a 94       	dec	r0
    2ff2:	e2 f7       	brpl	.-8      	; 0x2fec <DIO_vidTogglePinVal+0x78>
    2ff4:	84 27       	eor	r24, r20
    2ff6:	8c 93       	st	X, r24
    2ff8:	3b c0       	rjmp	.+118    	; 0x3070 <DIO_vidTogglePinVal+0xfc>
		case (DIO_PORTB) : TOG_BIT(PORTB_REG , u8PinId); break;
    2ffa:	a8 e3       	ldi	r26, 0x38	; 56
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	e8 e3       	ldi	r30, 0x38	; 56
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	80 81       	ld	r24, Z
    3004:	48 2f       	mov	r20, r24
    3006:	8a 81       	ldd	r24, Y+2	; 0x02
    3008:	28 2f       	mov	r18, r24
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	02 2e       	mov	r0, r18
    3012:	02 c0       	rjmp	.+4      	; 0x3018 <DIO_vidTogglePinVal+0xa4>
    3014:	88 0f       	add	r24, r24
    3016:	99 1f       	adc	r25, r25
    3018:	0a 94       	dec	r0
    301a:	e2 f7       	brpl	.-8      	; 0x3014 <DIO_vidTogglePinVal+0xa0>
    301c:	84 27       	eor	r24, r20
    301e:	8c 93       	st	X, r24
    3020:	27 c0       	rjmp	.+78     	; 0x3070 <DIO_vidTogglePinVal+0xfc>
		case (DIO_PORTC) : TOG_BIT(PORTC_REG , u8PinId); break;
    3022:	a5 e3       	ldi	r26, 0x35	; 53
    3024:	b0 e0       	ldi	r27, 0x00	; 0
    3026:	e5 e3       	ldi	r30, 0x35	; 53
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	80 81       	ld	r24, Z
    302c:	48 2f       	mov	r20, r24
    302e:	8a 81       	ldd	r24, Y+2	; 0x02
    3030:	28 2f       	mov	r18, r24
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	02 2e       	mov	r0, r18
    303a:	02 c0       	rjmp	.+4      	; 0x3040 <DIO_vidTogglePinVal+0xcc>
    303c:	88 0f       	add	r24, r24
    303e:	99 1f       	adc	r25, r25
    3040:	0a 94       	dec	r0
    3042:	e2 f7       	brpl	.-8      	; 0x303c <DIO_vidTogglePinVal+0xc8>
    3044:	84 27       	eor	r24, r20
    3046:	8c 93       	st	X, r24
    3048:	13 c0       	rjmp	.+38     	; 0x3070 <DIO_vidTogglePinVal+0xfc>
		case (DIO_PORTD) : TOG_BIT(PORTD_REG , u8PinId); break;
    304a:	a2 e3       	ldi	r26, 0x32	; 50
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	e2 e3       	ldi	r30, 0x32	; 50
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	48 2f       	mov	r20, r24
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	28 2f       	mov	r18, r24
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	02 2e       	mov	r0, r18
    3062:	02 c0       	rjmp	.+4      	; 0x3068 <DIO_vidTogglePinVal+0xf4>
    3064:	88 0f       	add	r24, r24
    3066:	99 1f       	adc	r25, r25
    3068:	0a 94       	dec	r0
    306a:	e2 f7       	brpl	.-8      	; 0x3064 <DIO_vidTogglePinVal+0xf0>
    306c:	84 27       	eor	r24, r20
    306e:	8c 93       	st	X, r24
		}
	}
	else{/* wrong PortId OR PinId  */}
}
    3070:	0f 90       	pop	r0
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	08 95       	ret

0000307e <DIO_vidEnablePullUpRes>:

/*Warning you can't use this function except you are sure that the pin is input*/
void DIO_vidEnablePullUpRes(u8 u8PortId , u8 u8PinId)
{
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	00 d0       	rcall	.+0      	; 0x3084 <DIO_vidEnablePullUpRes+0x6>
    3084:	00 d0       	rcall	.+0      	; 0x3086 <DIO_vidEnablePullUpRes+0x8>
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    308a:	89 83       	std	Y+1, r24	; 0x01
    308c:	6a 83       	std	Y+2, r22	; 0x02
	{
		if ((u8PortId <= DIO_PORTD)&&(u8PinId <= DIO_PIN7))
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	84 30       	cpi	r24, 0x04	; 4
    3092:	08 f0       	brcs	.+2      	; 0x3096 <DIO_vidEnablePullUpRes+0x18>
    3094:	72 c0       	rjmp	.+228    	; 0x317a <DIO_vidEnablePullUpRes+0xfc>
    3096:	8a 81       	ldd	r24, Y+2	; 0x02
    3098:	88 30       	cpi	r24, 0x08	; 8
    309a:	08 f0       	brcs	.+2      	; 0x309e <DIO_vidEnablePullUpRes+0x20>
    309c:	6e c0       	rjmp	.+220    	; 0x317a <DIO_vidEnablePullUpRes+0xfc>
		{
			switch(u8PortId)
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	28 2f       	mov	r18, r24
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	3c 83       	std	Y+4, r19	; 0x04
    30a6:	2b 83       	std	Y+3, r18	; 0x03
    30a8:	8b 81       	ldd	r24, Y+3	; 0x03
    30aa:	9c 81       	ldd	r25, Y+4	; 0x04
    30ac:	81 30       	cpi	r24, 0x01	; 1
    30ae:	91 05       	cpc	r25, r1
    30b0:	49 f1       	breq	.+82     	; 0x3104 <DIO_vidEnablePullUpRes+0x86>
    30b2:	2b 81       	ldd	r18, Y+3	; 0x03
    30b4:	3c 81       	ldd	r19, Y+4	; 0x04
    30b6:	22 30       	cpi	r18, 0x02	; 2
    30b8:	31 05       	cpc	r19, r1
    30ba:	2c f4       	brge	.+10     	; 0x30c6 <DIO_vidEnablePullUpRes+0x48>
    30bc:	8b 81       	ldd	r24, Y+3	; 0x03
    30be:	9c 81       	ldd	r25, Y+4	; 0x04
    30c0:	00 97       	sbiw	r24, 0x00	; 0
    30c2:	61 f0       	breq	.+24     	; 0x30dc <DIO_vidEnablePullUpRes+0x5e>
    30c4:	5a c0       	rjmp	.+180    	; 0x317a <DIO_vidEnablePullUpRes+0xfc>
    30c6:	2b 81       	ldd	r18, Y+3	; 0x03
    30c8:	3c 81       	ldd	r19, Y+4	; 0x04
    30ca:	22 30       	cpi	r18, 0x02	; 2
    30cc:	31 05       	cpc	r19, r1
    30ce:	71 f1       	breq	.+92     	; 0x312c <DIO_vidEnablePullUpRes+0xae>
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	9c 81       	ldd	r25, Y+4	; 0x04
    30d4:	83 30       	cpi	r24, 0x03	; 3
    30d6:	91 05       	cpc	r25, r1
    30d8:	e9 f1       	breq	.+122    	; 0x3154 <DIO_vidEnablePullUpRes+0xd6>
    30da:	4f c0       	rjmp	.+158    	; 0x317a <DIO_vidEnablePullUpRes+0xfc>
			{
			case (DIO_PORTA) : SET_BIT(PORTA_REG , u8PinId); break;
    30dc:	ab e3       	ldi	r26, 0x3B	; 59
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	eb e3       	ldi	r30, 0x3B	; 59
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	48 2f       	mov	r20, r24
    30e8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ea:	28 2f       	mov	r18, r24
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	02 2e       	mov	r0, r18
    30f4:	02 c0       	rjmp	.+4      	; 0x30fa <DIO_vidEnablePullUpRes+0x7c>
    30f6:	88 0f       	add	r24, r24
    30f8:	99 1f       	adc	r25, r25
    30fa:	0a 94       	dec	r0
    30fc:	e2 f7       	brpl	.-8      	; 0x30f6 <DIO_vidEnablePullUpRes+0x78>
    30fe:	84 2b       	or	r24, r20
    3100:	8c 93       	st	X, r24
    3102:	3b c0       	rjmp	.+118    	; 0x317a <DIO_vidEnablePullUpRes+0xfc>
			case (DIO_PORTB) : SET_BIT(PORTB_REG , u8PinId); break;
    3104:	a8 e3       	ldi	r26, 0x38	; 56
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	e8 e3       	ldi	r30, 0x38	; 56
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	48 2f       	mov	r20, r24
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	28 2f       	mov	r18, r24
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	02 2e       	mov	r0, r18
    311c:	02 c0       	rjmp	.+4      	; 0x3122 <DIO_vidEnablePullUpRes+0xa4>
    311e:	88 0f       	add	r24, r24
    3120:	99 1f       	adc	r25, r25
    3122:	0a 94       	dec	r0
    3124:	e2 f7       	brpl	.-8      	; 0x311e <DIO_vidEnablePullUpRes+0xa0>
    3126:	84 2b       	or	r24, r20
    3128:	8c 93       	st	X, r24
    312a:	27 c0       	rjmp	.+78     	; 0x317a <DIO_vidEnablePullUpRes+0xfc>
			case (DIO_PORTC) : SET_BIT(PORTC_REG , u8PinId); break;
    312c:	a5 e3       	ldi	r26, 0x35	; 53
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	e5 e3       	ldi	r30, 0x35	; 53
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	48 2f       	mov	r20, r24
    3138:	8a 81       	ldd	r24, Y+2	; 0x02
    313a:	28 2f       	mov	r18, r24
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	02 2e       	mov	r0, r18
    3144:	02 c0       	rjmp	.+4      	; 0x314a <DIO_vidEnablePullUpRes+0xcc>
    3146:	88 0f       	add	r24, r24
    3148:	99 1f       	adc	r25, r25
    314a:	0a 94       	dec	r0
    314c:	e2 f7       	brpl	.-8      	; 0x3146 <DIO_vidEnablePullUpRes+0xc8>
    314e:	84 2b       	or	r24, r20
    3150:	8c 93       	st	X, r24
    3152:	13 c0       	rjmp	.+38     	; 0x317a <DIO_vidEnablePullUpRes+0xfc>
			case (DIO_PORTD) : SET_BIT(PORTD_REG , u8PinId); break;
    3154:	a2 e3       	ldi	r26, 0x32	; 50
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	e2 e3       	ldi	r30, 0x32	; 50
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	48 2f       	mov	r20, r24
    3160:	8a 81       	ldd	r24, Y+2	; 0x02
    3162:	28 2f       	mov	r18, r24
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	02 2e       	mov	r0, r18
    316c:	02 c0       	rjmp	.+4      	; 0x3172 <DIO_vidEnablePullUpRes+0xf4>
    316e:	88 0f       	add	r24, r24
    3170:	99 1f       	adc	r25, r25
    3172:	0a 94       	dec	r0
    3174:	e2 f7       	brpl	.-8      	; 0x316e <DIO_vidEnablePullUpRes+0xf0>
    3176:	84 2b       	or	r24, r20
    3178:	8c 93       	st	X, r24
			}
		}
		else{/* wrong PortId OR PinId  */}
	}
}
    317a:	0f 90       	pop	r0
    317c:	0f 90       	pop	r0
    317e:	0f 90       	pop	r0
    3180:	0f 90       	pop	r0
    3182:	cf 91       	pop	r28
    3184:	df 91       	pop	r29
    3186:	08 95       	ret

00003188 <DIO_u8GetPinVal>:

/*this function will return only 0x01 OR 0x00*/
u8 DIO_u8GetPinVal(u8 u8PortId , u8 u8PinId)
{
    3188:	df 93       	push	r29
    318a:	cf 93       	push	r28
    318c:	00 d0       	rcall	.+0      	; 0x318e <DIO_u8GetPinVal+0x6>
    318e:	00 d0       	rcall	.+0      	; 0x3190 <DIO_u8GetPinVal+0x8>
    3190:	0f 92       	push	r0
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
    3196:	8a 83       	std	Y+2, r24	; 0x02
    3198:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8Result;
	if ((u8PortId <= DIO_PORTD)&&(u8PinId <= DIO_PIN7))
    319a:	8a 81       	ldd	r24, Y+2	; 0x02
    319c:	84 30       	cpi	r24, 0x04	; 4
    319e:	08 f0       	brcs	.+2      	; 0x31a2 <DIO_u8GetPinVal+0x1a>
    31a0:	6c c0       	rjmp	.+216    	; 0x327a <DIO_u8GetPinVal+0xf2>
    31a2:	8b 81       	ldd	r24, Y+3	; 0x03
    31a4:	88 30       	cpi	r24, 0x08	; 8
    31a6:	08 f0       	brcs	.+2      	; 0x31aa <DIO_u8GetPinVal+0x22>
    31a8:	68 c0       	rjmp	.+208    	; 0x327a <DIO_u8GetPinVal+0xf2>
	{
		switch(u8PortId)
    31aa:	8a 81       	ldd	r24, Y+2	; 0x02
    31ac:	28 2f       	mov	r18, r24
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	3d 83       	std	Y+5, r19	; 0x05
    31b2:	2c 83       	std	Y+4, r18	; 0x04
    31b4:	4c 81       	ldd	r20, Y+4	; 0x04
    31b6:	5d 81       	ldd	r21, Y+5	; 0x05
    31b8:	41 30       	cpi	r20, 0x01	; 1
    31ba:	51 05       	cpc	r21, r1
    31bc:	41 f1       	breq	.+80     	; 0x320e <DIO_u8GetPinVal+0x86>
    31be:	8c 81       	ldd	r24, Y+4	; 0x04
    31c0:	9d 81       	ldd	r25, Y+5	; 0x05
    31c2:	82 30       	cpi	r24, 0x02	; 2
    31c4:	91 05       	cpc	r25, r1
    31c6:	34 f4       	brge	.+12     	; 0x31d4 <DIO_u8GetPinVal+0x4c>
    31c8:	2c 81       	ldd	r18, Y+4	; 0x04
    31ca:	3d 81       	ldd	r19, Y+5	; 0x05
    31cc:	21 15       	cp	r18, r1
    31ce:	31 05       	cpc	r19, r1
    31d0:	61 f0       	breq	.+24     	; 0x31ea <DIO_u8GetPinVal+0x62>
    31d2:	55 c0       	rjmp	.+170    	; 0x327e <DIO_u8GetPinVal+0xf6>
    31d4:	4c 81       	ldd	r20, Y+4	; 0x04
    31d6:	5d 81       	ldd	r21, Y+5	; 0x05
    31d8:	42 30       	cpi	r20, 0x02	; 2
    31da:	51 05       	cpc	r21, r1
    31dc:	51 f1       	breq	.+84     	; 0x3232 <DIO_u8GetPinVal+0xaa>
    31de:	8c 81       	ldd	r24, Y+4	; 0x04
    31e0:	9d 81       	ldd	r25, Y+5	; 0x05
    31e2:	83 30       	cpi	r24, 0x03	; 3
    31e4:	91 05       	cpc	r25, r1
    31e6:	b9 f1       	breq	.+110    	; 0x3256 <DIO_u8GetPinVal+0xce>
    31e8:	4a c0       	rjmp	.+148    	; 0x327e <DIO_u8GetPinVal+0xf6>
		{
		case (DIO_PORTA) : u8Result = GET_BIT(PINA_REG , u8PinId); break;
    31ea:	e9 e3       	ldi	r30, 0x39	; 57
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	80 81       	ld	r24, Z
    31f0:	28 2f       	mov	r18, r24
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	8b 81       	ldd	r24, Y+3	; 0x03
    31f6:	88 2f       	mov	r24, r24
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	a9 01       	movw	r20, r18
    31fc:	02 c0       	rjmp	.+4      	; 0x3202 <DIO_u8GetPinVal+0x7a>
    31fe:	55 95       	asr	r21
    3200:	47 95       	ror	r20
    3202:	8a 95       	dec	r24
    3204:	e2 f7       	brpl	.-8      	; 0x31fe <DIO_u8GetPinVal+0x76>
    3206:	ca 01       	movw	r24, r20
    3208:	81 70       	andi	r24, 0x01	; 1
    320a:	89 83       	std	Y+1, r24	; 0x01
    320c:	38 c0       	rjmp	.+112    	; 0x327e <DIO_u8GetPinVal+0xf6>
		case (DIO_PORTB) : u8Result = GET_BIT(PINB_REG , u8PinId); break;
    320e:	e6 e3       	ldi	r30, 0x36	; 54
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	80 81       	ld	r24, Z
    3214:	28 2f       	mov	r18, r24
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	8b 81       	ldd	r24, Y+3	; 0x03
    321a:	88 2f       	mov	r24, r24
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	a9 01       	movw	r20, r18
    3220:	02 c0       	rjmp	.+4      	; 0x3226 <DIO_u8GetPinVal+0x9e>
    3222:	55 95       	asr	r21
    3224:	47 95       	ror	r20
    3226:	8a 95       	dec	r24
    3228:	e2 f7       	brpl	.-8      	; 0x3222 <DIO_u8GetPinVal+0x9a>
    322a:	ca 01       	movw	r24, r20
    322c:	81 70       	andi	r24, 0x01	; 1
    322e:	89 83       	std	Y+1, r24	; 0x01
    3230:	26 c0       	rjmp	.+76     	; 0x327e <DIO_u8GetPinVal+0xf6>
		case (DIO_PORTC) : u8Result = GET_BIT(PINC_REG , u8PinId); break;
    3232:	e3 e3       	ldi	r30, 0x33	; 51
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	80 81       	ld	r24, Z
    3238:	28 2f       	mov	r18, r24
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	8b 81       	ldd	r24, Y+3	; 0x03
    323e:	88 2f       	mov	r24, r24
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	a9 01       	movw	r20, r18
    3244:	02 c0       	rjmp	.+4      	; 0x324a <DIO_u8GetPinVal+0xc2>
    3246:	55 95       	asr	r21
    3248:	47 95       	ror	r20
    324a:	8a 95       	dec	r24
    324c:	e2 f7       	brpl	.-8      	; 0x3246 <DIO_u8GetPinVal+0xbe>
    324e:	ca 01       	movw	r24, r20
    3250:	81 70       	andi	r24, 0x01	; 1
    3252:	89 83       	std	Y+1, r24	; 0x01
    3254:	14 c0       	rjmp	.+40     	; 0x327e <DIO_u8GetPinVal+0xf6>
		case (DIO_PORTD) : u8Result = GET_BIT(PIND_REG , u8PinId); break;
    3256:	e0 e3       	ldi	r30, 0x30	; 48
    3258:	f0 e0       	ldi	r31, 0x00	; 0
    325a:	80 81       	ld	r24, Z
    325c:	28 2f       	mov	r18, r24
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	8b 81       	ldd	r24, Y+3	; 0x03
    3262:	88 2f       	mov	r24, r24
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	a9 01       	movw	r20, r18
    3268:	02 c0       	rjmp	.+4      	; 0x326e <DIO_u8GetPinVal+0xe6>
    326a:	55 95       	asr	r21
    326c:	47 95       	ror	r20
    326e:	8a 95       	dec	r24
    3270:	e2 f7       	brpl	.-8      	; 0x326a <DIO_u8GetPinVal+0xe2>
    3272:	ca 01       	movw	r24, r20
    3274:	81 70       	andi	r24, 0x01	; 1
    3276:	89 83       	std	Y+1, r24	; 0x01
    3278:	02 c0       	rjmp	.+4      	; 0x327e <DIO_u8GetPinVal+0xf6>
		}
	}
	else
	{/* wrong PortId OR PinId  */
		u8Result = DIO_UNDEFINED_VALUE;
    327a:	8f ef       	ldi	r24, 0xFF	; 255
    327c:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8Result;
    327e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	0f 90       	pop	r0
    3288:	0f 90       	pop	r0
    328a:	cf 91       	pop	r28
    328c:	df 91       	pop	r29
    328e:	08 95       	ret

00003290 <DIO_u8GetPortVal>:


u8 DIO_u8GetPortVal(u8 u8PortId )
{
    3290:	df 93       	push	r29
    3292:	cf 93       	push	r28
    3294:	00 d0       	rcall	.+0      	; 0x3296 <DIO_u8GetPortVal+0x6>
    3296:	00 d0       	rcall	.+0      	; 0x3298 <DIO_u8GetPortVal+0x8>
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
    329c:	8a 83       	std	Y+2, r24	; 0x02
	u8 u8Result;
	switch(u8PortId)
    329e:	8a 81       	ldd	r24, Y+2	; 0x02
    32a0:	28 2f       	mov	r18, r24
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	3c 83       	std	Y+4, r19	; 0x04
    32a6:	2b 83       	std	Y+3, r18	; 0x03
    32a8:	8b 81       	ldd	r24, Y+3	; 0x03
    32aa:	9c 81       	ldd	r25, Y+4	; 0x04
    32ac:	81 30       	cpi	r24, 0x01	; 1
    32ae:	91 05       	cpc	r25, r1
    32b0:	d1 f0       	breq	.+52     	; 0x32e6 <DIO_u8GetPortVal+0x56>
    32b2:	2b 81       	ldd	r18, Y+3	; 0x03
    32b4:	3c 81       	ldd	r19, Y+4	; 0x04
    32b6:	22 30       	cpi	r18, 0x02	; 2
    32b8:	31 05       	cpc	r19, r1
    32ba:	2c f4       	brge	.+10     	; 0x32c6 <DIO_u8GetPortVal+0x36>
    32bc:	8b 81       	ldd	r24, Y+3	; 0x03
    32be:	9c 81       	ldd	r25, Y+4	; 0x04
    32c0:	00 97       	sbiw	r24, 0x00	; 0
    32c2:	61 f0       	breq	.+24     	; 0x32dc <DIO_u8GetPortVal+0x4c>
    32c4:	1f c0       	rjmp	.+62     	; 0x3304 <DIO_u8GetPortVal+0x74>
    32c6:	2b 81       	ldd	r18, Y+3	; 0x03
    32c8:	3c 81       	ldd	r19, Y+4	; 0x04
    32ca:	22 30       	cpi	r18, 0x02	; 2
    32cc:	31 05       	cpc	r19, r1
    32ce:	81 f0       	breq	.+32     	; 0x32f0 <DIO_u8GetPortVal+0x60>
    32d0:	8b 81       	ldd	r24, Y+3	; 0x03
    32d2:	9c 81       	ldd	r25, Y+4	; 0x04
    32d4:	83 30       	cpi	r24, 0x03	; 3
    32d6:	91 05       	cpc	r25, r1
    32d8:	81 f0       	breq	.+32     	; 0x32fa <DIO_u8GetPortVal+0x6a>
    32da:	14 c0       	rjmp	.+40     	; 0x3304 <DIO_u8GetPortVal+0x74>
	{
	case (DIO_PORTA) : u8Result = PINA_REG ; break;
    32dc:	e9 e3       	ldi	r30, 0x39	; 57
    32de:	f0 e0       	ldi	r31, 0x00	; 0
    32e0:	80 81       	ld	r24, Z
    32e2:	89 83       	std	Y+1, r24	; 0x01
    32e4:	11 c0       	rjmp	.+34     	; 0x3308 <DIO_u8GetPortVal+0x78>
	case (DIO_PORTB) : u8Result = PINB_REG ; break;
    32e6:	e6 e3       	ldi	r30, 0x36	; 54
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
    32ec:	89 83       	std	Y+1, r24	; 0x01
    32ee:	0c c0       	rjmp	.+24     	; 0x3308 <DIO_u8GetPortVal+0x78>
	case (DIO_PORTC) : u8Result = PINC_REG ; break;
    32f0:	e3 e3       	ldi	r30, 0x33	; 51
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	80 81       	ld	r24, Z
    32f6:	89 83       	std	Y+1, r24	; 0x01
    32f8:	07 c0       	rjmp	.+14     	; 0x3308 <DIO_u8GetPortVal+0x78>
	case (DIO_PORTD) : u8Result = PIND_REG ; break;
    32fa:	e0 e3       	ldi	r30, 0x30	; 48
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	80 81       	ld	r24, Z
    3300:	89 83       	std	Y+1, r24	; 0x01
    3302:	02 c0       	rjmp	.+4      	; 0x3308 <DIO_u8GetPortVal+0x78>
	default :/* wrong PortId  */
		u8Result = DIO_UNDEFINED_VALUE;break;
    3304:	8f ef       	ldi	r24, 0xFF	; 255
    3306:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8Result;
    3308:	89 81       	ldd	r24, Y+1	; 0x01
}
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	08 95       	ret

00003318 <DIO_vidSetPortDir>:

void DIO_vidSetPortDir(u8 u8PortId , u8 u8PortDir)
{
    3318:	df 93       	push	r29
    331a:	cf 93       	push	r28
    331c:	00 d0       	rcall	.+0      	; 0x331e <DIO_vidSetPortDir+0x6>
    331e:	00 d0       	rcall	.+0      	; 0x3320 <DIO_vidSetPortDir+0x8>
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    3324:	89 83       	std	Y+1, r24	; 0x01
    3326:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortId)
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	28 2f       	mov	r18, r24
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	3c 83       	std	Y+4, r19	; 0x04
    3330:	2b 83       	std	Y+3, r18	; 0x03
    3332:	8b 81       	ldd	r24, Y+3	; 0x03
    3334:	9c 81       	ldd	r25, Y+4	; 0x04
    3336:	81 30       	cpi	r24, 0x01	; 1
    3338:	91 05       	cpc	r25, r1
    333a:	d1 f0       	breq	.+52     	; 0x3370 <DIO_vidSetPortDir+0x58>
    333c:	2b 81       	ldd	r18, Y+3	; 0x03
    333e:	3c 81       	ldd	r19, Y+4	; 0x04
    3340:	22 30       	cpi	r18, 0x02	; 2
    3342:	31 05       	cpc	r19, r1
    3344:	2c f4       	brge	.+10     	; 0x3350 <DIO_vidSetPortDir+0x38>
    3346:	8b 81       	ldd	r24, Y+3	; 0x03
    3348:	9c 81       	ldd	r25, Y+4	; 0x04
    334a:	00 97       	sbiw	r24, 0x00	; 0
    334c:	61 f0       	breq	.+24     	; 0x3366 <DIO_vidSetPortDir+0x4e>
    334e:	1e c0       	rjmp	.+60     	; 0x338c <DIO_vidSetPortDir+0x74>
    3350:	2b 81       	ldd	r18, Y+3	; 0x03
    3352:	3c 81       	ldd	r19, Y+4	; 0x04
    3354:	22 30       	cpi	r18, 0x02	; 2
    3356:	31 05       	cpc	r19, r1
    3358:	81 f0       	breq	.+32     	; 0x337a <DIO_vidSetPortDir+0x62>
    335a:	8b 81       	ldd	r24, Y+3	; 0x03
    335c:	9c 81       	ldd	r25, Y+4	; 0x04
    335e:	83 30       	cpi	r24, 0x03	; 3
    3360:	91 05       	cpc	r25, r1
    3362:	81 f0       	breq	.+32     	; 0x3384 <DIO_vidSetPortDir+0x6c>
    3364:	13 c0       	rjmp	.+38     	; 0x338c <DIO_vidSetPortDir+0x74>
	{
	case (DIO_PORTA) : DDRA_REG = u8PortDir; break;
    3366:	ea e3       	ldi	r30, 0x3A	; 58
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	8a 81       	ldd	r24, Y+2	; 0x02
    336c:	80 83       	st	Z, r24
    336e:	0e c0       	rjmp	.+28     	; 0x338c <DIO_vidSetPortDir+0x74>
	case (DIO_PORTB) : DDRB_REG = u8PortDir; break;
    3370:	e7 e3       	ldi	r30, 0x37	; 55
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	8a 81       	ldd	r24, Y+2	; 0x02
    3376:	80 83       	st	Z, r24
    3378:	09 c0       	rjmp	.+18     	; 0x338c <DIO_vidSetPortDir+0x74>
	case (DIO_PORTC) : DDRC_REG = u8PortDir; break;
    337a:	e4 e3       	ldi	r30, 0x34	; 52
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	8a 81       	ldd	r24, Y+2	; 0x02
    3380:	80 83       	st	Z, r24
    3382:	04 c0       	rjmp	.+8      	; 0x338c <DIO_vidSetPortDir+0x74>
	case (DIO_PORTD) : DDRD_REG = u8PortDir; break;
    3384:	e1 e3       	ldi	r30, 0x31	; 49
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	8a 81       	ldd	r24, Y+2	; 0x02
    338a:	80 83       	st	Z, r24
	default :/* wrong PortId OR PinId  */    break;
	}

}
    338c:	0f 90       	pop	r0
    338e:	0f 90       	pop	r0
    3390:	0f 90       	pop	r0
    3392:	0f 90       	pop	r0
    3394:	cf 91       	pop	r28
    3396:	df 91       	pop	r29
    3398:	08 95       	ret

0000339a <DIO_vidSetPortVal>:

void DIO_vidSetPortVal(u8 u8PortId , u8 u8PortVal)
{
    339a:	df 93       	push	r29
    339c:	cf 93       	push	r28
    339e:	00 d0       	rcall	.+0      	; 0x33a0 <DIO_vidSetPortVal+0x6>
    33a0:	00 d0       	rcall	.+0      	; 0x33a2 <DIO_vidSetPortVal+0x8>
    33a2:	cd b7       	in	r28, 0x3d	; 61
    33a4:	de b7       	in	r29, 0x3e	; 62
    33a6:	89 83       	std	Y+1, r24	; 0x01
    33a8:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortId)
    33aa:	89 81       	ldd	r24, Y+1	; 0x01
    33ac:	28 2f       	mov	r18, r24
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	3c 83       	std	Y+4, r19	; 0x04
    33b2:	2b 83       	std	Y+3, r18	; 0x03
    33b4:	8b 81       	ldd	r24, Y+3	; 0x03
    33b6:	9c 81       	ldd	r25, Y+4	; 0x04
    33b8:	81 30       	cpi	r24, 0x01	; 1
    33ba:	91 05       	cpc	r25, r1
    33bc:	d1 f0       	breq	.+52     	; 0x33f2 <DIO_vidSetPortVal+0x58>
    33be:	2b 81       	ldd	r18, Y+3	; 0x03
    33c0:	3c 81       	ldd	r19, Y+4	; 0x04
    33c2:	22 30       	cpi	r18, 0x02	; 2
    33c4:	31 05       	cpc	r19, r1
    33c6:	2c f4       	brge	.+10     	; 0x33d2 <DIO_vidSetPortVal+0x38>
    33c8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ca:	9c 81       	ldd	r25, Y+4	; 0x04
    33cc:	00 97       	sbiw	r24, 0x00	; 0
    33ce:	61 f0       	breq	.+24     	; 0x33e8 <DIO_vidSetPortVal+0x4e>
    33d0:	1e c0       	rjmp	.+60     	; 0x340e <DIO_vidSetPortVal+0x74>
    33d2:	2b 81       	ldd	r18, Y+3	; 0x03
    33d4:	3c 81       	ldd	r19, Y+4	; 0x04
    33d6:	22 30       	cpi	r18, 0x02	; 2
    33d8:	31 05       	cpc	r19, r1
    33da:	81 f0       	breq	.+32     	; 0x33fc <DIO_vidSetPortVal+0x62>
    33dc:	8b 81       	ldd	r24, Y+3	; 0x03
    33de:	9c 81       	ldd	r25, Y+4	; 0x04
    33e0:	83 30       	cpi	r24, 0x03	; 3
    33e2:	91 05       	cpc	r25, r1
    33e4:	81 f0       	breq	.+32     	; 0x3406 <DIO_vidSetPortVal+0x6c>
    33e6:	13 c0       	rjmp	.+38     	; 0x340e <DIO_vidSetPortVal+0x74>
	{
	case (DIO_PORTA) : PORTA_REG = u8PortVal; break;
    33e8:	eb e3       	ldi	r30, 0x3B	; 59
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	8a 81       	ldd	r24, Y+2	; 0x02
    33ee:	80 83       	st	Z, r24
    33f0:	0e c0       	rjmp	.+28     	; 0x340e <DIO_vidSetPortVal+0x74>
	case (DIO_PORTB) : PORTB_REG = u8PortVal; break;
    33f2:	e8 e3       	ldi	r30, 0x38	; 56
    33f4:	f0 e0       	ldi	r31, 0x00	; 0
    33f6:	8a 81       	ldd	r24, Y+2	; 0x02
    33f8:	80 83       	st	Z, r24
    33fa:	09 c0       	rjmp	.+18     	; 0x340e <DIO_vidSetPortVal+0x74>
	case (DIO_PORTC) : PORTC_REG = u8PortVal; break;
    33fc:	e5 e3       	ldi	r30, 0x35	; 53
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	8a 81       	ldd	r24, Y+2	; 0x02
    3402:	80 83       	st	Z, r24
    3404:	04 c0       	rjmp	.+8      	; 0x340e <DIO_vidSetPortVal+0x74>
	case (DIO_PORTD) : PORTD_REG = u8PortVal; break;
    3406:	e2 e3       	ldi	r30, 0x32	; 50
    3408:	f0 e0       	ldi	r31, 0x00	; 0
    340a:	8a 81       	ldd	r24, Y+2	; 0x02
    340c:	80 83       	st	Z, r24
	default :/* wrong PortId OR PinId  */     break;
	}
}
    340e:	0f 90       	pop	r0
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	cf 91       	pop	r28
    3418:	df 91       	pop	r29
    341a:	08 95       	ret

0000341c <DIO_vidEnableIntrupt>:


void DIO_vidEnableIntrupt(u8 u8InterNum, u8 u8InterStat)
{
    341c:	df 93       	push	r29
    341e:	cf 93       	push	r28
    3420:	cd b7       	in	r28, 0x3d	; 61
    3422:	de b7       	in	r29, 0x3e	; 62
    3424:	2a 97       	sbiw	r28, 0x0a	; 10
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	de bf       	out	0x3e, r29	; 62
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	cd bf       	out	0x3d, r28	; 61
    3430:	89 83       	std	Y+1, r24	; 0x01
    3432:	6a 83       	std	Y+2, r22	; 0x02
	if((u8InterNum<3)&&(u8InterStat<4))
    3434:	89 81       	ldd	r24, Y+1	; 0x01
    3436:	83 30       	cpi	r24, 0x03	; 3
    3438:	08 f0       	brcs	.+2      	; 0x343c <DIO_vidEnableIntrupt+0x20>
    343a:	26 c1       	rjmp	.+588    	; 0x3688 <DIO_vidEnableIntrupt+0x26c>
    343c:	8a 81       	ldd	r24, Y+2	; 0x02
    343e:	84 30       	cpi	r24, 0x04	; 4
    3440:	08 f0       	brcs	.+2      	; 0x3444 <DIO_vidEnableIntrupt+0x28>
    3442:	22 c1       	rjmp	.+580    	; 0x3688 <DIO_vidEnableIntrupt+0x26c>
	{
		/*Enable All Interrupts*/
		SET_BIT(SR_REG,7);
    3444:	af e5       	ldi	r26, 0x5F	; 95
    3446:	b0 e0       	ldi	r27, 0x00	; 0
    3448:	ef e5       	ldi	r30, 0x5F	; 95
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	80 81       	ld	r24, Z
    344e:	80 68       	ori	r24, 0x80	; 128
    3450:	8c 93       	st	X, r24

		switch(u8InterNum)
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	28 2f       	mov	r18, r24
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	3a 87       	std	Y+10, r19	; 0x0a
    345a:	29 87       	std	Y+9, r18	; 0x09
    345c:	89 85       	ldd	r24, Y+9	; 0x09
    345e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3460:	81 30       	cpi	r24, 0x01	; 1
    3462:	91 05       	cpc	r25, r1
    3464:	09 f4       	brne	.+2      	; 0x3468 <DIO_vidEnableIntrupt+0x4c>
    3466:	76 c0       	rjmp	.+236    	; 0x3554 <DIO_vidEnableIntrupt+0x138>
    3468:	29 85       	ldd	r18, Y+9	; 0x09
    346a:	3a 85       	ldd	r19, Y+10	; 0x0a
    346c:	22 30       	cpi	r18, 0x02	; 2
    346e:	31 05       	cpc	r19, r1
    3470:	09 f4       	brne	.+2      	; 0x3474 <DIO_vidEnableIntrupt+0x58>
    3472:	db c0       	rjmp	.+438    	; 0x362a <DIO_vidEnableIntrupt+0x20e>
    3474:	89 85       	ldd	r24, Y+9	; 0x09
    3476:	9a 85       	ldd	r25, Y+10	; 0x0a
    3478:	00 97       	sbiw	r24, 0x00	; 0
    347a:	09 f0       	breq	.+2      	; 0x347e <DIO_vidEnableIntrupt+0x62>
    347c:	05 c1       	rjmp	.+522    	; 0x3688 <DIO_vidEnableIntrupt+0x26c>
		{
		/*Interrupt 0(INT0)*/
		case 0:
			/*Make The INT0 Pin As Input	&PullUp Res*/
			DIO_vidSetPinDir(DIO_PORTD,DIO_PIN2,DIO_INPUT);
    347e:	83 e0       	ldi	r24, 0x03	; 3
    3480:	62 e0       	ldi	r22, 0x02	; 2
    3482:	40 e0       	ldi	r20, 0x00	; 0
    3484:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <DIO_vidSetPinDir>
			DIO_vidEnablePullUpRes(DIO_PORTD,DIO_PIN2);
    3488:	83 e0       	ldi	r24, 0x03	; 3
    348a:	62 e0       	ldi	r22, 0x02	; 2
    348c:	0e 94 3f 18 	call	0x307e	; 0x307e <DIO_vidEnablePullUpRes>

			switch(u8InterStat)
    3490:	8a 81       	ldd	r24, Y+2	; 0x02
    3492:	28 2f       	mov	r18, r24
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	38 87       	std	Y+8, r19	; 0x08
    3498:	2f 83       	std	Y+7, r18	; 0x07
    349a:	8f 81       	ldd	r24, Y+7	; 0x07
    349c:	98 85       	ldd	r25, Y+8	; 0x08
    349e:	81 30       	cpi	r24, 0x01	; 1
    34a0:	91 05       	cpc	r25, r1
    34a2:	21 f1       	breq	.+72     	; 0x34ec <DIO_vidEnableIntrupt+0xd0>
    34a4:	2f 81       	ldd	r18, Y+7	; 0x07
    34a6:	38 85       	ldd	r19, Y+8	; 0x08
    34a8:	22 30       	cpi	r18, 0x02	; 2
    34aa:	31 05       	cpc	r19, r1
    34ac:	2c f4       	brge	.+10     	; 0x34b8 <DIO_vidEnableIntrupt+0x9c>
    34ae:	8f 81       	ldd	r24, Y+7	; 0x07
    34b0:	98 85       	ldd	r25, Y+8	; 0x08
    34b2:	00 97       	sbiw	r24, 0x00	; 0
    34b4:	61 f0       	breq	.+24     	; 0x34ce <DIO_vidEnableIntrupt+0xb2>
    34b6:	46 c0       	rjmp	.+140    	; 0x3544 <DIO_vidEnableIntrupt+0x128>
    34b8:	2f 81       	ldd	r18, Y+7	; 0x07
    34ba:	38 85       	ldd	r19, Y+8	; 0x08
    34bc:	22 30       	cpi	r18, 0x02	; 2
    34be:	31 05       	cpc	r19, r1
    34c0:	21 f1       	breq	.+72     	; 0x350a <DIO_vidEnableIntrupt+0xee>
    34c2:	8f 81       	ldd	r24, Y+7	; 0x07
    34c4:	98 85       	ldd	r25, Y+8	; 0x08
    34c6:	83 30       	cpi	r24, 0x03	; 3
    34c8:	91 05       	cpc	r25, r1
    34ca:	71 f1       	breq	.+92     	; 0x3528 <DIO_vidEnableIntrupt+0x10c>
    34cc:	3b c0       	rjmp	.+118    	; 0x3544 <DIO_vidEnableIntrupt+0x128>
			{
			/*Low Level Interrupt*/
			case 0:	CLR_BIT(MCUCR_REG,1);CLR_BIT(MCUCR_REG,0);break;
    34ce:	a5 e5       	ldi	r26, 0x55	; 85
    34d0:	b0 e0       	ldi	r27, 0x00	; 0
    34d2:	e5 e5       	ldi	r30, 0x55	; 85
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	80 81       	ld	r24, Z
    34d8:	8d 7f       	andi	r24, 0xFD	; 253
    34da:	8c 93       	st	X, r24
    34dc:	a5 e5       	ldi	r26, 0x55	; 85
    34de:	b0 e0       	ldi	r27, 0x00	; 0
    34e0:	e5 e5       	ldi	r30, 0x55	; 85
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	80 81       	ld	r24, Z
    34e6:	8e 7f       	andi	r24, 0xFE	; 254
    34e8:	8c 93       	st	X, r24
    34ea:	2c c0       	rjmp	.+88     	; 0x3544 <DIO_vidEnableIntrupt+0x128>

			/*Raising Or Falling Edge*/
			case 1:CLR_BIT(MCUCR_REG,1);SET_BIT(MCUCR_REG,0);break;
    34ec:	a5 e5       	ldi	r26, 0x55	; 85
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	e5 e5       	ldi	r30, 0x55	; 85
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	80 81       	ld	r24, Z
    34f6:	8d 7f       	andi	r24, 0xFD	; 253
    34f8:	8c 93       	st	X, r24
    34fa:	a5 e5       	ldi	r26, 0x55	; 85
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
    34fe:	e5 e5       	ldi	r30, 0x55	; 85
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	80 81       	ld	r24, Z
    3504:	81 60       	ori	r24, 0x01	; 1
    3506:	8c 93       	st	X, r24
    3508:	1d c0       	rjmp	.+58     	; 0x3544 <DIO_vidEnableIntrupt+0x128>

			/*Falling Edge*/
			case 2:SET_BIT(MCUCR_REG,1);CLR_BIT(MCUCR_REG,0);break;
    350a:	a5 e5       	ldi	r26, 0x55	; 85
    350c:	b0 e0       	ldi	r27, 0x00	; 0
    350e:	e5 e5       	ldi	r30, 0x55	; 85
    3510:	f0 e0       	ldi	r31, 0x00	; 0
    3512:	80 81       	ld	r24, Z
    3514:	82 60       	ori	r24, 0x02	; 2
    3516:	8c 93       	st	X, r24
    3518:	a5 e5       	ldi	r26, 0x55	; 85
    351a:	b0 e0       	ldi	r27, 0x00	; 0
    351c:	e5 e5       	ldi	r30, 0x55	; 85
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	80 81       	ld	r24, Z
    3522:	8e 7f       	andi	r24, 0xFE	; 254
    3524:	8c 93       	st	X, r24
    3526:	0e c0       	rjmp	.+28     	; 0x3544 <DIO_vidEnableIntrupt+0x128>

			/*Raising Edge*/
			case 3:SET_BIT(MCUCR_REG,1);SET_BIT(MCUCR_REG,0);break;
    3528:	a5 e5       	ldi	r26, 0x55	; 85
    352a:	b0 e0       	ldi	r27, 0x00	; 0
    352c:	e5 e5       	ldi	r30, 0x55	; 85
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	80 81       	ld	r24, Z
    3532:	82 60       	ori	r24, 0x02	; 2
    3534:	8c 93       	st	X, r24
    3536:	a5 e5       	ldi	r26, 0x55	; 85
    3538:	b0 e0       	ldi	r27, 0x00	; 0
    353a:	e5 e5       	ldi	r30, 0x55	; 85
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	80 81       	ld	r24, Z
    3540:	81 60       	ori	r24, 0x01	; 1
    3542:	8c 93       	st	X, r24
			}

			/*Enable Interrupt 0*/
			SET_BIT(GICR_REG,6);
    3544:	ab e5       	ldi	r26, 0x5B	; 91
    3546:	b0 e0       	ldi	r27, 0x00	; 0
    3548:	eb e5       	ldi	r30, 0x5B	; 91
    354a:	f0 e0       	ldi	r31, 0x00	; 0
    354c:	80 81       	ld	r24, Z
    354e:	80 64       	ori	r24, 0x40	; 64
    3550:	8c 93       	st	X, r24
    3552:	9a c0       	rjmp	.+308    	; 0x3688 <DIO_vidEnableIntrupt+0x26c>
			break;

			/*Interrupt 1(INT1)*/
			case 1:
				/*Make The INT1 Pin As Input	&PullUp Res*/
				DIO_vidSetPinDir(DIO_PORTD,DIO_PIN3,DIO_INPUT);
    3554:	83 e0       	ldi	r24, 0x03	; 3
    3556:	63 e0       	ldi	r22, 0x03	; 3
    3558:	40 e0       	ldi	r20, 0x00	; 0
    355a:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <DIO_vidSetPinDir>
				DIO_vidEnablePullUpRes(DIO_PORTD,DIO_PIN3);
    355e:	83 e0       	ldi	r24, 0x03	; 3
    3560:	63 e0       	ldi	r22, 0x03	; 3
    3562:	0e 94 3f 18 	call	0x307e	; 0x307e <DIO_vidEnablePullUpRes>

				switch(u8InterStat)
    3566:	8a 81       	ldd	r24, Y+2	; 0x02
    3568:	28 2f       	mov	r18, r24
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	3e 83       	std	Y+6, r19	; 0x06
    356e:	2d 83       	std	Y+5, r18	; 0x05
    3570:	8d 81       	ldd	r24, Y+5	; 0x05
    3572:	9e 81       	ldd	r25, Y+6	; 0x06
    3574:	81 30       	cpi	r24, 0x01	; 1
    3576:	91 05       	cpc	r25, r1
    3578:	21 f1       	breq	.+72     	; 0x35c2 <DIO_vidEnableIntrupt+0x1a6>
    357a:	2d 81       	ldd	r18, Y+5	; 0x05
    357c:	3e 81       	ldd	r19, Y+6	; 0x06
    357e:	22 30       	cpi	r18, 0x02	; 2
    3580:	31 05       	cpc	r19, r1
    3582:	2c f4       	brge	.+10     	; 0x358e <DIO_vidEnableIntrupt+0x172>
    3584:	8d 81       	ldd	r24, Y+5	; 0x05
    3586:	9e 81       	ldd	r25, Y+6	; 0x06
    3588:	00 97       	sbiw	r24, 0x00	; 0
    358a:	61 f0       	breq	.+24     	; 0x35a4 <DIO_vidEnableIntrupt+0x188>
    358c:	46 c0       	rjmp	.+140    	; 0x361a <DIO_vidEnableIntrupt+0x1fe>
    358e:	2d 81       	ldd	r18, Y+5	; 0x05
    3590:	3e 81       	ldd	r19, Y+6	; 0x06
    3592:	22 30       	cpi	r18, 0x02	; 2
    3594:	31 05       	cpc	r19, r1
    3596:	21 f1       	breq	.+72     	; 0x35e0 <DIO_vidEnableIntrupt+0x1c4>
    3598:	8d 81       	ldd	r24, Y+5	; 0x05
    359a:	9e 81       	ldd	r25, Y+6	; 0x06
    359c:	83 30       	cpi	r24, 0x03	; 3
    359e:	91 05       	cpc	r25, r1
    35a0:	71 f1       	breq	.+92     	; 0x35fe <DIO_vidEnableIntrupt+0x1e2>
    35a2:	3b c0       	rjmp	.+118    	; 0x361a <DIO_vidEnableIntrupt+0x1fe>
				{
				/*Low Level Interrupt*/
				case 0:	CLR_BIT(MCUCR_REG,3);CLR_BIT(MCUCR_REG,2);break;
    35a4:	a5 e5       	ldi	r26, 0x55	; 85
    35a6:	b0 e0       	ldi	r27, 0x00	; 0
    35a8:	e5 e5       	ldi	r30, 0x55	; 85
    35aa:	f0 e0       	ldi	r31, 0x00	; 0
    35ac:	80 81       	ld	r24, Z
    35ae:	87 7f       	andi	r24, 0xF7	; 247
    35b0:	8c 93       	st	X, r24
    35b2:	a5 e5       	ldi	r26, 0x55	; 85
    35b4:	b0 e0       	ldi	r27, 0x00	; 0
    35b6:	e5 e5       	ldi	r30, 0x55	; 85
    35b8:	f0 e0       	ldi	r31, 0x00	; 0
    35ba:	80 81       	ld	r24, Z
    35bc:	8b 7f       	andi	r24, 0xFB	; 251
    35be:	8c 93       	st	X, r24
    35c0:	2c c0       	rjmp	.+88     	; 0x361a <DIO_vidEnableIntrupt+0x1fe>

				/*Raising Or Falling Edge*/
				case 1:CLR_BIT(MCUCR_REG,3);SET_BIT(MCUCR_REG,2);break;
    35c2:	a5 e5       	ldi	r26, 0x55	; 85
    35c4:	b0 e0       	ldi	r27, 0x00	; 0
    35c6:	e5 e5       	ldi	r30, 0x55	; 85
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	87 7f       	andi	r24, 0xF7	; 247
    35ce:	8c 93       	st	X, r24
    35d0:	a5 e5       	ldi	r26, 0x55	; 85
    35d2:	b0 e0       	ldi	r27, 0x00	; 0
    35d4:	e5 e5       	ldi	r30, 0x55	; 85
    35d6:	f0 e0       	ldi	r31, 0x00	; 0
    35d8:	80 81       	ld	r24, Z
    35da:	84 60       	ori	r24, 0x04	; 4
    35dc:	8c 93       	st	X, r24
    35de:	1d c0       	rjmp	.+58     	; 0x361a <DIO_vidEnableIntrupt+0x1fe>

				/*Falling Edge*/
				case 2:SET_BIT(MCUCR_REG,3);CLR_BIT(MCUCR_REG,2);break;
    35e0:	a5 e5       	ldi	r26, 0x55	; 85
    35e2:	b0 e0       	ldi	r27, 0x00	; 0
    35e4:	e5 e5       	ldi	r30, 0x55	; 85
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	80 81       	ld	r24, Z
    35ea:	88 60       	ori	r24, 0x08	; 8
    35ec:	8c 93       	st	X, r24
    35ee:	a5 e5       	ldi	r26, 0x55	; 85
    35f0:	b0 e0       	ldi	r27, 0x00	; 0
    35f2:	e5 e5       	ldi	r30, 0x55	; 85
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	80 81       	ld	r24, Z
    35f8:	8b 7f       	andi	r24, 0xFB	; 251
    35fa:	8c 93       	st	X, r24
    35fc:	0e c0       	rjmp	.+28     	; 0x361a <DIO_vidEnableIntrupt+0x1fe>

				/*Raising Edge*/
				case 3:SET_BIT(MCUCR_REG,3);SET_BIT(MCUCR_REG,2);break;
    35fe:	a5 e5       	ldi	r26, 0x55	; 85
    3600:	b0 e0       	ldi	r27, 0x00	; 0
    3602:	e5 e5       	ldi	r30, 0x55	; 85
    3604:	f0 e0       	ldi	r31, 0x00	; 0
    3606:	80 81       	ld	r24, Z
    3608:	88 60       	ori	r24, 0x08	; 8
    360a:	8c 93       	st	X, r24
    360c:	a5 e5       	ldi	r26, 0x55	; 85
    360e:	b0 e0       	ldi	r27, 0x00	; 0
    3610:	e5 e5       	ldi	r30, 0x55	; 85
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	80 81       	ld	r24, Z
    3616:	84 60       	ori	r24, 0x04	; 4
    3618:	8c 93       	st	X, r24
				}
				/*Enable Interrupt 1*/
				SET_BIT(GICR_REG,7);
    361a:	ab e5       	ldi	r26, 0x5B	; 91
    361c:	b0 e0       	ldi	r27, 0x00	; 0
    361e:	eb e5       	ldi	r30, 0x5B	; 91
    3620:	f0 e0       	ldi	r31, 0x00	; 0
    3622:	80 81       	ld	r24, Z
    3624:	80 68       	ori	r24, 0x80	; 128
    3626:	8c 93       	st	X, r24
    3628:	2f c0       	rjmp	.+94     	; 0x3688 <DIO_vidEnableIntrupt+0x26c>

				/*Interrupt 2(INT2)*/
				case 2:


					switch(u8InterStat)
    362a:	8a 81       	ldd	r24, Y+2	; 0x02
    362c:	28 2f       	mov	r18, r24
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	3c 83       	std	Y+4, r19	; 0x04
    3632:	2b 83       	std	Y+3, r18	; 0x03
    3634:	8b 81       	ldd	r24, Y+3	; 0x03
    3636:	9c 81       	ldd	r25, Y+4	; 0x04
    3638:	82 30       	cpi	r24, 0x02	; 2
    363a:	91 05       	cpc	r25, r1
    363c:	31 f0       	breq	.+12     	; 0x364a <DIO_vidEnableIntrupt+0x22e>
    363e:	2b 81       	ldd	r18, Y+3	; 0x03
    3640:	3c 81       	ldd	r19, Y+4	; 0x04
    3642:	23 30       	cpi	r18, 0x03	; 3
    3644:	31 05       	cpc	r19, r1
    3646:	c9 f0       	breq	.+50     	; 0x367a <DIO_vidEnableIntrupt+0x25e>
    3648:	1f c0       	rjmp	.+62     	; 0x3688 <DIO_vidEnableIntrupt+0x26c>
					{
					/*Falling Edge*/
					case 2:CLR_BIT(MCUCSR_REG,6);
    364a:	a4 e5       	ldi	r26, 0x54	; 84
    364c:	b0 e0       	ldi	r27, 0x00	; 0
    364e:	e4 e5       	ldi	r30, 0x54	; 84
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	80 81       	ld	r24, Z
    3654:	8f 7b       	andi	r24, 0xBF	; 191
    3656:	8c 93       	st	X, r24

					/*Make The INT2 Pin As Input	&PullUp Res*/
					DIO_vidSetPinDir(DIO_PORTB,DIO_PIN2,DIO_INPUT);
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	62 e0       	ldi	r22, 0x02	; 2
    365c:	40 e0       	ldi	r20, 0x00	; 0
    365e:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <DIO_vidSetPinDir>
					DIO_vidEnablePullUpRes(DIO_PORTB,DIO_PIN2);
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	62 e0       	ldi	r22, 0x02	; 2
    3666:	0e 94 3f 18 	call	0x307e	; 0x307e <DIO_vidEnablePullUpRes>

					SET_BIT(GICR_REG,5);
    366a:	ab e5       	ldi	r26, 0x5B	; 91
    366c:	b0 e0       	ldi	r27, 0x00	; 0
    366e:	eb e5       	ldi	r30, 0x5B	; 91
    3670:	f0 e0       	ldi	r31, 0x00	; 0
    3672:	80 81       	ld	r24, Z
    3674:	80 62       	ori	r24, 0x20	; 32
    3676:	8c 93       	st	X, r24
    3678:	07 c0       	rjmp	.+14     	; 0x3688 <DIO_vidEnableIntrupt+0x26c>
					break;

					/*Raising Edge*/
					case 3:SET_BIT(MCUCSR_REG,6);break;
    367a:	a4 e5       	ldi	r26, 0x54	; 84
    367c:	b0 e0       	ldi	r27, 0x00	; 0
    367e:	e4 e5       	ldi	r30, 0x54	; 84
    3680:	f0 e0       	ldi	r31, 0x00	; 0
    3682:	80 81       	ld	r24, Z
    3684:	80 64       	ori	r24, 0x40	; 64
    3686:	8c 93       	st	X, r24
					break;
					}
					break;
		}
	}
}
    3688:	2a 96       	adiw	r28, 0x0a	; 10
    368a:	0f b6       	in	r0, 0x3f	; 63
    368c:	f8 94       	cli
    368e:	de bf       	out	0x3e, r29	; 62
    3690:	0f be       	out	0x3f, r0	; 63
    3692:	cd bf       	out	0x3d, r28	; 61
    3694:	cf 91       	pop	r28
    3696:	df 91       	pop	r29
    3698:	08 95       	ret

0000369a <DIO_vidDisableExtInt>:


void DIO_vidDisableExtInt(u8 u8InterNum){
    369a:	df 93       	push	r29
    369c:	cf 93       	push	r28
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <DIO_vidDisableExtInt+0x6>
    36a0:	0f 92       	push	r0
    36a2:	cd b7       	in	r28, 0x3d	; 61
    36a4:	de b7       	in	r29, 0x3e	; 62
    36a6:	89 83       	std	Y+1, r24	; 0x01
	switch(u8InterNum)
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	28 2f       	mov	r18, r24
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	3b 83       	std	Y+3, r19	; 0x03
    36b0:	2a 83       	std	Y+2, r18	; 0x02
    36b2:	8a 81       	ldd	r24, Y+2	; 0x02
    36b4:	9b 81       	ldd	r25, Y+3	; 0x03
    36b6:	00 97       	sbiw	r24, 0x00	; 0
    36b8:	31 f0       	breq	.+12     	; 0x36c6 <DIO_vidDisableExtInt+0x2c>
    36ba:	2a 81       	ldd	r18, Y+2	; 0x02
    36bc:	3b 81       	ldd	r19, Y+3	; 0x03
    36be:	21 30       	cpi	r18, 0x01	; 1
    36c0:	31 05       	cpc	r19, r1
    36c2:	b1 f0       	breq	.+44     	; 0x36f0 <DIO_vidDisableExtInt+0x56>
    36c4:	29 c0       	rjmp	.+82     	; 0x3718 <DIO_vidDisableExtInt+0x7e>
	{
	/*Interrupt 0(INT0)*/
	case 0 :CLR_BIT(GICR_REG, u8InterNum);break;
    36c6:	ab e5       	ldi	r26, 0x5B	; 91
    36c8:	b0 e0       	ldi	r27, 0x00	; 0
    36ca:	eb e5       	ldi	r30, 0x5B	; 91
    36cc:	f0 e0       	ldi	r31, 0x00	; 0
    36ce:	80 81       	ld	r24, Z
    36d0:	48 2f       	mov	r20, r24
    36d2:	89 81       	ldd	r24, Y+1	; 0x01
    36d4:	28 2f       	mov	r18, r24
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	81 e0       	ldi	r24, 0x01	; 1
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	02 2e       	mov	r0, r18
    36de:	02 c0       	rjmp	.+4      	; 0x36e4 <DIO_vidDisableExtInt+0x4a>
    36e0:	88 0f       	add	r24, r24
    36e2:	99 1f       	adc	r25, r25
    36e4:	0a 94       	dec	r0
    36e6:	e2 f7       	brpl	.-8      	; 0x36e0 <DIO_vidDisableExtInt+0x46>
    36e8:	80 95       	com	r24
    36ea:	84 23       	and	r24, r20
    36ec:	8c 93       	st	X, r24
    36ee:	14 c0       	rjmp	.+40     	; 0x3718 <DIO_vidDisableExtInt+0x7e>
	case 1 :CLR_BIT(GICR_REG, u8InterNum);break;
    36f0:	ab e5       	ldi	r26, 0x5B	; 91
    36f2:	b0 e0       	ldi	r27, 0x00	; 0
    36f4:	eb e5       	ldi	r30, 0x5B	; 91
    36f6:	f0 e0       	ldi	r31, 0x00	; 0
    36f8:	80 81       	ld	r24, Z
    36fa:	48 2f       	mov	r20, r24
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
    36fe:	28 2f       	mov	r18, r24
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	02 2e       	mov	r0, r18
    3708:	02 c0       	rjmp	.+4      	; 0x370e <DIO_vidDisableExtInt+0x74>
    370a:	88 0f       	add	r24, r24
    370c:	99 1f       	adc	r25, r25
    370e:	0a 94       	dec	r0
    3710:	e2 f7       	brpl	.-8      	; 0x370a <DIO_vidDisableExtInt+0x70>
    3712:	80 95       	com	r24
    3714:	84 23       	and	r24, r20
    3716:	8c 93       	st	X, r24
	}
}
    3718:	0f 90       	pop	r0
    371a:	0f 90       	pop	r0
    371c:	0f 90       	pop	r0
    371e:	cf 91       	pop	r28
    3720:	df 91       	pop	r29
    3722:	08 95       	ret

00003724 <__vector_1>:



void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    3724:	1f 92       	push	r1
    3726:	0f 92       	push	r0
    3728:	0f b6       	in	r0, 0x3f	; 63
    372a:	0f 92       	push	r0
    372c:	11 24       	eor	r1, r1
    372e:	2f 93       	push	r18
    3730:	3f 93       	push	r19
    3732:	4f 93       	push	r20
    3734:	5f 93       	push	r21
    3736:	6f 93       	push	r22
    3738:	7f 93       	push	r23
    373a:	8f 93       	push	r24
    373c:	9f 93       	push	r25
    373e:	af 93       	push	r26
    3740:	bf 93       	push	r27
    3742:	ef 93       	push	r30
    3744:	ff 93       	push	r31
    3746:	df 93       	push	r29
    3748:	cf 93       	push	r28
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
	if(EXT_INT0_Call_Back != NULL){
    374e:	80 91 91 00 	lds	r24, 0x0091
    3752:	90 91 92 00 	lds	r25, 0x0092
    3756:	00 97       	sbiw	r24, 0x00	; 0
    3758:	29 f0       	breq	.+10     	; 0x3764 <__vector_1+0x40>
		EXT_INT0_Call_Back();
    375a:	e0 91 91 00 	lds	r30, 0x0091
    375e:	f0 91 92 00 	lds	r31, 0x0092
    3762:	09 95       	icall
	}

}
    3764:	cf 91       	pop	r28
    3766:	df 91       	pop	r29
    3768:	ff 91       	pop	r31
    376a:	ef 91       	pop	r30
    376c:	bf 91       	pop	r27
    376e:	af 91       	pop	r26
    3770:	9f 91       	pop	r25
    3772:	8f 91       	pop	r24
    3774:	7f 91       	pop	r23
    3776:	6f 91       	pop	r22
    3778:	5f 91       	pop	r21
    377a:	4f 91       	pop	r20
    377c:	3f 91       	pop	r19
    377e:	2f 91       	pop	r18
    3780:	0f 90       	pop	r0
    3782:	0f be       	out	0x3f, r0	; 63
    3784:	0f 90       	pop	r0
    3786:	1f 90       	pop	r1
    3788:	18 95       	reti

0000378a <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    378a:	1f 92       	push	r1
    378c:	0f 92       	push	r0
    378e:	0f b6       	in	r0, 0x3f	; 63
    3790:	0f 92       	push	r0
    3792:	11 24       	eor	r1, r1
    3794:	2f 93       	push	r18
    3796:	3f 93       	push	r19
    3798:	4f 93       	push	r20
    379a:	5f 93       	push	r21
    379c:	6f 93       	push	r22
    379e:	7f 93       	push	r23
    37a0:	8f 93       	push	r24
    37a2:	9f 93       	push	r25
    37a4:	af 93       	push	r26
    37a6:	bf 93       	push	r27
    37a8:	ef 93       	push	r30
    37aa:	ff 93       	push	r31
    37ac:	df 93       	push	r29
    37ae:	cf 93       	push	r28
    37b0:	cd b7       	in	r28, 0x3d	; 61
    37b2:	de b7       	in	r29, 0x3e	; 62
	if(EXT_INT1_Call_Back != NULL){
    37b4:	80 91 93 00 	lds	r24, 0x0093
    37b8:	90 91 94 00 	lds	r25, 0x0094
    37bc:	00 97       	sbiw	r24, 0x00	; 0
    37be:	29 f0       	breq	.+10     	; 0x37ca <__vector_2+0x40>
		EXT_INT1_Call_Back();
    37c0:	e0 91 93 00 	lds	r30, 0x0093
    37c4:	f0 91 94 00 	lds	r31, 0x0094
    37c8:	09 95       	icall
	}

}
    37ca:	cf 91       	pop	r28
    37cc:	df 91       	pop	r29
    37ce:	ff 91       	pop	r31
    37d0:	ef 91       	pop	r30
    37d2:	bf 91       	pop	r27
    37d4:	af 91       	pop	r26
    37d6:	9f 91       	pop	r25
    37d8:	8f 91       	pop	r24
    37da:	7f 91       	pop	r23
    37dc:	6f 91       	pop	r22
    37de:	5f 91       	pop	r21
    37e0:	4f 91       	pop	r20
    37e2:	3f 91       	pop	r19
    37e4:	2f 91       	pop	r18
    37e6:	0f 90       	pop	r0
    37e8:	0f be       	out	0x3f, r0	; 63
    37ea:	0f 90       	pop	r0
    37ec:	1f 90       	pop	r1
    37ee:	18 95       	reti

000037f0 <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    37f0:	1f 92       	push	r1
    37f2:	0f 92       	push	r0
    37f4:	0f b6       	in	r0, 0x3f	; 63
    37f6:	0f 92       	push	r0
    37f8:	11 24       	eor	r1, r1
    37fa:	2f 93       	push	r18
    37fc:	3f 93       	push	r19
    37fe:	4f 93       	push	r20
    3800:	5f 93       	push	r21
    3802:	6f 93       	push	r22
    3804:	7f 93       	push	r23
    3806:	8f 93       	push	r24
    3808:	9f 93       	push	r25
    380a:	af 93       	push	r26
    380c:	bf 93       	push	r27
    380e:	ef 93       	push	r30
    3810:	ff 93       	push	r31
    3812:	df 93       	push	r29
    3814:	cf 93       	push	r28
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
	if(EXT_INT2_Call_Back != NULL){
    381a:	80 91 8f 00 	lds	r24, 0x008F
    381e:	90 91 90 00 	lds	r25, 0x0090
    3822:	00 97       	sbiw	r24, 0x00	; 0
    3824:	29 f0       	breq	.+10     	; 0x3830 <__vector_3+0x40>
		EXT_INT2_Call_Back();
    3826:	e0 91 8f 00 	lds	r30, 0x008F
    382a:	f0 91 90 00 	lds	r31, 0x0090
    382e:	09 95       	icall
	}

}
    3830:	cf 91       	pop	r28
    3832:	df 91       	pop	r29
    3834:	ff 91       	pop	r31
    3836:	ef 91       	pop	r30
    3838:	bf 91       	pop	r27
    383a:	af 91       	pop	r26
    383c:	9f 91       	pop	r25
    383e:	8f 91       	pop	r24
    3840:	7f 91       	pop	r23
    3842:	6f 91       	pop	r22
    3844:	5f 91       	pop	r21
    3846:	4f 91       	pop	r20
    3848:	3f 91       	pop	r19
    384a:	2f 91       	pop	r18
    384c:	0f 90       	pop	r0
    384e:	0f be       	out	0x3f, r0	; 63
    3850:	0f 90       	pop	r0
    3852:	1f 90       	pop	r1
    3854:	18 95       	reti

00003856 <ULTRASONIC_u8Init>:
/* Private Function Prototypes */
static void ULTRASONIC_voidSendTriggerPulse(void);
static u8 ULTRASONIC_u8ConvertTimeToDistance(u32 Copy_u32TimeUs, u16* Copy_pu16Distance);

u8 ULTRASONIC_u8Init(void)
{
    3856:	df 93       	push	r29
    3858:	cf 93       	push	r28
    385a:	cd b7       	in	r28, 0x3d	; 61
    385c:	de b7       	in	r29, 0x3e	; 62
    385e:	2f 97       	sbiw	r28, 0x0f	; 15
    3860:	0f b6       	in	r0, 0x3f	; 63
    3862:	f8 94       	cli
    3864:	de bf       	out	0x3e, r29	; 62
    3866:	0f be       	out	0x3f, r0	; 63
    3868:	cd bf       	out	0x3d, r28	; 61
	/* Initialize ICU */
	if (ICU_u8Init() != ICU_OK)
    386a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <ICU_u8Init>
    386e:	88 23       	and	r24, r24
    3870:	19 f0       	breq	.+6      	; 0x3878 <ULTRASONIC_u8Init+0x22>
	{
		return ULTRASONIC_ERROR;
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	8f 87       	std	Y+15, r24	; 0x0f
    3876:	86 c0       	rjmp	.+268    	; 0x3984 <ULTRASONIC_u8Init+0x12e>
	}

	/* Configure trigger pin as output */
	DIO_vidSetPinDir(ULTRASONIC_TRIG_PORT, ULTRASONIC_TRIG_PIN, DIO_OUTPUT);
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	60 e0       	ldi	r22, 0x00	; 0
    387c:	4f ef       	ldi	r20, 0xFF	; 255
    387e:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <DIO_vidSetPinDir>
	DIO_vidSetPinVal(ULTRASONIC_TRIG_PORT, ULTRASONIC_TRIG_PIN, DIO_LOW);
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	60 e0       	ldi	r22, 0x00	; 0
    3886:	40 e0       	ldi	r20, 0x00	; 0
    3888:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <DIO_vidSetPinVal>
    388c:	80 e0       	ldi	r24, 0x00	; 0
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	a8 ec       	ldi	r26, 0xC8	; 200
    3892:	b2 e4       	ldi	r27, 0x42	; 66
    3894:	8b 87       	std	Y+11, r24	; 0x0b
    3896:	9c 87       	std	Y+12, r25	; 0x0c
    3898:	ad 87       	std	Y+13, r26	; 0x0d
    389a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    389c:	6b 85       	ldd	r22, Y+11	; 0x0b
    389e:	7c 85       	ldd	r23, Y+12	; 0x0c
    38a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    38a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	4a ef       	ldi	r20, 0xFA	; 250
    38aa:	54 e4       	ldi	r21, 0x44	; 68
    38ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	8f 83       	std	Y+7, r24	; 0x07
    38b6:	98 87       	std	Y+8, r25	; 0x08
    38b8:	a9 87       	std	Y+9, r26	; 0x09
    38ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38bc:	6f 81       	ldd	r22, Y+7	; 0x07
    38be:	78 85       	ldd	r23, Y+8	; 0x08
    38c0:	89 85       	ldd	r24, Y+9	; 0x09
    38c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	40 e8       	ldi	r20, 0x80	; 128
    38ca:	5f e3       	ldi	r21, 0x3F	; 63
    38cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38d0:	88 23       	and	r24, r24
    38d2:	2c f4       	brge	.+10     	; 0x38de <ULTRASONIC_u8Init+0x88>
		__ticks = 1;
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	9e 83       	std	Y+6, r25	; 0x06
    38da:	8d 83       	std	Y+5, r24	; 0x05
    38dc:	3f c0       	rjmp	.+126    	; 0x395c <ULTRASONIC_u8Init+0x106>
	else if (__tmp > 65535)
    38de:	6f 81       	ldd	r22, Y+7	; 0x07
    38e0:	78 85       	ldd	r23, Y+8	; 0x08
    38e2:	89 85       	ldd	r24, Y+9	; 0x09
    38e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	3f ef       	ldi	r19, 0xFF	; 255
    38ea:	4f e7       	ldi	r20, 0x7F	; 127
    38ec:	57 e4       	ldi	r21, 0x47	; 71
    38ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38f2:	18 16       	cp	r1, r24
    38f4:	4c f5       	brge	.+82     	; 0x3948 <ULTRASONIC_u8Init+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    38f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    38fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    38fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    38fe:	20 e0       	ldi	r18, 0x00	; 0
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	40 e2       	ldi	r20, 0x20	; 32
    3904:	51 e4       	ldi	r21, 0x41	; 65
    3906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    390a:	dc 01       	movw	r26, r24
    390c:	cb 01       	movw	r24, r22
    390e:	bc 01       	movw	r22, r24
    3910:	cd 01       	movw	r24, r26
    3912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	9e 83       	std	Y+6, r25	; 0x06
    391c:	8d 83       	std	Y+5, r24	; 0x05
    391e:	0f c0       	rjmp	.+30     	; 0x393e <ULTRASONIC_u8Init+0xe8>
    3920:	88 ec       	ldi	r24, 0xC8	; 200
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	9c 83       	std	Y+4, r25	; 0x04
    3926:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3928:	8b 81       	ldd	r24, Y+3	; 0x03
    392a:	9c 81       	ldd	r25, Y+4	; 0x04
    392c:	01 97       	sbiw	r24, 0x01	; 1
    392e:	f1 f7       	brne	.-4      	; 0x392c <ULTRASONIC_u8Init+0xd6>
    3930:	9c 83       	std	Y+4, r25	; 0x04
    3932:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3934:	8d 81       	ldd	r24, Y+5	; 0x05
    3936:	9e 81       	ldd	r25, Y+6	; 0x06
    3938:	01 97       	sbiw	r24, 0x01	; 1
    393a:	9e 83       	std	Y+6, r25	; 0x06
    393c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    393e:	8d 81       	ldd	r24, Y+5	; 0x05
    3940:	9e 81       	ldd	r25, Y+6	; 0x06
    3942:	00 97       	sbiw	r24, 0x00	; 0
    3944:	69 f7       	brne	.-38     	; 0x3920 <ULTRASONIC_u8Init+0xca>
    3946:	14 c0       	rjmp	.+40     	; 0x3970 <ULTRASONIC_u8Init+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3948:	6f 81       	ldd	r22, Y+7	; 0x07
    394a:	78 85       	ldd	r23, Y+8	; 0x08
    394c:	89 85       	ldd	r24, Y+9	; 0x09
    394e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	9e 83       	std	Y+6, r25	; 0x06
    395a:	8d 83       	std	Y+5, r24	; 0x05
    395c:	8d 81       	ldd	r24, Y+5	; 0x05
    395e:	9e 81       	ldd	r25, Y+6	; 0x06
    3960:	9a 83       	std	Y+2, r25	; 0x02
    3962:	89 83       	std	Y+1, r24	; 0x01
    3964:	89 81       	ldd	r24, Y+1	; 0x01
    3966:	9a 81       	ldd	r25, Y+2	; 0x02
    3968:	01 97       	sbiw	r24, 0x01	; 1
    396a:	f1 f7       	brne	.-4      	; 0x3968 <ULTRASONIC_u8Init+0x112>
    396c:	9a 83       	std	Y+2, r25	; 0x02
    396e:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for sensor to stabilize */
	_delay_ms(100);

	/* Make sure echo pin is input with pull-up */
	DIO_vidSetPinDir(ULTRASONIC_ECHO_PORT, ULTRASONIC_ECHO_PIN, DIO_INPUT);
    3970:	83 e0       	ldi	r24, 0x03	; 3
    3972:	62 e0       	ldi	r22, 0x02	; 2
    3974:	40 e0       	ldi	r20, 0x00	; 0
    3976:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <DIO_vidSetPinDir>
	DIO_vidEnablePullUpRes(ULTRASONIC_ECHO_PORT, ULTRASONIC_ECHO_PIN);
    397a:	83 e0       	ldi	r24, 0x03	; 3
    397c:	62 e0       	ldi	r22, 0x02	; 2
    397e:	0e 94 3f 18 	call	0x307e	; 0x307e <DIO_vidEnablePullUpRes>

	return ULTRASONIC_OK;
    3982:	1f 86       	std	Y+15, r1	; 0x0f
    3984:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3986:	2f 96       	adiw	r28, 0x0f	; 15
    3988:	0f b6       	in	r0, 0x3f	; 63
    398a:	f8 94       	cli
    398c:	de bf       	out	0x3e, r29	; 62
    398e:	0f be       	out	0x3f, r0	; 63
    3990:	cd bf       	out	0x3d, r28	; 61
    3992:	cf 91       	pop	r28
    3994:	df 91       	pop	r29
    3996:	08 95       	ret

00003998 <ULTRASONIC_u8MeasureDistance>:



u8 ULTRASONIC_u8MeasureDistance(u16* Copy_pu16Distance)
{
    3998:	df 93       	push	r29
    399a:	cf 93       	push	r28
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	64 97       	sbiw	r28, 0x14	; 20
    39a2:	0f b6       	in	r0, 0x3f	; 63
    39a4:	f8 94       	cli
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	cd bf       	out	0x3d, r28	; 61
    39ac:	9b 8b       	std	Y+19, r25	; 0x13
    39ae:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8Status;
	u16 Local_u16Timeout = 3;
    39b0:	83 e0       	ldi	r24, 0x03	; 3
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	98 8b       	std	Y+16, r25	; 0x10
    39b6:	8f 87       	std	Y+15, r24	; 0x0f

	if (Copy_pu16Distance == NULL)
    39b8:	8a 89       	ldd	r24, Y+18	; 0x12
    39ba:	9b 89       	ldd	r25, Y+19	; 0x13
    39bc:	00 97       	sbiw	r24, 0x00	; 0
    39be:	19 f4       	brne	.+6      	; 0x39c6 <ULTRASONIC_u8MeasureDistance+0x2e>
	{
		return ULTRASONIC_ERROR;
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	8c 8b       	std	Y+20, r24	; 0x14
    39c4:	98 c0       	rjmp	.+304    	; 0x3af6 <ULTRASONIC_u8MeasureDistance+0x15e>
	}

	/* Start measurement */
	Local_u8Status = ULTRASONIC_u8StartMeasurement();
    39c6:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <ULTRASONIC_u8StartMeasurement>
    39ca:	89 8b       	std	Y+17, r24	; 0x11
	if (Local_u8Status != ULTRASONIC_OK)
    39cc:	89 89       	ldd	r24, Y+17	; 0x11
    39ce:	88 23       	and	r24, r24
    39d0:	09 f4       	brne	.+2      	; 0x39d4 <ULTRASONIC_u8MeasureDistance+0x3c>
    39d2:	7a c0       	rjmp	.+244    	; 0x3ac8 <ULTRASONIC_u8MeasureDistance+0x130>
	{
		return Local_u8Status;
    39d4:	89 89       	ldd	r24, Y+17	; 0x11
    39d6:	8c 8b       	std	Y+20, r24	; 0x14
    39d8:	8e c0       	rjmp	.+284    	; 0x3af6 <ULTRASONIC_u8MeasureDistance+0x15e>
	}

	/* Wait for measurement to complete */
	while (!ULTRASONIC_u8IsMeasurementComplete() && Local_u16Timeout > 0)
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	a0 e2       	ldi	r26, 0x20	; 32
    39e0:	b1 e4       	ldi	r27, 0x41	; 65
    39e2:	8b 87       	std	Y+11, r24	; 0x0b
    39e4:	9c 87       	std	Y+12, r25	; 0x0c
    39e6:	ad 87       	std	Y+13, r26	; 0x0d
    39e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    39ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    39f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	4a ef       	ldi	r20, 0xFA	; 250
    39f8:	54 e4       	ldi	r21, 0x44	; 68
    39fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39fe:	dc 01       	movw	r26, r24
    3a00:	cb 01       	movw	r24, r22
    3a02:	8f 83       	std	Y+7, r24	; 0x07
    3a04:	98 87       	std	Y+8, r25	; 0x08
    3a06:	a9 87       	std	Y+9, r26	; 0x09
    3a08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a0c:	78 85       	ldd	r23, Y+8	; 0x08
    3a0e:	89 85       	ldd	r24, Y+9	; 0x09
    3a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	40 e8       	ldi	r20, 0x80	; 128
    3a18:	5f e3       	ldi	r21, 0x3F	; 63
    3a1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a1e:	88 23       	and	r24, r24
    3a20:	2c f4       	brge	.+10     	; 0x3a2c <ULTRASONIC_u8MeasureDistance+0x94>
		__ticks = 1;
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	9e 83       	std	Y+6, r25	; 0x06
    3a28:	8d 83       	std	Y+5, r24	; 0x05
    3a2a:	3f c0       	rjmp	.+126    	; 0x3aaa <ULTRASONIC_u8MeasureDistance+0x112>
	else if (__tmp > 65535)
    3a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a2e:	78 85       	ldd	r23, Y+8	; 0x08
    3a30:	89 85       	ldd	r24, Y+9	; 0x09
    3a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	3f ef       	ldi	r19, 0xFF	; 255
    3a38:	4f e7       	ldi	r20, 0x7F	; 127
    3a3a:	57 e4       	ldi	r21, 0x47	; 71
    3a3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a40:	18 16       	cp	r1, r24
    3a42:	4c f5       	brge	.+82     	; 0x3a96 <ULTRASONIC_u8MeasureDistance+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	40 e2       	ldi	r20, 0x20	; 32
    3a52:	51 e4       	ldi	r21, 0x41	; 65
    3a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	bc 01       	movw	r22, r24
    3a5e:	cd 01       	movw	r24, r26
    3a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a64:	dc 01       	movw	r26, r24
    3a66:	cb 01       	movw	r24, r22
    3a68:	9e 83       	std	Y+6, r25	; 0x06
    3a6a:	8d 83       	std	Y+5, r24	; 0x05
    3a6c:	0f c0       	rjmp	.+30     	; 0x3a8c <ULTRASONIC_u8MeasureDistance+0xf4>
    3a6e:	88 ec       	ldi	r24, 0xC8	; 200
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	9c 83       	std	Y+4, r25	; 0x04
    3a74:	8b 83       	std	Y+3, r24	; 0x03
    3a76:	8b 81       	ldd	r24, Y+3	; 0x03
    3a78:	9c 81       	ldd	r25, Y+4	; 0x04
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	f1 f7       	brne	.-4      	; 0x3a7a <ULTRASONIC_u8MeasureDistance+0xe2>
    3a7e:	9c 83       	std	Y+4, r25	; 0x04
    3a80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a82:	8d 81       	ldd	r24, Y+5	; 0x05
    3a84:	9e 81       	ldd	r25, Y+6	; 0x06
    3a86:	01 97       	sbiw	r24, 0x01	; 1
    3a88:	9e 83       	std	Y+6, r25	; 0x06
    3a8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a90:	00 97       	sbiw	r24, 0x00	; 0
    3a92:	69 f7       	brne	.-38     	; 0x3a6e <ULTRASONIC_u8MeasureDistance+0xd6>
    3a94:	14 c0       	rjmp	.+40     	; 0x3abe <ULTRASONIC_u8MeasureDistance+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a96:	6f 81       	ldd	r22, Y+7	; 0x07
    3a98:	78 85       	ldd	r23, Y+8	; 0x08
    3a9a:	89 85       	ldd	r24, Y+9	; 0x09
    3a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	cb 01       	movw	r24, r22
    3aa6:	9e 83       	std	Y+6, r25	; 0x06
    3aa8:	8d 83       	std	Y+5, r24	; 0x05
    3aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    3aac:	9e 81       	ldd	r25, Y+6	; 0x06
    3aae:	9a 83       	std	Y+2, r25	; 0x02
    3ab0:	89 83       	std	Y+1, r24	; 0x01
    3ab2:	89 81       	ldd	r24, Y+1	; 0x01
    3ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	f1 f7       	brne	.-4      	; 0x3ab6 <ULTRASONIC_u8MeasureDistance+0x11e>
    3aba:	9a 83       	std	Y+2, r25	; 0x02
    3abc:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(10);
		Local_u16Timeout--;
    3abe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ac0:	98 89       	ldd	r25, Y+16	; 0x10
    3ac2:	01 97       	sbiw	r24, 0x01	; 1
    3ac4:	98 8b       	std	Y+16, r25	; 0x10
    3ac6:	8f 87       	std	Y+15, r24	; 0x0f
	{
		return Local_u8Status;
	}

	/* Wait for measurement to complete */
	while (!ULTRASONIC_u8IsMeasurementComplete() && Local_u16Timeout > 0)
    3ac8:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <ULTRASONIC_u8IsMeasurementComplete>
    3acc:	88 23       	and	r24, r24
    3ace:	29 f4       	brne	.+10     	; 0x3ada <ULTRASONIC_u8MeasureDistance+0x142>
    3ad0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ad2:	98 89       	ldd	r25, Y+16	; 0x10
    3ad4:	00 97       	sbiw	r24, 0x00	; 0
    3ad6:	09 f0       	breq	.+2      	; 0x3ada <ULTRASONIC_u8MeasureDistance+0x142>
    3ad8:	80 cf       	rjmp	.-256    	; 0x39da <ULTRASONIC_u8MeasureDistance+0x42>
	{
		_delay_ms(10);
		Local_u16Timeout--;
	}

	if (Local_u16Timeout == 0)
    3ada:	8f 85       	ldd	r24, Y+15	; 0x0f
    3adc:	98 89       	ldd	r25, Y+16	; 0x10
    3ade:	00 97       	sbiw	r24, 0x00	; 0
    3ae0:	29 f4       	brne	.+10     	; 0x3aec <ULTRASONIC_u8MeasureDistance+0x154>
	{
		ULTRASONIC_voidReset();
    3ae2:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <ULTRASONIC_voidReset>
		return ULTRASONIC_TIMEOUT;
    3ae6:	82 e0       	ldi	r24, 0x02	; 2
    3ae8:	8c 8b       	std	Y+20, r24	; 0x14
    3aea:	05 c0       	rjmp	.+10     	; 0x3af6 <ULTRASONIC_u8MeasureDistance+0x15e>
	}

	/* Get result */
	return ULTRASONIC_u8GetDistance(Copy_pu16Distance);
    3aec:	8a 89       	ldd	r24, Y+18	; 0x12
    3aee:	9b 89       	ldd	r25, Y+19	; 0x13
    3af0:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <ULTRASONIC_u8GetDistance>
    3af4:	8c 8b       	std	Y+20, r24	; 0x14
    3af6:	8c 89       	ldd	r24, Y+20	; 0x14
}
    3af8:	64 96       	adiw	r28, 0x14	; 20
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	f8 94       	cli
    3afe:	de bf       	out	0x3e, r29	; 62
    3b00:	0f be       	out	0x3f, r0	; 63
    3b02:	cd bf       	out	0x3d, r28	; 61
    3b04:	cf 91       	pop	r28
    3b06:	df 91       	pop	r29
    3b08:	08 95       	ret

00003b0a <ULTRASONIC_u8StartMeasurement>:

u8 ULTRASONIC_u8StartMeasurement(void)
{
    3b0a:	df 93       	push	r29
    3b0c:	cf 93       	push	r28
    3b0e:	cd b7       	in	r28, 0x3d	; 61
    3b10:	de b7       	in	r29, 0x3e	; 62
    3b12:	e5 97       	sbiw	r28, 0x35	; 53
    3b14:	0f b6       	in	r0, 0x3f	; 63
    3b16:	f8 94       	cli
    3b18:	de bf       	out	0x3e, r29	; 62
    3b1a:	0f be       	out	0x3f, r0	; 63
    3b1c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Status;
	u16 Local_u16EchoTimeout = 1000;
    3b1e:	88 ee       	ldi	r24, 0xE8	; 232
    3b20:	93 e0       	ldi	r25, 0x03	; 3
    3b22:	9a ab       	std	Y+50, r25	; 0x32
    3b24:	89 ab       	std	Y+49, r24	; 0x31

	/* Reset ICU first */
	ICU_voidReset();
    3b26:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <ICU_voidReset>
    3b2a:	c3 c0       	rjmp	.+390    	; 0x3cb2 <ULTRASONIC_u8StartMeasurement+0x1a8>

	/* Wait for echo pin to be LOW before starting */
	while (DIO_u8GetPinVal(ULTRASONIC_ECHO_PORT, ULTRASONIC_ECHO_PIN) && Local_u16EchoTimeout > 0)
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	a0 e2       	ldi	r26, 0x20	; 32
    3b32:	b1 e4       	ldi	r27, 0x41	; 65
    3b34:	8d a7       	std	Y+45, r24	; 0x2d
    3b36:	9e a7       	std	Y+46, r25	; 0x2e
    3b38:	af a7       	std	Y+47, r26	; 0x2f
    3b3a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3b3c:	6d a5       	ldd	r22, Y+45	; 0x2d
    3b3e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3b40:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b42:	98 a9       	ldd	r25, Y+48	; 0x30
    3b44:	2b ea       	ldi	r18, 0xAB	; 171
    3b46:	3a ea       	ldi	r19, 0xAA	; 170
    3b48:	4a e2       	ldi	r20, 0x2A	; 42
    3b4a:	50 e4       	ldi	r21, 0x40	; 64
    3b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b50:	dc 01       	movw	r26, r24
    3b52:	cb 01       	movw	r24, r22
    3b54:	89 a7       	std	Y+41, r24	; 0x29
    3b56:	9a a7       	std	Y+42, r25	; 0x2a
    3b58:	ab a7       	std	Y+43, r26	; 0x2b
    3b5a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3b5c:	69 a5       	ldd	r22, Y+41	; 0x29
    3b5e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3b60:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b62:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	40 e8       	ldi	r20, 0x80	; 128
    3b6a:	5f e3       	ldi	r21, 0x3F	; 63
    3b6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b70:	88 23       	and	r24, r24
    3b72:	1c f4       	brge	.+6      	; 0x3b7a <ULTRASONIC_u8StartMeasurement+0x70>
		__ticks = 1;
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	88 a7       	std	Y+40, r24	; 0x28
    3b78:	91 c0       	rjmp	.+290    	; 0x3c9c <ULTRASONIC_u8StartMeasurement+0x192>
	else if (__tmp > 255)
    3b7a:	69 a5       	ldd	r22, Y+41	; 0x29
    3b7c:	7a a5       	ldd	r23, Y+42	; 0x2a
    3b7e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b80:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b82:	20 e0       	ldi	r18, 0x00	; 0
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	4f e7       	ldi	r20, 0x7F	; 127
    3b88:	53 e4       	ldi	r21, 0x43	; 67
    3b8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b8e:	18 16       	cp	r1, r24
    3b90:	0c f0       	brlt	.+2      	; 0x3b94 <ULTRASONIC_u8StartMeasurement+0x8a>
    3b92:	7b c0       	rjmp	.+246    	; 0x3c8a <ULTRASONIC_u8StartMeasurement+0x180>
	{
		_delay_ms(__us / 1000.0);
    3b94:	6d a5       	ldd	r22, Y+45	; 0x2d
    3b96:	7e a5       	ldd	r23, Y+46	; 0x2e
    3b98:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b9a:	98 a9       	ldd	r25, Y+48	; 0x30
    3b9c:	20 e0       	ldi	r18, 0x00	; 0
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
    3ba0:	4a e7       	ldi	r20, 0x7A	; 122
    3ba2:	54 e4       	ldi	r21, 0x44	; 68
    3ba4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ba8:	dc 01       	movw	r26, r24
    3baa:	cb 01       	movw	r24, r22
    3bac:	8c a3       	std	Y+36, r24	; 0x24
    3bae:	9d a3       	std	Y+37, r25	; 0x25
    3bb0:	ae a3       	std	Y+38, r26	; 0x26
    3bb2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bb4:	6c a1       	ldd	r22, Y+36	; 0x24
    3bb6:	7d a1       	ldd	r23, Y+37	; 0x25
    3bb8:	8e a1       	ldd	r24, Y+38	; 0x26
    3bba:	9f a1       	ldd	r25, Y+39	; 0x27
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	4a ef       	ldi	r20, 0xFA	; 250
    3bc2:	54 e4       	ldi	r21, 0x44	; 68
    3bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc8:	dc 01       	movw	r26, r24
    3bca:	cb 01       	movw	r24, r22
    3bcc:	88 a3       	std	Y+32, r24	; 0x20
    3bce:	99 a3       	std	Y+33, r25	; 0x21
    3bd0:	aa a3       	std	Y+34, r26	; 0x22
    3bd2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3bd4:	68 a1       	ldd	r22, Y+32	; 0x20
    3bd6:	79 a1       	ldd	r23, Y+33	; 0x21
    3bd8:	8a a1       	ldd	r24, Y+34	; 0x22
    3bda:	9b a1       	ldd	r25, Y+35	; 0x23
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	40 e8       	ldi	r20, 0x80	; 128
    3be2:	5f e3       	ldi	r21, 0x3F	; 63
    3be4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3be8:	88 23       	and	r24, r24
    3bea:	2c f4       	brge	.+10     	; 0x3bf6 <ULTRASONIC_u8StartMeasurement+0xec>
		__ticks = 1;
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	9f 8f       	std	Y+31, r25	; 0x1f
    3bf2:	8e 8f       	std	Y+30, r24	; 0x1e
    3bf4:	3f c0       	rjmp	.+126    	; 0x3c74 <ULTRASONIC_u8StartMeasurement+0x16a>
	else if (__tmp > 65535)
    3bf6:	68 a1       	ldd	r22, Y+32	; 0x20
    3bf8:	79 a1       	ldd	r23, Y+33	; 0x21
    3bfa:	8a a1       	ldd	r24, Y+34	; 0x22
    3bfc:	9b a1       	ldd	r25, Y+35	; 0x23
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	3f ef       	ldi	r19, 0xFF	; 255
    3c02:	4f e7       	ldi	r20, 0x7F	; 127
    3c04:	57 e4       	ldi	r21, 0x47	; 71
    3c06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c0a:	18 16       	cp	r1, r24
    3c0c:	4c f5       	brge	.+82     	; 0x3c60 <ULTRASONIC_u8StartMeasurement+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c0e:	6c a1       	ldd	r22, Y+36	; 0x24
    3c10:	7d a1       	ldd	r23, Y+37	; 0x25
    3c12:	8e a1       	ldd	r24, Y+38	; 0x26
    3c14:	9f a1       	ldd	r25, Y+39	; 0x27
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	40 e2       	ldi	r20, 0x20	; 32
    3c1c:	51 e4       	ldi	r21, 0x41	; 65
    3c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c22:	dc 01       	movw	r26, r24
    3c24:	cb 01       	movw	r24, r22
    3c26:	bc 01       	movw	r22, r24
    3c28:	cd 01       	movw	r24, r26
    3c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	9f 8f       	std	Y+31, r25	; 0x1f
    3c34:	8e 8f       	std	Y+30, r24	; 0x1e
    3c36:	0f c0       	rjmp	.+30     	; 0x3c56 <ULTRASONIC_u8StartMeasurement+0x14c>
    3c38:	88 ec       	ldi	r24, 0xC8	; 200
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	9d 8f       	std	Y+29, r25	; 0x1d
    3c3e:	8c 8f       	std	Y+28, r24	; 0x1c
    3c40:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3c42:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3c44:	01 97       	sbiw	r24, 0x01	; 1
    3c46:	f1 f7       	brne	.-4      	; 0x3c44 <ULTRASONIC_u8StartMeasurement+0x13a>
    3c48:	9d 8f       	std	Y+29, r25	; 0x1d
    3c4a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c4e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c50:	01 97       	sbiw	r24, 0x01	; 1
    3c52:	9f 8f       	std	Y+31, r25	; 0x1f
    3c54:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c56:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c58:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c5a:	00 97       	sbiw	r24, 0x00	; 0
    3c5c:	69 f7       	brne	.-38     	; 0x3c38 <ULTRASONIC_u8StartMeasurement+0x12e>
    3c5e:	24 c0       	rjmp	.+72     	; 0x3ca8 <ULTRASONIC_u8StartMeasurement+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c60:	68 a1       	ldd	r22, Y+32	; 0x20
    3c62:	79 a1       	ldd	r23, Y+33	; 0x21
    3c64:	8a a1       	ldd	r24, Y+34	; 0x22
    3c66:	9b a1       	ldd	r25, Y+35	; 0x23
    3c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	9f 8f       	std	Y+31, r25	; 0x1f
    3c72:	8e 8f       	std	Y+30, r24	; 0x1e
    3c74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c76:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c78:	9b 8f       	std	Y+27, r25	; 0x1b
    3c7a:	8a 8f       	std	Y+26, r24	; 0x1a
    3c7c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3c7e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3c80:	01 97       	sbiw	r24, 0x01	; 1
    3c82:	f1 f7       	brne	.-4      	; 0x3c80 <ULTRASONIC_u8StartMeasurement+0x176>
    3c84:	9b 8f       	std	Y+27, r25	; 0x1b
    3c86:	8a 8f       	std	Y+26, r24	; 0x1a
    3c88:	0f c0       	rjmp	.+30     	; 0x3ca8 <ULTRASONIC_u8StartMeasurement+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3c8a:	69 a5       	ldd	r22, Y+41	; 0x29
    3c8c:	7a a5       	ldd	r23, Y+42	; 0x2a
    3c8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c90:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c96:	dc 01       	movw	r26, r24
    3c98:	cb 01       	movw	r24, r22
    3c9a:	88 a7       	std	Y+40, r24	; 0x28
    3c9c:	88 a5       	ldd	r24, Y+40	; 0x28
    3c9e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3ca0:	89 8d       	ldd	r24, Y+25	; 0x19
    3ca2:	8a 95       	dec	r24
    3ca4:	f1 f7       	brne	.-4      	; 0x3ca2 <ULTRASONIC_u8StartMeasurement+0x198>
    3ca6:	89 8f       	std	Y+25, r24	; 0x19
	{
		_delay_us(10);
		Local_u16EchoTimeout--;
    3ca8:	89 a9       	ldd	r24, Y+49	; 0x31
    3caa:	9a a9       	ldd	r25, Y+50	; 0x32
    3cac:	01 97       	sbiw	r24, 0x01	; 1
    3cae:	9a ab       	std	Y+50, r25	; 0x32
    3cb0:	89 ab       	std	Y+49, r24	; 0x31

	/* Reset ICU first */
	ICU_voidReset();

	/* Wait for echo pin to be LOW before starting */
	while (DIO_u8GetPinVal(ULTRASONIC_ECHO_PORT, ULTRASONIC_ECHO_PIN) && Local_u16EchoTimeout > 0)
    3cb2:	83 e0       	ldi	r24, 0x03	; 3
    3cb4:	62 e0       	ldi	r22, 0x02	; 2
    3cb6:	0e 94 c4 18 	call	0x3188	; 0x3188 <DIO_u8GetPinVal>
    3cba:	88 23       	and	r24, r24
    3cbc:	29 f0       	breq	.+10     	; 0x3cc8 <ULTRASONIC_u8StartMeasurement+0x1be>
    3cbe:	89 a9       	ldd	r24, Y+49	; 0x31
    3cc0:	9a a9       	ldd	r25, Y+50	; 0x32
    3cc2:	00 97       	sbiw	r24, 0x00	; 0
    3cc4:	09 f0       	breq	.+2      	; 0x3cc8 <ULTRASONIC_u8StartMeasurement+0x1be>
    3cc6:	32 cf       	rjmp	.-412    	; 0x3b2c <ULTRASONIC_u8StartMeasurement+0x22>
	{
		_delay_us(10);
		Local_u16EchoTimeout--;
	}

	if (Local_u16EchoTimeout == 0)
    3cc8:	89 a9       	ldd	r24, Y+49	; 0x31
    3cca:	9a a9       	ldd	r25, Y+50	; 0x32
    3ccc:	00 97       	sbiw	r24, 0x00	; 0
    3cce:	19 f4       	brne	.+6      	; 0x3cd6 <ULTRASONIC_u8StartMeasurement+0x1cc>
	{
		return ULTRASONIC_ERROR;
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	8c ab       	std	Y+52, r24	; 0x34
    3cd4:	cc c0       	rjmp	.+408    	; 0x3e6e <ULTRASONIC_u8StartMeasurement+0x364>
	}

	/* Send trigger pulse */
	ULTRASONIC_voidSendTriggerPulse();
    3cd6:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <ULTRASONIC_voidSendTriggerPulse>
    3cda:	80 e0       	ldi	r24, 0x00	; 0
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	a8 ec       	ldi	r26, 0xC8	; 200
    3ce0:	b2 e4       	ldi	r27, 0x42	; 66
    3ce2:	8d 8b       	std	Y+21, r24	; 0x15
    3ce4:	9e 8b       	std	Y+22, r25	; 0x16
    3ce6:	af 8b       	std	Y+23, r26	; 0x17
    3ce8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3cea:	6d 89       	ldd	r22, Y+21	; 0x15
    3cec:	7e 89       	ldd	r23, Y+22	; 0x16
    3cee:	8f 89       	ldd	r24, Y+23	; 0x17
    3cf0:	98 8d       	ldd	r25, Y+24	; 0x18
    3cf2:	2b ea       	ldi	r18, 0xAB	; 171
    3cf4:	3a ea       	ldi	r19, 0xAA	; 170
    3cf6:	4a e2       	ldi	r20, 0x2A	; 42
    3cf8:	50 e4       	ldi	r21, 0x40	; 64
    3cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	89 8b       	std	Y+17, r24	; 0x11
    3d04:	9a 8b       	std	Y+18, r25	; 0x12
    3d06:	ab 8b       	std	Y+19, r26	; 0x13
    3d08:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3d0a:	69 89       	ldd	r22, Y+17	; 0x11
    3d0c:	7a 89       	ldd	r23, Y+18	; 0x12
    3d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d10:	9c 89       	ldd	r25, Y+20	; 0x14
    3d12:	20 e0       	ldi	r18, 0x00	; 0
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	40 e8       	ldi	r20, 0x80	; 128
    3d18:	5f e3       	ldi	r21, 0x3F	; 63
    3d1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d1e:	88 23       	and	r24, r24
    3d20:	1c f4       	brge	.+6      	; 0x3d28 <ULTRASONIC_u8StartMeasurement+0x21e>
		__ticks = 1;
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	88 8b       	std	Y+16, r24	; 0x10
    3d26:	91 c0       	rjmp	.+290    	; 0x3e4a <ULTRASONIC_u8StartMeasurement+0x340>
	else if (__tmp > 255)
    3d28:	69 89       	ldd	r22, Y+17	; 0x11
    3d2a:	7a 89       	ldd	r23, Y+18	; 0x12
    3d2c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d2e:	9c 89       	ldd	r25, Y+20	; 0x14
    3d30:	20 e0       	ldi	r18, 0x00	; 0
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	4f e7       	ldi	r20, 0x7F	; 127
    3d36:	53 e4       	ldi	r21, 0x43	; 67
    3d38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d3c:	18 16       	cp	r1, r24
    3d3e:	0c f0       	brlt	.+2      	; 0x3d42 <ULTRASONIC_u8StartMeasurement+0x238>
    3d40:	7b c0       	rjmp	.+246    	; 0x3e38 <ULTRASONIC_u8StartMeasurement+0x32e>
	{
		_delay_ms(__us / 1000.0);
    3d42:	6d 89       	ldd	r22, Y+21	; 0x15
    3d44:	7e 89       	ldd	r23, Y+22	; 0x16
    3d46:	8f 89       	ldd	r24, Y+23	; 0x17
    3d48:	98 8d       	ldd	r25, Y+24	; 0x18
    3d4a:	20 e0       	ldi	r18, 0x00	; 0
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	4a e7       	ldi	r20, 0x7A	; 122
    3d50:	54 e4       	ldi	r21, 0x44	; 68
    3d52:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d56:	dc 01       	movw	r26, r24
    3d58:	cb 01       	movw	r24, r22
    3d5a:	8c 87       	std	Y+12, r24	; 0x0c
    3d5c:	9d 87       	std	Y+13, r25	; 0x0d
    3d5e:	ae 87       	std	Y+14, r26	; 0x0e
    3d60:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d62:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d64:	7d 85       	ldd	r23, Y+13	; 0x0d
    3d66:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d68:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d6a:	20 e0       	ldi	r18, 0x00	; 0
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	4a ef       	ldi	r20, 0xFA	; 250
    3d70:	54 e4       	ldi	r21, 0x44	; 68
    3d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d76:	dc 01       	movw	r26, r24
    3d78:	cb 01       	movw	r24, r22
    3d7a:	88 87       	std	Y+8, r24	; 0x08
    3d7c:	99 87       	std	Y+9, r25	; 0x09
    3d7e:	aa 87       	std	Y+10, r26	; 0x0a
    3d80:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3d82:	68 85       	ldd	r22, Y+8	; 0x08
    3d84:	79 85       	ldd	r23, Y+9	; 0x09
    3d86:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d88:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	40 e8       	ldi	r20, 0x80	; 128
    3d90:	5f e3       	ldi	r21, 0x3F	; 63
    3d92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d96:	88 23       	and	r24, r24
    3d98:	2c f4       	brge	.+10     	; 0x3da4 <ULTRASONIC_u8StartMeasurement+0x29a>
		__ticks = 1;
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	9f 83       	std	Y+7, r25	; 0x07
    3da0:	8e 83       	std	Y+6, r24	; 0x06
    3da2:	3f c0       	rjmp	.+126    	; 0x3e22 <ULTRASONIC_u8StartMeasurement+0x318>
	else if (__tmp > 65535)
    3da4:	68 85       	ldd	r22, Y+8	; 0x08
    3da6:	79 85       	ldd	r23, Y+9	; 0x09
    3da8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3daa:	9b 85       	ldd	r25, Y+11	; 0x0b
    3dac:	20 e0       	ldi	r18, 0x00	; 0
    3dae:	3f ef       	ldi	r19, 0xFF	; 255
    3db0:	4f e7       	ldi	r20, 0x7F	; 127
    3db2:	57 e4       	ldi	r21, 0x47	; 71
    3db4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3db8:	18 16       	cp	r1, r24
    3dba:	4c f5       	brge	.+82     	; 0x3e0e <ULTRASONIC_u8StartMeasurement+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dbc:	6c 85       	ldd	r22, Y+12	; 0x0c
    3dbe:	7d 85       	ldd	r23, Y+13	; 0x0d
    3dc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3dc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3dc4:	20 e0       	ldi	r18, 0x00	; 0
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
    3dc8:	40 e2       	ldi	r20, 0x20	; 32
    3dca:	51 e4       	ldi	r21, 0x41	; 65
    3dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd0:	dc 01       	movw	r26, r24
    3dd2:	cb 01       	movw	r24, r22
    3dd4:	bc 01       	movw	r22, r24
    3dd6:	cd 01       	movw	r24, r26
    3dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ddc:	dc 01       	movw	r26, r24
    3dde:	cb 01       	movw	r24, r22
    3de0:	9f 83       	std	Y+7, r25	; 0x07
    3de2:	8e 83       	std	Y+6, r24	; 0x06
    3de4:	0f c0       	rjmp	.+30     	; 0x3e04 <ULTRASONIC_u8StartMeasurement+0x2fa>
    3de6:	88 ec       	ldi	r24, 0xC8	; 200
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	9d 83       	std	Y+5, r25	; 0x05
    3dec:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3dee:	8c 81       	ldd	r24, Y+4	; 0x04
    3df0:	9d 81       	ldd	r25, Y+5	; 0x05
    3df2:	01 97       	sbiw	r24, 0x01	; 1
    3df4:	f1 f7       	brne	.-4      	; 0x3df2 <ULTRASONIC_u8StartMeasurement+0x2e8>
    3df6:	9d 83       	std	Y+5, r25	; 0x05
    3df8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dfa:	8e 81       	ldd	r24, Y+6	; 0x06
    3dfc:	9f 81       	ldd	r25, Y+7	; 0x07
    3dfe:	01 97       	sbiw	r24, 0x01	; 1
    3e00:	9f 83       	std	Y+7, r25	; 0x07
    3e02:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e04:	8e 81       	ldd	r24, Y+6	; 0x06
    3e06:	9f 81       	ldd	r25, Y+7	; 0x07
    3e08:	00 97       	sbiw	r24, 0x00	; 0
    3e0a:	69 f7       	brne	.-38     	; 0x3de6 <ULTRASONIC_u8StartMeasurement+0x2dc>
    3e0c:	24 c0       	rjmp	.+72     	; 0x3e56 <ULTRASONIC_u8StartMeasurement+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e0e:	68 85       	ldd	r22, Y+8	; 0x08
    3e10:	79 85       	ldd	r23, Y+9	; 0x09
    3e12:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e14:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e1a:	dc 01       	movw	r26, r24
    3e1c:	cb 01       	movw	r24, r22
    3e1e:	9f 83       	std	Y+7, r25	; 0x07
    3e20:	8e 83       	std	Y+6, r24	; 0x06
    3e22:	8e 81       	ldd	r24, Y+6	; 0x06
    3e24:	9f 81       	ldd	r25, Y+7	; 0x07
    3e26:	9b 83       	std	Y+3, r25	; 0x03
    3e28:	8a 83       	std	Y+2, r24	; 0x02
    3e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e2c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e2e:	01 97       	sbiw	r24, 0x01	; 1
    3e30:	f1 f7       	brne	.-4      	; 0x3e2e <ULTRASONIC_u8StartMeasurement+0x324>
    3e32:	9b 83       	std	Y+3, r25	; 0x03
    3e34:	8a 83       	std	Y+2, r24	; 0x02
    3e36:	0f c0       	rjmp	.+30     	; 0x3e56 <ULTRASONIC_u8StartMeasurement+0x34c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3e38:	69 89       	ldd	r22, Y+17	; 0x11
    3e3a:	7a 89       	ldd	r23, Y+18	; 0x12
    3e3c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e3e:	9c 89       	ldd	r25, Y+20	; 0x14
    3e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e44:	dc 01       	movw	r26, r24
    3e46:	cb 01       	movw	r24, r22
    3e48:	88 8b       	std	Y+16, r24	; 0x10
    3e4a:	88 89       	ldd	r24, Y+16	; 0x10
    3e4c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e4e:	89 81       	ldd	r24, Y+1	; 0x01
    3e50:	8a 95       	dec	r24
    3e52:	f1 f7       	brne	.-4      	; 0x3e50 <ULTRASONIC_u8StartMeasurement+0x346>
    3e54:	89 83       	std	Y+1, r24	; 0x01

	/* Wait longer for echo to start */
	_delay_us(100);

	/* Start ICU measurement */
	Local_u8Status = ICU_u8StartMeasurement();
    3e56:	0e 94 20 14 	call	0x2840	; 0x2840 <ICU_u8StartMeasurement>
    3e5a:	8b ab       	std	Y+51, r24	; 0x33

	return (Local_u8Status == ICU_OK) ? ULTRASONIC_OK : ULTRASONIC_ERROR;
    3e5c:	8b a9       	ldd	r24, Y+51	; 0x33
    3e5e:	8d ab       	std	Y+53, r24	; 0x35
    3e60:	8d a9       	ldd	r24, Y+53	; 0x35
    3e62:	88 23       	and	r24, r24
    3e64:	11 f0       	breq	.+4      	; 0x3e6a <ULTRASONIC_u8StartMeasurement+0x360>
    3e66:	81 e0       	ldi	r24, 0x01	; 1
    3e68:	8d ab       	std	Y+53, r24	; 0x35
    3e6a:	8d a9       	ldd	r24, Y+53	; 0x35
    3e6c:	8c ab       	std	Y+52, r24	; 0x34
    3e6e:	8c a9       	ldd	r24, Y+52	; 0x34
}
    3e70:	e5 96       	adiw	r28, 0x35	; 53
    3e72:	0f b6       	in	r0, 0x3f	; 63
    3e74:	f8 94       	cli
    3e76:	de bf       	out	0x3e, r29	; 62
    3e78:	0f be       	out	0x3f, r0	; 63
    3e7a:	cd bf       	out	0x3d, r28	; 61
    3e7c:	cf 91       	pop	r28
    3e7e:	df 91       	pop	r29
    3e80:	08 95       	ret

00003e82 <ULTRASONIC_u8GetDistance>:

u8 ULTRASONIC_u8GetDistance(u16* Copy_pu16Distance)
{
    3e82:	df 93       	push	r29
    3e84:	cf 93       	push	r28
    3e86:	cd b7       	in	r28, 0x3d	; 61
    3e88:	de b7       	in	r29, 0x3e	; 62
    3e8a:	28 97       	sbiw	r28, 0x08	; 8
    3e8c:	0f b6       	in	r0, 0x3f	; 63
    3e8e:	f8 94       	cli
    3e90:	de bf       	out	0x3e, r29	; 62
    3e92:	0f be       	out	0x3f, r0	; 63
    3e94:	cd bf       	out	0x3d, r28	; 61
    3e96:	9f 83       	std	Y+7, r25	; 0x07
    3e98:	8e 83       	std	Y+6, r24	; 0x06
	u32 Local_u32TimeUs;
	u8 Local_u8Status;

	if (Copy_pu16Distance == NULL)
    3e9a:	8e 81       	ldd	r24, Y+6	; 0x06
    3e9c:	9f 81       	ldd	r25, Y+7	; 0x07
    3e9e:	00 97       	sbiw	r24, 0x00	; 0
    3ea0:	19 f4       	brne	.+6      	; 0x3ea8 <ULTRASONIC_u8GetDistance+0x26>
	{
		return ULTRASONIC_ERROR;
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	88 87       	std	Y+8, r24	; 0x08
    3ea6:	1e c0       	rjmp	.+60     	; 0x3ee4 <ULTRASONIC_u8GetDistance+0x62>
	}

	/* Check if measurement is complete */
	if (!ICU_u8IsMeasurementComplete())
    3ea8:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <ICU_u8IsMeasurementComplete>
    3eac:	88 23       	and	r24, r24
    3eae:	19 f4       	brne	.+6      	; 0x3eb6 <ULTRASONIC_u8GetDistance+0x34>
	{
		return ULTRASONIC_ERROR;
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	88 87       	std	Y+8, r24	; 0x08
    3eb4:	17 c0       	rjmp	.+46     	; 0x3ee4 <ULTRASONIC_u8GetDistance+0x62>
	}

	/* Get measured time */
	Local_u8Status = ICU_u8GetMeasuredTimeUs(&Local_u32TimeUs);
    3eb6:	ce 01       	movw	r24, r28
    3eb8:	02 96       	adiw	r24, 0x02	; 2
    3eba:	0e 94 d6 14 	call	0x29ac	; 0x29ac <ICU_u8GetMeasuredTimeUs>
    3ebe:	89 83       	std	Y+1, r24	; 0x01
	if (Local_u8Status != ICU_OK)
    3ec0:	89 81       	ldd	r24, Y+1	; 0x01
    3ec2:	88 23       	and	r24, r24
    3ec4:	19 f0       	breq	.+6      	; 0x3ecc <ULTRASONIC_u8GetDistance+0x4a>
	{
		return ULTRASONIC_ERROR;
    3ec6:	81 e0       	ldi	r24, 0x01	; 1
    3ec8:	88 87       	std	Y+8, r24	; 0x08
    3eca:	0c c0       	rjmp	.+24     	; 0x3ee4 <ULTRASONIC_u8GetDistance+0x62>
	}

	/* Convert time to distance */
	return ULTRASONIC_u8ConvertTimeToDistance(Local_u32TimeUs, Copy_pu16Distance);
    3ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ece:	9b 81       	ldd	r25, Y+3	; 0x03
    3ed0:	ac 81       	ldd	r26, Y+4	; 0x04
    3ed2:	bd 81       	ldd	r27, Y+5	; 0x05
    3ed4:	2e 81       	ldd	r18, Y+6	; 0x06
    3ed6:	3f 81       	ldd	r19, Y+7	; 0x07
    3ed8:	bc 01       	movw	r22, r24
    3eda:	cd 01       	movw	r24, r26
    3edc:	a9 01       	movw	r20, r18
    3ede:	0e 94 8b 20 	call	0x4116	; 0x4116 <ULTRASONIC_u8ConvertTimeToDistance>
    3ee2:	88 87       	std	Y+8, r24	; 0x08
    3ee4:	88 85       	ldd	r24, Y+8	; 0x08
}
    3ee6:	28 96       	adiw	r28, 0x08	; 8
    3ee8:	0f b6       	in	r0, 0x3f	; 63
    3eea:	f8 94       	cli
    3eec:	de bf       	out	0x3e, r29	; 62
    3eee:	0f be       	out	0x3f, r0	; 63
    3ef0:	cd bf       	out	0x3d, r28	; 61
    3ef2:	cf 91       	pop	r28
    3ef4:	df 91       	pop	r29
    3ef6:	08 95       	ret

00003ef8 <ULTRASONIC_u8IsMeasurementComplete>:

u8 ULTRASONIC_u8IsMeasurementComplete(void)
{
    3ef8:	df 93       	push	r29
    3efa:	cf 93       	push	r28
    3efc:	cd b7       	in	r28, 0x3d	; 61
    3efe:	de b7       	in	r29, 0x3e	; 62
	return ICU_u8IsMeasurementComplete();
    3f00:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <ICU_u8IsMeasurementComplete>
}
    3f04:	cf 91       	pop	r28
    3f06:	df 91       	pop	r29
    3f08:	08 95       	ret

00003f0a <ULTRASONIC_u8GetRawTime>:

u8 ULTRASONIC_u8GetRawTime(u32* Copy_pu32TimeUs)
{
    3f0a:	df 93       	push	r29
    3f0c:	cf 93       	push	r28
    3f0e:	00 d0       	rcall	.+0      	; 0x3f10 <ULTRASONIC_u8GetRawTime+0x6>
    3f10:	0f 92       	push	r0
    3f12:	cd b7       	in	r28, 0x3d	; 61
    3f14:	de b7       	in	r29, 0x3e	; 62
    3f16:	9a 83       	std	Y+2, r25	; 0x02
    3f18:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pu32TimeUs == NULL)
    3f1a:	89 81       	ldd	r24, Y+1	; 0x01
    3f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f1e:	00 97       	sbiw	r24, 0x00	; 0
    3f20:	19 f4       	brne	.+6      	; 0x3f28 <ULTRASONIC_u8GetRawTime+0x1e>
	{
		return ULTRASONIC_ERROR;
    3f22:	81 e0       	ldi	r24, 0x01	; 1
    3f24:	8b 83       	std	Y+3, r24	; 0x03
    3f26:	0c c0       	rjmp	.+24     	; 0x3f40 <ULTRASONIC_u8GetRawTime+0x36>
	}

	if (!ICU_u8IsMeasurementComplete())
    3f28:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <ICU_u8IsMeasurementComplete>
    3f2c:	88 23       	and	r24, r24
    3f2e:	19 f4       	brne	.+6      	; 0x3f36 <ULTRASONIC_u8GetRawTime+0x2c>
	{
		return ULTRASONIC_ERROR;
    3f30:	81 e0       	ldi	r24, 0x01	; 1
    3f32:	8b 83       	std	Y+3, r24	; 0x03
    3f34:	05 c0       	rjmp	.+10     	; 0x3f40 <ULTRASONIC_u8GetRawTime+0x36>
	}

	return ICU_u8GetMeasuredTimeUs(Copy_pu32TimeUs);
    3f36:	89 81       	ldd	r24, Y+1	; 0x01
    3f38:	9a 81       	ldd	r25, Y+2	; 0x02
    3f3a:	0e 94 d6 14 	call	0x29ac	; 0x29ac <ICU_u8GetMeasuredTimeUs>
    3f3e:	8b 83       	std	Y+3, r24	; 0x03
    3f40:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3f42:	0f 90       	pop	r0
    3f44:	0f 90       	pop	r0
    3f46:	0f 90       	pop	r0
    3f48:	cf 91       	pop	r28
    3f4a:	df 91       	pop	r29
    3f4c:	08 95       	ret

00003f4e <ULTRASONIC_voidReset>:

void ULTRASONIC_voidReset(void)
{
    3f4e:	df 93       	push	r29
    3f50:	cf 93       	push	r28
    3f52:	cd b7       	in	r28, 0x3d	; 61
    3f54:	de b7       	in	r29, 0x3e	; 62
	ICU_voidReset();
    3f56:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <ICU_voidReset>
}
    3f5a:	cf 91       	pop	r28
    3f5c:	df 91       	pop	r29
    3f5e:	08 95       	ret

00003f60 <ULTRASONIC_voidSendTriggerPulse>:

/* Private Functions */

static void ULTRASONIC_voidSendTriggerPulse(void)
{
    3f60:	df 93       	push	r29
    3f62:	cf 93       	push	r28
    3f64:	cd b7       	in	r28, 0x3d	; 61
    3f66:	de b7       	in	r29, 0x3e	; 62
    3f68:	68 97       	sbiw	r28, 0x18	; 24
    3f6a:	0f b6       	in	r0, 0x3f	; 63
    3f6c:	f8 94       	cli
    3f6e:	de bf       	out	0x3e, r29	; 62
    3f70:	0f be       	out	0x3f, r0	; 63
    3f72:	cd bf       	out	0x3d, r28	; 61
	/* Send 10us trigger pulse */
	DIO_vidSetPinVal(ULTRASONIC_TRIG_PORT, ULTRASONIC_TRIG_PIN, DIO_HIGH);
    3f74:	81 e0       	ldi	r24, 0x01	; 1
    3f76:	60 e0       	ldi	r22, 0x00	; 0
    3f78:	4f ef       	ldi	r20, 0xFF	; 255
    3f7a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <DIO_vidSetPinVal>
    3f7e:	80 e0       	ldi	r24, 0x00	; 0
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	a0 e2       	ldi	r26, 0x20	; 32
    3f84:	b1 e4       	ldi	r27, 0x41	; 65
    3f86:	8d 8b       	std	Y+21, r24	; 0x15
    3f88:	9e 8b       	std	Y+22, r25	; 0x16
    3f8a:	af 8b       	std	Y+23, r26	; 0x17
    3f8c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3f8e:	6d 89       	ldd	r22, Y+21	; 0x15
    3f90:	7e 89       	ldd	r23, Y+22	; 0x16
    3f92:	8f 89       	ldd	r24, Y+23	; 0x17
    3f94:	98 8d       	ldd	r25, Y+24	; 0x18
    3f96:	2b ea       	ldi	r18, 0xAB	; 171
    3f98:	3a ea       	ldi	r19, 0xAA	; 170
    3f9a:	4a e2       	ldi	r20, 0x2A	; 42
    3f9c:	50 e4       	ldi	r21, 0x40	; 64
    3f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	89 8b       	std	Y+17, r24	; 0x11
    3fa8:	9a 8b       	std	Y+18, r25	; 0x12
    3faa:	ab 8b       	std	Y+19, r26	; 0x13
    3fac:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3fae:	69 89       	ldd	r22, Y+17	; 0x11
    3fb0:	7a 89       	ldd	r23, Y+18	; 0x12
    3fb2:	8b 89       	ldd	r24, Y+19	; 0x13
    3fb4:	9c 89       	ldd	r25, Y+20	; 0x14
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	40 e8       	ldi	r20, 0x80	; 128
    3fbc:	5f e3       	ldi	r21, 0x3F	; 63
    3fbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fc2:	88 23       	and	r24, r24
    3fc4:	1c f4       	brge	.+6      	; 0x3fcc <ULTRASONIC_voidSendTriggerPulse+0x6c>
		__ticks = 1;
    3fc6:	81 e0       	ldi	r24, 0x01	; 1
    3fc8:	88 8b       	std	Y+16, r24	; 0x10
    3fca:	91 c0       	rjmp	.+290    	; 0x40ee <ULTRASONIC_voidSendTriggerPulse+0x18e>
	else if (__tmp > 255)
    3fcc:	69 89       	ldd	r22, Y+17	; 0x11
    3fce:	7a 89       	ldd	r23, Y+18	; 0x12
    3fd0:	8b 89       	ldd	r24, Y+19	; 0x13
    3fd2:	9c 89       	ldd	r25, Y+20	; 0x14
    3fd4:	20 e0       	ldi	r18, 0x00	; 0
    3fd6:	30 e0       	ldi	r19, 0x00	; 0
    3fd8:	4f e7       	ldi	r20, 0x7F	; 127
    3fda:	53 e4       	ldi	r21, 0x43	; 67
    3fdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fe0:	18 16       	cp	r1, r24
    3fe2:	0c f0       	brlt	.+2      	; 0x3fe6 <ULTRASONIC_voidSendTriggerPulse+0x86>
    3fe4:	7b c0       	rjmp	.+246    	; 0x40dc <ULTRASONIC_voidSendTriggerPulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    3fe6:	6d 89       	ldd	r22, Y+21	; 0x15
    3fe8:	7e 89       	ldd	r23, Y+22	; 0x16
    3fea:	8f 89       	ldd	r24, Y+23	; 0x17
    3fec:	98 8d       	ldd	r25, Y+24	; 0x18
    3fee:	20 e0       	ldi	r18, 0x00	; 0
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	4a e7       	ldi	r20, 0x7A	; 122
    3ff4:	54 e4       	ldi	r21, 0x44	; 68
    3ff6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ffa:	dc 01       	movw	r26, r24
    3ffc:	cb 01       	movw	r24, r22
    3ffe:	8c 87       	std	Y+12, r24	; 0x0c
    4000:	9d 87       	std	Y+13, r25	; 0x0d
    4002:	ae 87       	std	Y+14, r26	; 0x0e
    4004:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4006:	6c 85       	ldd	r22, Y+12	; 0x0c
    4008:	7d 85       	ldd	r23, Y+13	; 0x0d
    400a:	8e 85       	ldd	r24, Y+14	; 0x0e
    400c:	9f 85       	ldd	r25, Y+15	; 0x0f
    400e:	20 e0       	ldi	r18, 0x00	; 0
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	4a ef       	ldi	r20, 0xFA	; 250
    4014:	54 e4       	ldi	r21, 0x44	; 68
    4016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    401a:	dc 01       	movw	r26, r24
    401c:	cb 01       	movw	r24, r22
    401e:	88 87       	std	Y+8, r24	; 0x08
    4020:	99 87       	std	Y+9, r25	; 0x09
    4022:	aa 87       	std	Y+10, r26	; 0x0a
    4024:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4026:	68 85       	ldd	r22, Y+8	; 0x08
    4028:	79 85       	ldd	r23, Y+9	; 0x09
    402a:	8a 85       	ldd	r24, Y+10	; 0x0a
    402c:	9b 85       	ldd	r25, Y+11	; 0x0b
    402e:	20 e0       	ldi	r18, 0x00	; 0
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	40 e8       	ldi	r20, 0x80	; 128
    4034:	5f e3       	ldi	r21, 0x3F	; 63
    4036:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    403a:	88 23       	and	r24, r24
    403c:	2c f4       	brge	.+10     	; 0x4048 <ULTRASONIC_voidSendTriggerPulse+0xe8>
		__ticks = 1;
    403e:	81 e0       	ldi	r24, 0x01	; 1
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	9f 83       	std	Y+7, r25	; 0x07
    4044:	8e 83       	std	Y+6, r24	; 0x06
    4046:	3f c0       	rjmp	.+126    	; 0x40c6 <ULTRASONIC_voidSendTriggerPulse+0x166>
	else if (__tmp > 65535)
    4048:	68 85       	ldd	r22, Y+8	; 0x08
    404a:	79 85       	ldd	r23, Y+9	; 0x09
    404c:	8a 85       	ldd	r24, Y+10	; 0x0a
    404e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4050:	20 e0       	ldi	r18, 0x00	; 0
    4052:	3f ef       	ldi	r19, 0xFF	; 255
    4054:	4f e7       	ldi	r20, 0x7F	; 127
    4056:	57 e4       	ldi	r21, 0x47	; 71
    4058:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    405c:	18 16       	cp	r1, r24
    405e:	4c f5       	brge	.+82     	; 0x40b2 <ULTRASONIC_voidSendTriggerPulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4060:	6c 85       	ldd	r22, Y+12	; 0x0c
    4062:	7d 85       	ldd	r23, Y+13	; 0x0d
    4064:	8e 85       	ldd	r24, Y+14	; 0x0e
    4066:	9f 85       	ldd	r25, Y+15	; 0x0f
    4068:	20 e0       	ldi	r18, 0x00	; 0
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	40 e2       	ldi	r20, 0x20	; 32
    406e:	51 e4       	ldi	r21, 0x41	; 65
    4070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4074:	dc 01       	movw	r26, r24
    4076:	cb 01       	movw	r24, r22
    4078:	bc 01       	movw	r22, r24
    407a:	cd 01       	movw	r24, r26
    407c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4080:	dc 01       	movw	r26, r24
    4082:	cb 01       	movw	r24, r22
    4084:	9f 83       	std	Y+7, r25	; 0x07
    4086:	8e 83       	std	Y+6, r24	; 0x06
    4088:	0f c0       	rjmp	.+30     	; 0x40a8 <ULTRASONIC_voidSendTriggerPulse+0x148>
    408a:	88 ec       	ldi	r24, 0xC8	; 200
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	9d 83       	std	Y+5, r25	; 0x05
    4090:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4092:	8c 81       	ldd	r24, Y+4	; 0x04
    4094:	9d 81       	ldd	r25, Y+5	; 0x05
    4096:	01 97       	sbiw	r24, 0x01	; 1
    4098:	f1 f7       	brne	.-4      	; 0x4096 <ULTRASONIC_voidSendTriggerPulse+0x136>
    409a:	9d 83       	std	Y+5, r25	; 0x05
    409c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    409e:	8e 81       	ldd	r24, Y+6	; 0x06
    40a0:	9f 81       	ldd	r25, Y+7	; 0x07
    40a2:	01 97       	sbiw	r24, 0x01	; 1
    40a4:	9f 83       	std	Y+7, r25	; 0x07
    40a6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40a8:	8e 81       	ldd	r24, Y+6	; 0x06
    40aa:	9f 81       	ldd	r25, Y+7	; 0x07
    40ac:	00 97       	sbiw	r24, 0x00	; 0
    40ae:	69 f7       	brne	.-38     	; 0x408a <ULTRASONIC_voidSendTriggerPulse+0x12a>
    40b0:	24 c0       	rjmp	.+72     	; 0x40fa <ULTRASONIC_voidSendTriggerPulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40b2:	68 85       	ldd	r22, Y+8	; 0x08
    40b4:	79 85       	ldd	r23, Y+9	; 0x09
    40b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    40b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    40ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40be:	dc 01       	movw	r26, r24
    40c0:	cb 01       	movw	r24, r22
    40c2:	9f 83       	std	Y+7, r25	; 0x07
    40c4:	8e 83       	std	Y+6, r24	; 0x06
    40c6:	8e 81       	ldd	r24, Y+6	; 0x06
    40c8:	9f 81       	ldd	r25, Y+7	; 0x07
    40ca:	9b 83       	std	Y+3, r25	; 0x03
    40cc:	8a 83       	std	Y+2, r24	; 0x02
    40ce:	8a 81       	ldd	r24, Y+2	; 0x02
    40d0:	9b 81       	ldd	r25, Y+3	; 0x03
    40d2:	01 97       	sbiw	r24, 0x01	; 1
    40d4:	f1 f7       	brne	.-4      	; 0x40d2 <ULTRASONIC_voidSendTriggerPulse+0x172>
    40d6:	9b 83       	std	Y+3, r25	; 0x03
    40d8:	8a 83       	std	Y+2, r24	; 0x02
    40da:	0f c0       	rjmp	.+30     	; 0x40fa <ULTRASONIC_voidSendTriggerPulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    40dc:	69 89       	ldd	r22, Y+17	; 0x11
    40de:	7a 89       	ldd	r23, Y+18	; 0x12
    40e0:	8b 89       	ldd	r24, Y+19	; 0x13
    40e2:	9c 89       	ldd	r25, Y+20	; 0x14
    40e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e8:	dc 01       	movw	r26, r24
    40ea:	cb 01       	movw	r24, r22
    40ec:	88 8b       	std	Y+16, r24	; 0x10
    40ee:	88 89       	ldd	r24, Y+16	; 0x10
    40f0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    40f2:	89 81       	ldd	r24, Y+1	; 0x01
    40f4:	8a 95       	dec	r24
    40f6:	f1 f7       	brne	.-4      	; 0x40f4 <ULTRASONIC_voidSendTriggerPulse+0x194>
    40f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(ULTRASONIC_TRIGGER_TIME_US);
	DIO_vidSetPinVal(ULTRASONIC_TRIG_PORT, ULTRASONIC_TRIG_PIN, DIO_LOW);
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	60 e0       	ldi	r22, 0x00	; 0
    40fe:	40 e0       	ldi	r20, 0x00	; 0
    4100:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <DIO_vidSetPinVal>
}
    4104:	68 96       	adiw	r28, 0x18	; 24
    4106:	0f b6       	in	r0, 0x3f	; 63
    4108:	f8 94       	cli
    410a:	de bf       	out	0x3e, r29	; 62
    410c:	0f be       	out	0x3f, r0	; 63
    410e:	cd bf       	out	0x3d, r28	; 61
    4110:	cf 91       	pop	r28
    4112:	df 91       	pop	r29
    4114:	08 95       	ret

00004116 <ULTRASONIC_u8ConvertTimeToDistance>:
static u8 ULTRASONIC_u8ConvertTimeToDistance(u32 Copy_u32TimeUs, u16* Copy_pu16Distance)
{
    4116:	df 93       	push	r29
    4118:	cf 93       	push	r28
    411a:	cd b7       	in	r28, 0x3d	; 61
    411c:	de b7       	in	r29, 0x3e	; 62
    411e:	29 97       	sbiw	r28, 0x09	; 9
    4120:	0f b6       	in	r0, 0x3f	; 63
    4122:	f8 94       	cli
    4124:	de bf       	out	0x3e, r29	; 62
    4126:	0f be       	out	0x3f, r0	; 63
    4128:	cd bf       	out	0x3d, r28	; 61
    412a:	6b 83       	std	Y+3, r22	; 0x03
    412c:	7c 83       	std	Y+4, r23	; 0x04
    412e:	8d 83       	std	Y+5, r24	; 0x05
    4130:	9e 83       	std	Y+6, r25	; 0x06
    4132:	58 87       	std	Y+8, r21	; 0x08
    4134:	4f 83       	std	Y+7, r20	; 0x07

	/* Convert time to distance */
	/* Distance = (Time × Speed of Sound) / 2 */
	/* Speed of sound = 343 m/s = 0.0343 cm/us */
	/* Distance (cm) = (Time_us × 0.0343) / 2 = Time_us / 58.3 ≈ Time_us / 58 */
	Local_u16Distance = (u16)(2*Copy_u32TimeUs / 58);
    4136:	8b 81       	ldd	r24, Y+3	; 0x03
    4138:	9c 81       	ldd	r25, Y+4	; 0x04
    413a:	ad 81       	ldd	r26, Y+5	; 0x05
    413c:	be 81       	ldd	r27, Y+6	; 0x06
    413e:	88 0f       	add	r24, r24
    4140:	99 1f       	adc	r25, r25
    4142:	aa 1f       	adc	r26, r26
    4144:	bb 1f       	adc	r27, r27
    4146:	2a e3       	ldi	r18, 0x3A	; 58
    4148:	30 e0       	ldi	r19, 0x00	; 0
    414a:	40 e0       	ldi	r20, 0x00	; 0
    414c:	50 e0       	ldi	r21, 0x00	; 0
    414e:	bc 01       	movw	r22, r24
    4150:	cd 01       	movw	r24, r26
    4152:	0e 94 bb 29 	call	0x5376	; 0x5376 <__udivmodsi4>
    4156:	da 01       	movw	r26, r20
    4158:	c9 01       	movw	r24, r18
    415a:	9a 83       	std	Y+2, r25	; 0x02
    415c:	89 83       	std	Y+1, r24	; 0x01

	/* Check if distance is within valid range */
	if (Local_u16Distance < ULTRASONIC_MIN_DISTANCE)
    415e:	89 81       	ldd	r24, Y+1	; 0x01
    4160:	9a 81       	ldd	r25, Y+2	; 0x02
    4162:	82 30       	cpi	r24, 0x02	; 2
    4164:	91 05       	cpc	r25, r1
    4166:	18 f4       	brcc	.+6      	; 0x416e <ULTRASONIC_u8ConvertTimeToDistance+0x58>
	{
		return ULTRASONIC_OUT_OF_RANGE;
    4168:	23 e0       	ldi	r18, 0x03	; 3
    416a:	29 87       	std	Y+9, r18	; 0x09
    416c:	10 c0       	rjmp	.+32     	; 0x418e <ULTRASONIC_u8ConvertTimeToDistance+0x78>
	}

	if (Local_u16Distance > ULTRASONIC_MAX_DISTANCE)
    416e:	89 81       	ldd	r24, Y+1	; 0x01
    4170:	9a 81       	ldd	r25, Y+2	; 0x02
    4172:	21 e0       	ldi	r18, 0x01	; 1
    4174:	81 39       	cpi	r24, 0x91	; 145
    4176:	92 07       	cpc	r25, r18
    4178:	18 f0       	brcs	.+6      	; 0x4180 <ULTRASONIC_u8ConvertTimeToDistance+0x6a>
	{
		return ULTRASONIC_OUT_OF_RANGE;
    417a:	83 e0       	ldi	r24, 0x03	; 3
    417c:	89 87       	std	Y+9, r24	; 0x09
    417e:	07 c0       	rjmp	.+14     	; 0x418e <ULTRASONIC_u8ConvertTimeToDistance+0x78>
	}

	*Copy_pu16Distance = Local_u16Distance;
    4180:	ef 81       	ldd	r30, Y+7	; 0x07
    4182:	f8 85       	ldd	r31, Y+8	; 0x08
    4184:	89 81       	ldd	r24, Y+1	; 0x01
    4186:	9a 81       	ldd	r25, Y+2	; 0x02
    4188:	91 83       	std	Z+1, r25	; 0x01
    418a:	80 83       	st	Z, r24
	return ULTRASONIC_OK;
    418c:	19 86       	std	Y+9, r1	; 0x09
    418e:	89 85       	ldd	r24, Y+9	; 0x09
}
    4190:	29 96       	adiw	r28, 0x09	; 9
    4192:	0f b6       	in	r0, 0x3f	; 63
    4194:	f8 94       	cli
    4196:	de bf       	out	0x3e, r29	; 62
    4198:	0f be       	out	0x3f, r0	; 63
    419a:	cd bf       	out	0x3d, r28	; 61
    419c:	cf 91       	pop	r28
    419e:	df 91       	pop	r29
    41a0:	08 95       	ret

000041a2 <SERVMOT_vidStartRotate>:
#include "SERVMOT_Init.h"
#include "SERVMOT_Config.h"


void SERVMOT_vidStartRotate(f32 f32Degree)
{
    41a2:	df 93       	push	r29
    41a4:	cf 93       	push	r28
    41a6:	00 d0       	rcall	.+0      	; 0x41a8 <SERVMOT_vidStartRotate+0x6>
    41a8:	00 d0       	rcall	.+0      	; 0x41aa <SERVMOT_vidStartRotate+0x8>
    41aa:	00 d0       	rcall	.+0      	; 0x41ac <SERVMOT_vidStartRotate+0xa>
    41ac:	cd b7       	in	r28, 0x3d	; 61
    41ae:	de b7       	in	r29, 0x3e	; 62
    41b0:	6b 83       	std	Y+3, r22	; 0x03
    41b2:	7c 83       	std	Y+4, r23	; 0x04
    41b4:	8d 83       	std	Y+5, r24	; 0x05
    41b6:	9e 83       	std	Y+6, r25	; 0x06
	static u8 Counter = 0;
	u16 u16Compare;

	if((f32Degree >= 0) && (f32Degree <= 180))
    41b8:	6b 81       	ldd	r22, Y+3	; 0x03
    41ba:	7c 81       	ldd	r23, Y+4	; 0x04
    41bc:	8d 81       	ldd	r24, Y+5	; 0x05
    41be:	9e 81       	ldd	r25, Y+6	; 0x06
    41c0:	20 e0       	ldi	r18, 0x00	; 0
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	40 e0       	ldi	r20, 0x00	; 0
    41c6:	50 e0       	ldi	r21, 0x00	; 0
    41c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    41cc:	88 23       	and	r24, r24
    41ce:	0c f4       	brge	.+2      	; 0x41d2 <SERVMOT_vidStartRotate+0x30>
    41d0:	84 c0       	rjmp	.+264    	; 0x42da <SERVMOT_vidStartRotate+0x138>
    41d2:	6b 81       	ldd	r22, Y+3	; 0x03
    41d4:	7c 81       	ldd	r23, Y+4	; 0x04
    41d6:	8d 81       	ldd	r24, Y+5	; 0x05
    41d8:	9e 81       	ldd	r25, Y+6	; 0x06
    41da:	20 e0       	ldi	r18, 0x00	; 0
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	44 e3       	ldi	r20, 0x34	; 52
    41e0:	53 e4       	ldi	r21, 0x43	; 67
    41e2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    41e6:	18 16       	cp	r1, r24
    41e8:	0c f4       	brge	.+2      	; 0x41ec <SERVMOT_vidStartRotate+0x4a>
    41ea:	77 c0       	rjmp	.+238    	; 0x42da <SERVMOT_vidStartRotate+0x138>
	{
		// Calculate compare value using exact working parameters
		if(f32Degree <= 90)
    41ec:	6b 81       	ldd	r22, Y+3	; 0x03
    41ee:	7c 81       	ldd	r23, Y+4	; 0x04
    41f0:	8d 81       	ldd	r24, Y+5	; 0x05
    41f2:	9e 81       	ldd	r25, Y+6	; 0x06
    41f4:	20 e0       	ldi	r18, 0x00	; 0
    41f6:	30 e0       	ldi	r19, 0x00	; 0
    41f8:	44 eb       	ldi	r20, 0xB4	; 180
    41fa:	52 e4       	ldi	r21, 0x42	; 66
    41fc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    4200:	18 16       	cp	r1, r24
    4202:	0c f1       	brlt	.+66     	; 0x4246 <SERVMOT_vidStartRotate+0xa4>
		{
			// 0° to 90°: map 0-90 to 65-175
			u16Compare = 65 + (u16)((f32Degree / 90.0) * 110.0);
    4204:	6b 81       	ldd	r22, Y+3	; 0x03
    4206:	7c 81       	ldd	r23, Y+4	; 0x04
    4208:	8d 81       	ldd	r24, Y+5	; 0x05
    420a:	9e 81       	ldd	r25, Y+6	; 0x06
    420c:	20 e0       	ldi	r18, 0x00	; 0
    420e:	30 e0       	ldi	r19, 0x00	; 0
    4210:	44 eb       	ldi	r20, 0xB4	; 180
    4212:	52 e4       	ldi	r21, 0x42	; 66
    4214:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4218:	dc 01       	movw	r26, r24
    421a:	cb 01       	movw	r24, r22
    421c:	bc 01       	movw	r22, r24
    421e:	cd 01       	movw	r24, r26
    4220:	20 e0       	ldi	r18, 0x00	; 0
    4222:	30 e0       	ldi	r19, 0x00	; 0
    4224:	4c ed       	ldi	r20, 0xDC	; 220
    4226:	52 e4       	ldi	r21, 0x42	; 66
    4228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    422c:	dc 01       	movw	r26, r24
    422e:	cb 01       	movw	r24, r22
    4230:	bc 01       	movw	r22, r24
    4232:	cd 01       	movw	r24, r26
    4234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4238:	dc 01       	movw	r26, r24
    423a:	cb 01       	movw	r24, r22
    423c:	8f 5b       	subi	r24, 0xBF	; 191
    423e:	9f 4f       	sbci	r25, 0xFF	; 255
    4240:	9a 83       	std	Y+2, r25	; 0x02
    4242:	89 83       	std	Y+1, r24	; 0x01
    4244:	2a c0       	rjmp	.+84     	; 0x429a <SERVMOT_vidStartRotate+0xf8>
		}
		else
		{
			// 90° to 180°: map 90-180 to 175-300
			u16Compare = 175 + (u16)(((f32Degree - 90.0) / 90.0) * 125.0);
    4246:	6b 81       	ldd	r22, Y+3	; 0x03
    4248:	7c 81       	ldd	r23, Y+4	; 0x04
    424a:	8d 81       	ldd	r24, Y+5	; 0x05
    424c:	9e 81       	ldd	r25, Y+6	; 0x06
    424e:	20 e0       	ldi	r18, 0x00	; 0
    4250:	30 e0       	ldi	r19, 0x00	; 0
    4252:	44 eb       	ldi	r20, 0xB4	; 180
    4254:	52 e4       	ldi	r21, 0x42	; 66
    4256:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    425a:	dc 01       	movw	r26, r24
    425c:	cb 01       	movw	r24, r22
    425e:	bc 01       	movw	r22, r24
    4260:	cd 01       	movw	r24, r26
    4262:	20 e0       	ldi	r18, 0x00	; 0
    4264:	30 e0       	ldi	r19, 0x00	; 0
    4266:	44 eb       	ldi	r20, 0xB4	; 180
    4268:	52 e4       	ldi	r21, 0x42	; 66
    426a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    426e:	dc 01       	movw	r26, r24
    4270:	cb 01       	movw	r24, r22
    4272:	bc 01       	movw	r22, r24
    4274:	cd 01       	movw	r24, r26
    4276:	20 e0       	ldi	r18, 0x00	; 0
    4278:	30 e0       	ldi	r19, 0x00	; 0
    427a:	4a ef       	ldi	r20, 0xFA	; 250
    427c:	52 e4       	ldi	r21, 0x42	; 66
    427e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4282:	dc 01       	movw	r26, r24
    4284:	cb 01       	movw	r24, r22
    4286:	bc 01       	movw	r22, r24
    4288:	cd 01       	movw	r24, r26
    428a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    428e:	dc 01       	movw	r26, r24
    4290:	cb 01       	movw	r24, r22
    4292:	81 55       	subi	r24, 0x51	; 81
    4294:	9f 4f       	sbci	r25, 0xFF	; 255
    4296:	9a 83       	std	Y+2, r25	; 0x02
    4298:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Counter == 0)
    429a:	80 91 82 00 	lds	r24, 0x0082
    429e:	88 23       	and	r24, r24
    42a0:	c1 f4       	brne	.+48     	; 0x42d2 <SERVMOT_vidStartRotate+0x130>
		{
			TIMER1_vidInit();
    42a2:	0e 94 2e 0a 	call	0x145c	; 0x145c <TIMER1_vidInit>
			TIMER1_vidSetInputCaptureReg(2499);  // 20ms period
    42a6:	83 ec       	ldi	r24, 0xC3	; 195
    42a8:	99 e0       	ldi	r25, 0x09	; 9
    42aa:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <TIMER1_vidSetInputCaptureReg>

			switch(SERVO_MOTOR_PIN)
			{
			case (SERVMOT_PINA):
					DIO_vidSetPinDir(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
    42ae:	83 e0       	ldi	r24, 0x03	; 3
    42b0:	65 e0       	ldi	r22, 0x05	; 5
    42b2:	4f ef       	ldi	r20, 0xFF	; 255
    42b4:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <DIO_vidSetPinDir>
			TIMER1_vidStartTimer_PWMMode(0, u16Compare, TIMER1_PWM_PIN_CLEAR_SET, TIMER1_CHANNEL_A);
    42b8:	29 81       	ldd	r18, Y+1	; 0x01
    42ba:	3a 81       	ldd	r19, Y+2	; 0x02
    42bc:	80 e0       	ldi	r24, 0x00	; 0
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	b9 01       	movw	r22, r18
    42c2:	41 e0       	ldi	r20, 0x01	; 1
    42c4:	21 e0       	ldi	r18, 0x01	; 1
    42c6:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <TIMER1_vidStartTimer_PWMMode>
			case (SERVMOT_PINB):
					DIO_vidSetPinDir(DIO_PORTD,DIO_PIN4,DIO_OUTPUT);
			TIMER1_vidStartTimer_PWMMode(0, u16Compare, TIMER1_PWM_PIN_CLEAR_SET, TIMER1_CHANNEL_B);
			break;
			}
			Counter = 1;
    42ca:	81 e0       	ldi	r24, 0x01	; 1
    42cc:	80 93 82 00 	sts	0x0082, r24
    42d0:	04 c0       	rjmp	.+8      	; 0x42da <SERVMOT_vidStartRotate+0x138>
		else
		{
			switch(SERVO_MOTOR_PIN)
			{
			case (SERVMOT_PINA):
            		TIMER1_vidSetComparReg_ChannelA(u16Compare);
    42d2:	89 81       	ldd	r24, Y+1	; 0x01
    42d4:	9a 81       	ldd	r25, Y+2	; 0x02
    42d6:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <TIMER1_vidSetComparReg_ChannelA>
            		TIMER1_vidSetComparReg_ChannelB(u16Compare);
			break;
			}
		}
	}
}
    42da:	26 96       	adiw	r28, 0x06	; 6
    42dc:	0f b6       	in	r0, 0x3f	; 63
    42de:	f8 94       	cli
    42e0:	de bf       	out	0x3e, r29	; 62
    42e2:	0f be       	out	0x3f, r0	; 63
    42e4:	cd bf       	out	0x3d, r28	; 61
    42e6:	cf 91       	pop	r28
    42e8:	df 91       	pop	r29
    42ea:	08 95       	ret

000042ec <SERVMOT_vidStopRotate>:

void SERVMOT_vidStopRotate(void)
{
    42ec:	df 93       	push	r29
    42ee:	cf 93       	push	r28
    42f0:	cd b7       	in	r28, 0x3d	; 61
    42f2:	de b7       	in	r29, 0x3e	; 62
	TIMER1_vidStopTimer();
    42f4:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <TIMER1_vidStopTimer>
}
    42f8:	cf 91       	pop	r28
    42fa:	df 91       	pop	r29
    42fc:	08 95       	ret

000042fe <IR_u8Init>:

static u8 IR_u8ConvertToLogical(u8 Copy_u8RawValue);
static u8 IR_u8ReadRawSensor(u8 Copy_u8SensorNum);

u8 IR_u8Init(void)
{
    42fe:	df 93       	push	r29
    4300:	cf 93       	push	r28
    4302:	0f 92       	push	r0
    4304:	cd b7       	in	r28, 0x3d	; 61
    4306:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Index;

	/* Configure all IR sensor pins as inputs */
	for (Local_u8Index = 0; Local_u8Index < IR_SENSOR_COUNT; Local_u8Index++)
    4308:	19 82       	std	Y+1, r1	; 0x01
    430a:	30 c0       	rjmp	.+96     	; 0x436c <IR_u8Init+0x6e>
	{
		/* Set pin as input */
		DIO_vidSetPinDir(IR_SensorConfig[Local_u8Index].port,
    430c:	89 81       	ldd	r24, Y+1	; 0x01
    430e:	88 2f       	mov	r24, r24
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	88 0f       	add	r24, r24
    4314:	99 1f       	adc	r25, r25
    4316:	fc 01       	movw	r30, r24
    4318:	e6 59       	subi	r30, 0x96	; 150
    431a:	ff 4f       	sbci	r31, 0xFF	; 255
    431c:	20 81       	ld	r18, Z
    431e:	89 81       	ldd	r24, Y+1	; 0x01
    4320:	88 2f       	mov	r24, r24
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	88 0f       	add	r24, r24
    4326:	99 1f       	adc	r25, r25
    4328:	fc 01       	movw	r30, r24
    432a:	e5 59       	subi	r30, 0x95	; 149
    432c:	ff 4f       	sbci	r31, 0xFF	; 255
    432e:	90 81       	ld	r25, Z
    4330:	82 2f       	mov	r24, r18
    4332:	69 2f       	mov	r22, r25
    4334:	40 e0       	ldi	r20, 0x00	; 0
    4336:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <DIO_vidSetPinDir>
				IR_SensorConfig[Local_u8Index].pin,
				DIO_INPUT);

		/* Enable pull-up resistor if configured */
#if IR_PULLUP_ENABLED == 1
		DIO_vidEnablePullUpRes(IR_SensorConfig[Local_u8Index].port,
    433a:	89 81       	ldd	r24, Y+1	; 0x01
    433c:	88 2f       	mov	r24, r24
    433e:	90 e0       	ldi	r25, 0x00	; 0
    4340:	88 0f       	add	r24, r24
    4342:	99 1f       	adc	r25, r25
    4344:	fc 01       	movw	r30, r24
    4346:	e6 59       	subi	r30, 0x96	; 150
    4348:	ff 4f       	sbci	r31, 0xFF	; 255
    434a:	20 81       	ld	r18, Z
    434c:	89 81       	ldd	r24, Y+1	; 0x01
    434e:	88 2f       	mov	r24, r24
    4350:	90 e0       	ldi	r25, 0x00	; 0
    4352:	88 0f       	add	r24, r24
    4354:	99 1f       	adc	r25, r25
    4356:	fc 01       	movw	r30, r24
    4358:	e5 59       	subi	r30, 0x95	; 149
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	90 81       	ld	r25, Z
    435e:	82 2f       	mov	r24, r18
    4360:	69 2f       	mov	r22, r25
    4362:	0e 94 3f 18 	call	0x307e	; 0x307e <DIO_vidEnablePullUpRes>
u8 IR_u8Init(void)
{
	u8 Local_u8Index;

	/* Configure all IR sensor pins as inputs */
	for (Local_u8Index = 0; Local_u8Index < IR_SENSOR_COUNT; Local_u8Index++)
    4366:	89 81       	ldd	r24, Y+1	; 0x01
    4368:	8f 5f       	subi	r24, 0xFF	; 255
    436a:	89 83       	std	Y+1, r24	; 0x01
    436c:	89 81       	ldd	r24, Y+1	; 0x01
    436e:	83 30       	cpi	r24, 0x03	; 3
    4370:	68 f2       	brcs	.-102    	; 0x430c <IR_u8Init+0xe>
		DIO_vidEnablePullUpRes(IR_SensorConfig[Local_u8Index].port,
				IR_SensorConfig[Local_u8Index].pin);
#endif
	}

	return IR_OK;
    4372:	80 e0       	ldi	r24, 0x00	; 0
}
    4374:	0f 90       	pop	r0
    4376:	cf 91       	pop	r28
    4378:	df 91       	pop	r29
    437a:	08 95       	ret

0000437c <IR_u8ReadSensor>:

u8 IR_u8ReadSensor(u8 Copy_u8SensorNum, u8* Copy_pu8Value)
{
    437c:	df 93       	push	r29
    437e:	cf 93       	push	r28
    4380:	00 d0       	rcall	.+0      	; 0x4382 <IR_u8ReadSensor+0x6>
    4382:	00 d0       	rcall	.+0      	; 0x4384 <IR_u8ReadSensor+0x8>
    4384:	0f 92       	push	r0
    4386:	cd b7       	in	r28, 0x3d	; 61
    4388:	de b7       	in	r29, 0x3e	; 62
    438a:	8a 83       	std	Y+2, r24	; 0x02
    438c:	7c 83       	std	Y+4, r23	; 0x04
    438e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8RawValue;

	/* Check parameters */
	if (Copy_pu8Value == NULL)
    4390:	8b 81       	ldd	r24, Y+3	; 0x03
    4392:	9c 81       	ldd	r25, Y+4	; 0x04
    4394:	00 97       	sbiw	r24, 0x00	; 0
    4396:	19 f4       	brne	.+6      	; 0x439e <IR_u8ReadSensor+0x22>
	{
		return IR_INVALID_PARAMETER;
    4398:	82 e0       	ldi	r24, 0x02	; 2
    439a:	8d 83       	std	Y+5, r24	; 0x05
    439c:	11 c0       	rjmp	.+34     	; 0x43c0 <IR_u8ReadSensor+0x44>
	}

	if (Copy_u8SensorNum >= IR_SENSOR_COUNT)
    439e:	8a 81       	ldd	r24, Y+2	; 0x02
    43a0:	83 30       	cpi	r24, 0x03	; 3
    43a2:	18 f0       	brcs	.+6      	; 0x43aa <IR_u8ReadSensor+0x2e>
	{
		return IR_INVALID_PARAMETER;
    43a4:	82 e0       	ldi	r24, 0x02	; 2
    43a6:	8d 83       	std	Y+5, r24	; 0x05
    43a8:	0b c0       	rjmp	.+22     	; 0x43c0 <IR_u8ReadSensor+0x44>
	}

	/* Read raw sensor value */
	Local_u8RawValue = IR_u8ReadRawSensor(Copy_u8SensorNum);
    43aa:	8a 81       	ldd	r24, Y+2	; 0x02
    43ac:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <IR_u8ReadRawSensor>
    43b0:	89 83       	std	Y+1, r24	; 0x01

	/* Convert to logical value based on sensor type */
	*Copy_pu8Value = IR_u8ConvertToLogical(Local_u8RawValue);
    43b2:	89 81       	ldd	r24, Y+1	; 0x01
    43b4:	0e 94 09 22 	call	0x4412	; 0x4412 <IR_u8ConvertToLogical>
    43b8:	eb 81       	ldd	r30, Y+3	; 0x03
    43ba:	fc 81       	ldd	r31, Y+4	; 0x04
    43bc:	80 83       	st	Z, r24

	return IR_OK;
    43be:	1d 82       	std	Y+5, r1	; 0x05
    43c0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    43c2:	0f 90       	pop	r0
    43c4:	0f 90       	pop	r0
    43c6:	0f 90       	pop	r0
    43c8:	0f 90       	pop	r0
    43ca:	0f 90       	pop	r0
    43cc:	cf 91       	pop	r28
    43ce:	df 91       	pop	r29
    43d0:	08 95       	ret

000043d2 <IR_u8ReadRawSensor>:

/* Private Functions */

static u8 IR_u8ReadRawSensor(u8 Copy_u8SensorNum)
{
    43d2:	df 93       	push	r29
    43d4:	cf 93       	push	r28
    43d6:	0f 92       	push	r0
    43d8:	cd b7       	in	r28, 0x3d	; 61
    43da:	de b7       	in	r29, 0x3e	; 62
    43dc:	89 83       	std	Y+1, r24	; 0x01
	return DIO_u8GetPinVal(IR_SensorConfig[Copy_u8SensorNum].port,
    43de:	89 81       	ldd	r24, Y+1	; 0x01
    43e0:	88 2f       	mov	r24, r24
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	88 0f       	add	r24, r24
    43e6:	99 1f       	adc	r25, r25
    43e8:	fc 01       	movw	r30, r24
    43ea:	e6 59       	subi	r30, 0x96	; 150
    43ec:	ff 4f       	sbci	r31, 0xFF	; 255
    43ee:	20 81       	ld	r18, Z
    43f0:	89 81       	ldd	r24, Y+1	; 0x01
    43f2:	88 2f       	mov	r24, r24
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	88 0f       	add	r24, r24
    43f8:	99 1f       	adc	r25, r25
    43fa:	fc 01       	movw	r30, r24
    43fc:	e5 59       	subi	r30, 0x95	; 149
    43fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4400:	90 81       	ld	r25, Z
    4402:	82 2f       	mov	r24, r18
    4404:	69 2f       	mov	r22, r25
    4406:	0e 94 c4 18 	call	0x3188	; 0x3188 <DIO_u8GetPinVal>
			IR_SensorConfig[Copy_u8SensorNum].pin);
}
    440a:	0f 90       	pop	r0
    440c:	cf 91       	pop	r28
    440e:	df 91       	pop	r29
    4410:	08 95       	ret

00004412 <IR_u8ConvertToLogical>:
static u8 IR_u8ConvertToLogical(u8 Copy_u8RawValue)
{
    4412:	df 93       	push	r29
    4414:	cf 93       	push	r28
    4416:	00 d0       	rcall	.+0      	; 0x4418 <IR_u8ConvertToLogical+0x6>
    4418:	cd b7       	in	r28, 0x3d	; 61
    441a:	de b7       	in	r29, 0x3e	; 62
    441c:	89 83       	std	Y+1, r24	; 0x01
#if IR_SENSOR_LOGIC == IR_ACTIVE_LOW
	/* Active low: LOW = object detected */
	return (Copy_u8RawValue == 0) ? IR_OBJECT_DETECTED : IR_NO_OBJECT;
#else
	/* Active high: HIGH = object detected */
	return (Copy_u8RawValue == 1) ? IR_OBJECT_DETECTED : IR_NO_OBJECT;
    441e:	1a 82       	std	Y+2, r1	; 0x02
    4420:	89 81       	ldd	r24, Y+1	; 0x01
    4422:	81 30       	cpi	r24, 0x01	; 1
    4424:	11 f4       	brne	.+4      	; 0x442a <IR_u8ConvertToLogical+0x18>
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	8a 83       	std	Y+2, r24	; 0x02
    442a:	8a 81       	ldd	r24, Y+2	; 0x02
#endif
}
    442c:	0f 90       	pop	r0
    442e:	0f 90       	pop	r0
    4430:	cf 91       	pop	r28
    4432:	df 91       	pop	r29
    4434:	08 95       	ret

00004436 <DCMOT_1_vidInit>:

#include "DCMOT_Init.h"
#include "DCMOT_Confg.h"

void DCMOT_1_vidInit(void)
{
    4436:	df 93       	push	r29
    4438:	cf 93       	push	r28
    443a:	cd b7       	in	r28, 0x3d	; 61
    443c:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinDir(DC_MOT_1_PORT_S1, DC_MOT_1_PIN_S1, DIO_OUTPUT);
    443e:	80 e0       	ldi	r24, 0x00	; 0
    4440:	60 e0       	ldi	r22, 0x00	; 0
    4442:	4f ef       	ldi	r20, 0xFF	; 255
    4444:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DC_MOT_1_PORT_S2, DC_MOT_1_PIN_S2, DIO_OUTPUT);
    4448:	80 e0       	ldi	r24, 0x00	; 0
    444a:	61 e0       	ldi	r22, 0x01	; 1
    444c:	4f ef       	ldi	r20, 0xFF	; 255
    444e:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <DIO_vidSetPinDir>

	DIO_vidSetPinVal(DC_MOT_1_PORT_S1, DC_MOT_1_PIN_S1, DIO_LOW);
    4452:	80 e0       	ldi	r24, 0x00	; 0
    4454:	60 e0       	ldi	r22, 0x00	; 0
    4456:	40 e0       	ldi	r20, 0x00	; 0
    4458:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <DIO_vidSetPinVal>
	DIO_vidSetPinVal(DC_MOT_1_PORT_S2, DC_MOT_1_PIN_S2, DIO_LOW);
    445c:	80 e0       	ldi	r24, 0x00	; 0
    445e:	61 e0       	ldi	r22, 0x01	; 1
    4460:	40 e0       	ldi	r20, 0x00	; 0
    4462:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <DIO_vidSetPinVal>
}
    4466:	cf 91       	pop	r28
    4468:	df 91       	pop	r29
    446a:	08 95       	ret

0000446c <DCMOT_2_vidInit>:

void DCMOT_2_vidInit(void)
{
    446c:	df 93       	push	r29
    446e:	cf 93       	push	r28
    4470:	cd b7       	in	r28, 0x3d	; 61
    4472:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinDir(DC_MOT_2_PORT_S1, DC_MOT_2_PIN_S1, DIO_OUTPUT);
    4474:	80 e0       	ldi	r24, 0x00	; 0
    4476:	62 e0       	ldi	r22, 0x02	; 2
    4478:	4f ef       	ldi	r20, 0xFF	; 255
    447a:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DC_MOT_2_PORT_S2, DC_MOT_2_PIN_S2, DIO_OUTPUT);
    447e:	80 e0       	ldi	r24, 0x00	; 0
    4480:	63 e0       	ldi	r22, 0x03	; 3
    4482:	4f ef       	ldi	r20, 0xFF	; 255
    4484:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <DIO_vidSetPinDir>

	DIO_vidSetPinVal(DC_MOT_2_PORT_S1, DC_MOT_2_PIN_S1, DIO_LOW);
    4488:	80 e0       	ldi	r24, 0x00	; 0
    448a:	62 e0       	ldi	r22, 0x02	; 2
    448c:	40 e0       	ldi	r20, 0x00	; 0
    448e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <DIO_vidSetPinVal>
	DIO_vidSetPinVal(DC_MOT_2_PORT_S2, DC_MOT_2_PIN_S2, DIO_LOW);
    4492:	80 e0       	ldi	r24, 0x00	; 0
    4494:	63 e0       	ldi	r22, 0x03	; 3
    4496:	40 e0       	ldi	r20, 0x00	; 0
    4498:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <DIO_vidSetPinVal>
}
    449c:	cf 91       	pop	r28
    449e:	df 91       	pop	r29
    44a0:	08 95       	ret

000044a2 <DCMOT_1_vidRotCW>:

void DCMOT_1_vidRotCW(void)
{
    44a2:	df 93       	push	r29
    44a4:	cf 93       	push	r28
    44a6:	cd b7       	in	r28, 0x3d	; 61
    44a8:	de b7       	in	r29, 0x3e	; 62
	DCMOT_1_vidStop();
    44aa:	0e 94 89 22 	call	0x4512	; 0x4512 <DCMOT_1_vidStop>
	DIO_vidSetPinVal(DC_MOT_1_PORT_S1, DC_MOT_1_PIN_S1, DIO_HIGH);
    44ae:	80 e0       	ldi	r24, 0x00	; 0
    44b0:	60 e0       	ldi	r22, 0x00	; 0
    44b2:	4f ef       	ldi	r20, 0xFF	; 255
    44b4:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <DIO_vidSetPinVal>
}
    44b8:	cf 91       	pop	r28
    44ba:	df 91       	pop	r29
    44bc:	08 95       	ret

000044be <DCMOT_2_vidRotCW>:

void DCMOT_2_vidRotCW(void)
{
    44be:	df 93       	push	r29
    44c0:	cf 93       	push	r28
    44c2:	cd b7       	in	r28, 0x3d	; 61
    44c4:	de b7       	in	r29, 0x3e	; 62
	DCMOT_2_vidStop();
    44c6:	0e 94 9a 22 	call	0x4534	; 0x4534 <DCMOT_2_vidStop>
	DIO_vidSetPinVal(DC_MOT_2_PORT_S1, DC_MOT_2_PIN_S1, DIO_HIGH);
    44ca:	80 e0       	ldi	r24, 0x00	; 0
    44cc:	62 e0       	ldi	r22, 0x02	; 2
    44ce:	4f ef       	ldi	r20, 0xFF	; 255
    44d0:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <DIO_vidSetPinVal>
}
    44d4:	cf 91       	pop	r28
    44d6:	df 91       	pop	r29
    44d8:	08 95       	ret

000044da <DCMOT_1_vidRotCCW>:

void DCMOT_1_vidRotCCW(void)
{
    44da:	df 93       	push	r29
    44dc:	cf 93       	push	r28
    44de:	cd b7       	in	r28, 0x3d	; 61
    44e0:	de b7       	in	r29, 0x3e	; 62
	DCMOT_1_vidStop();
    44e2:	0e 94 89 22 	call	0x4512	; 0x4512 <DCMOT_1_vidStop>
	DIO_vidSetPinVal(DC_MOT_1_PORT_S2, DC_MOT_1_PIN_S2, DIO_HIGH);
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	61 e0       	ldi	r22, 0x01	; 1
    44ea:	4f ef       	ldi	r20, 0xFF	; 255
    44ec:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <DIO_vidSetPinVal>
}
    44f0:	cf 91       	pop	r28
    44f2:	df 91       	pop	r29
    44f4:	08 95       	ret

000044f6 <DCMOT_2_vidRotCCW>:

void DCMOT_2_vidRotCCW(void)
{
    44f6:	df 93       	push	r29
    44f8:	cf 93       	push	r28
    44fa:	cd b7       	in	r28, 0x3d	; 61
    44fc:	de b7       	in	r29, 0x3e	; 62
	DCMOT_2_vidStop();
    44fe:	0e 94 9a 22 	call	0x4534	; 0x4534 <DCMOT_2_vidStop>
	DIO_vidSetPinVal(DC_MOT_2_PORT_S2, DC_MOT_2_PIN_S2, DIO_HIGH);
    4502:	80 e0       	ldi	r24, 0x00	; 0
    4504:	63 e0       	ldi	r22, 0x03	; 3
    4506:	4f ef       	ldi	r20, 0xFF	; 255
    4508:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <DIO_vidSetPinVal>
}
    450c:	cf 91       	pop	r28
    450e:	df 91       	pop	r29
    4510:	08 95       	ret

00004512 <DCMOT_1_vidStop>:


void DCMOT_1_vidStop(void)
{
    4512:	df 93       	push	r29
    4514:	cf 93       	push	r28
    4516:	cd b7       	in	r28, 0x3d	; 61
    4518:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinVal(DC_MOT_1_PORT_S1, DC_MOT_1_PIN_S1, DIO_LOW);
    451a:	80 e0       	ldi	r24, 0x00	; 0
    451c:	60 e0       	ldi	r22, 0x00	; 0
    451e:	40 e0       	ldi	r20, 0x00	; 0
    4520:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <DIO_vidSetPinVal>
	DIO_vidSetPinVal(DC_MOT_1_PORT_S2, DC_MOT_1_PIN_S2, DIO_LOW);
    4524:	80 e0       	ldi	r24, 0x00	; 0
    4526:	61 e0       	ldi	r22, 0x01	; 1
    4528:	40 e0       	ldi	r20, 0x00	; 0
    452a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <DIO_vidSetPinVal>
}
    452e:	cf 91       	pop	r28
    4530:	df 91       	pop	r29
    4532:	08 95       	ret

00004534 <DCMOT_2_vidStop>:

void DCMOT_2_vidStop(void)
{
    4534:	df 93       	push	r29
    4536:	cf 93       	push	r28
    4538:	cd b7       	in	r28, 0x3d	; 61
    453a:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinVal(DC_MOT_2_PORT_S1, DC_MOT_2_PIN_S1, DIO_LOW);
    453c:	80 e0       	ldi	r24, 0x00	; 0
    453e:	62 e0       	ldi	r22, 0x02	; 2
    4540:	40 e0       	ldi	r20, 0x00	; 0
    4542:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <DIO_vidSetPinVal>
	DIO_vidSetPinVal(DC_MOT_2_PORT_S2, DC_MOT_2_PIN_S2, DIO_LOW);
    4546:	80 e0       	ldi	r24, 0x00	; 0
    4548:	63 e0       	ldi	r22, 0x03	; 3
    454a:	40 e0       	ldi	r20, 0x00	; 0
    454c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <DIO_vidSetPinVal>
}
    4550:	cf 91       	pop	r28
    4552:	df 91       	pop	r29
    4554:	08 95       	ret

00004556 <vdCarMoveUp>:
 */

#include "CarMove.h"

#include "../HAL/DCMOT_Driver/DCMOT_Init.h"
void vdCarMoveUp(){
    4556:	df 93       	push	r29
    4558:	cf 93       	push	r28
    455a:	cd b7       	in	r28, 0x3d	; 61
    455c:	de b7       	in	r29, 0x3e	; 62
	DCMOT_1_vidRotCCW();
    455e:	0e 94 6d 22 	call	0x44da	; 0x44da <DCMOT_1_vidRotCCW>
	DCMOT_2_vidRotCCW();
    4562:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <DCMOT_2_vidRotCCW>
}
    4566:	cf 91       	pop	r28
    4568:	df 91       	pop	r29
    456a:	08 95       	ret

0000456c <vdCarInitMotors>:

void vdCarInitMotors(){
    456c:	df 93       	push	r29
    456e:	cf 93       	push	r28
    4570:	cd b7       	in	r28, 0x3d	; 61
    4572:	de b7       	in	r29, 0x3e	; 62
	DCMOT_1_vidInit();
    4574:	0e 94 1b 22 	call	0x4436	; 0x4436 <DCMOT_1_vidInit>
	DCMOT_2_vidInit();
    4578:	0e 94 36 22 	call	0x446c	; 0x446c <DCMOT_2_vidInit>
}
    457c:	cf 91       	pop	r28
    457e:	df 91       	pop	r29
    4580:	08 95       	ret

00004582 <vdCarMoveBack>:

void vdCarMoveBack(){
    4582:	df 93       	push	r29
    4584:	cf 93       	push	r28
    4586:	cd b7       	in	r28, 0x3d	; 61
    4588:	de b7       	in	r29, 0x3e	; 62
	DCMOT_1_vidRotCW();
    458a:	0e 94 51 22 	call	0x44a2	; 0x44a2 <DCMOT_1_vidRotCW>
	DCMOT_2_vidRotCW();
    458e:	0e 94 5f 22 	call	0x44be	; 0x44be <DCMOT_2_vidRotCW>
}
    4592:	cf 91       	pop	r28
    4594:	df 91       	pop	r29
    4596:	08 95       	ret

00004598 <vdCarMoveRight>:

void vdCarMoveRight(){
    4598:	df 93       	push	r29
    459a:	cf 93       	push	r28
    459c:	cd b7       	in	r28, 0x3d	; 61
    459e:	de b7       	in	r29, 0x3e	; 62
	DCMOT_1_vidRotCCW();
    45a0:	0e 94 6d 22 	call	0x44da	; 0x44da <DCMOT_1_vidRotCCW>
	DCMOT_2_vidStop();
    45a4:	0e 94 9a 22 	call	0x4534	; 0x4534 <DCMOT_2_vidStop>
}
    45a8:	cf 91       	pop	r28
    45aa:	df 91       	pop	r29
    45ac:	08 95       	ret

000045ae <vdCarMoveLeft>:

void vdCarMoveLeft(){
    45ae:	df 93       	push	r29
    45b0:	cf 93       	push	r28
    45b2:	cd b7       	in	r28, 0x3d	; 61
    45b4:	de b7       	in	r29, 0x3e	; 62
	DCMOT_2_vidRotCCW();
    45b6:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <DCMOT_2_vidRotCCW>
	DCMOT_1_vidStop();
    45ba:	0e 94 89 22 	call	0x4512	; 0x4512 <DCMOT_1_vidStop>
}
    45be:	cf 91       	pop	r28
    45c0:	df 91       	pop	r29
    45c2:	08 95       	ret

000045c4 <vdCarStop>:

void vdCarStop(){
    45c4:	df 93       	push	r29
    45c6:	cf 93       	push	r28
    45c8:	cd b7       	in	r28, 0x3d	; 61
    45ca:	de b7       	in	r29, 0x3e	; 62
	DCMOT_1_vidStop();
    45cc:	0e 94 89 22 	call	0x4512	; 0x4512 <DCMOT_1_vidStop>
	DCMOT_2_vidStop();
    45d0:	0e 94 9a 22 	call	0x4534	; 0x4534 <DCMOT_2_vidStop>
}
    45d4:	cf 91       	pop	r28
    45d6:	df 91       	pop	r29
    45d8:	08 95       	ret

000045da <EYES_vdInit>:
#include "../HAL/SERVMOT_Driver/SERVMOT_Init.h"
#include "../HAL/ULTRASONIC_Driver/ULTRASONIC_Init.h"

#include "Eyes.h"

void EYES_vdInit(){
    45da:	df 93       	push	r29
    45dc:	cf 93       	push	r28
    45de:	cd b7       	in	r28, 0x3d	; 61
    45e0:	de b7       	in	r29, 0x3e	; 62
	/* initialze servo motor */
	SERVMOT_vidStartRotate(EYES_FORWAFD_ANGLE);
    45e2:	60 e0       	ldi	r22, 0x00	; 0
    45e4:	70 e0       	ldi	r23, 0x00	; 0
    45e6:	84 eb       	ldi	r24, 0xB4	; 180
    45e8:	92 e4       	ldi	r25, 0x42	; 66
    45ea:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <SERVMOT_vidStartRotate>

	/* initialize ultrasonic sensor */
	ULTRASONIC_u8Init();
    45ee:	0e 94 2b 1c 	call	0x3856	; 0x3856 <ULTRASONIC_u8Init>
}
    45f2:	cf 91       	pop	r28
    45f4:	df 91       	pop	r29
    45f6:	08 95       	ret

000045f8 <EYES_LookRight>:

void EYES_LookRight(){
    45f8:	df 93       	push	r29
    45fa:	cf 93       	push	r28
    45fc:	cd b7       	in	r28, 0x3d	; 61
    45fe:	de b7       	in	r29, 0x3e	; 62
	SERVMOT_vidStartRotate(EYES_RIGHT_ANGLE);
    4600:	60 e0       	ldi	r22, 0x00	; 0
    4602:	70 e0       	ldi	r23, 0x00	; 0
    4604:	80 e0       	ldi	r24, 0x00	; 0
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <SERVMOT_vidStartRotate>
}
    460c:	cf 91       	pop	r28
    460e:	df 91       	pop	r29
    4610:	08 95       	ret

00004612 <EYES_LookLeft>:

void EYES_LookLeft(){
    4612:	df 93       	push	r29
    4614:	cf 93       	push	r28
    4616:	cd b7       	in	r28, 0x3d	; 61
    4618:	de b7       	in	r29, 0x3e	; 62
	SERVMOT_vidStartRotate(EYES_LEFT_ANGLE);
    461a:	60 e0       	ldi	r22, 0x00	; 0
    461c:	70 e0       	ldi	r23, 0x00	; 0
    461e:	84 e3       	ldi	r24, 0x34	; 52
    4620:	93 e4       	ldi	r25, 0x43	; 67
    4622:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <SERVMOT_vidStartRotate>
}
    4626:	cf 91       	pop	r28
    4628:	df 91       	pop	r29
    462a:	08 95       	ret

0000462c <EYES_LookForward>:

void EYES_LookForward(){
    462c:	df 93       	push	r29
    462e:	cf 93       	push	r28
    4630:	cd b7       	in	r28, 0x3d	; 61
    4632:	de b7       	in	r29, 0x3e	; 62
	SERVMOT_vidStartRotate(EYES_FORWAFD_ANGLE);
    4634:	60 e0       	ldi	r22, 0x00	; 0
    4636:	70 e0       	ldi	r23, 0x00	; 0
    4638:	84 eb       	ldi	r24, 0xB4	; 180
    463a:	92 e4       	ldi	r25, 0x42	; 66
    463c:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <SERVMOT_vidStartRotate>
}
    4640:	cf 91       	pop	r28
    4642:	df 91       	pop	r29
    4644:	08 95       	ret

00004646 <EYES_MeasureDist>:


u8 EYES_MeasureDist(u16* u16Distance){
    4646:	df 93       	push	r29
    4648:	cf 93       	push	r28
    464a:	cd b7       	in	r28, 0x3d	; 61
    464c:	de b7       	in	r29, 0x3e	; 62
    464e:	28 97       	sbiw	r28, 0x08	; 8
    4650:	0f b6       	in	r0, 0x3f	; 63
    4652:	f8 94       	cli
    4654:	de bf       	out	0x3e, r29	; 62
    4656:	0f be       	out	0x3f, r0	; 63
    4658:	cd bf       	out	0x3d, r28	; 61
    465a:	9d 83       	std	Y+5, r25	; 0x05
    465c:	8c 83       	std	Y+4, r24	; 0x04
	u16 distance;
	u8 status;

	if(u16Distance == NULL){
    465e:	8c 81       	ldd	r24, Y+4	; 0x04
    4660:	9d 81       	ldd	r25, Y+5	; 0x05
    4662:	00 97       	sbiw	r24, 0x00	; 0
    4664:	11 f4       	brne	.+4      	; 0x466a <EYES_MeasureDist+0x24>
		return EYES_MEASURE_ERROR;
    4666:	18 86       	std	Y+8, r1	; 0x08
    4668:	42 c0       	rjmp	.+132    	; 0x46ee <EYES_MeasureDist+0xa8>
	}

	/* Measure distance */
	status = ULTRASONIC_u8MeasureDistance(&distance);
    466a:	ce 01       	movw	r24, r28
    466c:	02 96       	adiw	r24, 0x02	; 2
    466e:	0e 94 cc 1c 	call	0x3998	; 0x3998 <ULTRASONIC_u8MeasureDistance>
    4672:	89 83       	std	Y+1, r24	; 0x01

	switch(status)
    4674:	89 81       	ldd	r24, Y+1	; 0x01
    4676:	28 2f       	mov	r18, r24
    4678:	30 e0       	ldi	r19, 0x00	; 0
    467a:	3f 83       	std	Y+7, r19	; 0x07
    467c:	2e 83       	std	Y+6, r18	; 0x06
    467e:	8e 81       	ldd	r24, Y+6	; 0x06
    4680:	9f 81       	ldd	r25, Y+7	; 0x07
    4682:	81 30       	cpi	r24, 0x01	; 1
    4684:	91 05       	cpc	r25, r1
    4686:	71 f1       	breq	.+92     	; 0x46e4 <EYES_MeasureDist+0x9e>
    4688:	2e 81       	ldd	r18, Y+6	; 0x06
    468a:	3f 81       	ldd	r19, Y+7	; 0x07
    468c:	22 30       	cpi	r18, 0x02	; 2
    468e:	31 05       	cpc	r19, r1
    4690:	2c f4       	brge	.+10     	; 0x469c <EYES_MeasureDist+0x56>
    4692:	8e 81       	ldd	r24, Y+6	; 0x06
    4694:	9f 81       	ldd	r25, Y+7	; 0x07
    4696:	00 97       	sbiw	r24, 0x00	; 0
    4698:	61 f0       	breq	.+24     	; 0x46b2 <EYES_MeasureDist+0x6c>
    469a:	26 c0       	rjmp	.+76     	; 0x46e8 <EYES_MeasureDist+0xa2>
    469c:	2e 81       	ldd	r18, Y+6	; 0x06
    469e:	3f 81       	ldd	r19, Y+7	; 0x07
    46a0:	22 30       	cpi	r18, 0x02	; 2
    46a2:	31 05       	cpc	r19, r1
    46a4:	79 f0       	breq	.+30     	; 0x46c4 <EYES_MeasureDist+0x7e>
    46a6:	8e 81       	ldd	r24, Y+6	; 0x06
    46a8:	9f 81       	ldd	r25, Y+7	; 0x07
    46aa:	83 30       	cpi	r24, 0x03	; 3
    46ac:	91 05       	cpc	r25, r1
    46ae:	99 f0       	breq	.+38     	; 0x46d6 <EYES_MeasureDist+0x90>
    46b0:	1b c0       	rjmp	.+54     	; 0x46e8 <EYES_MeasureDist+0xa2>
	{
	case ULTRASONIC_OK:
		*u16Distance = distance;
    46b2:	8a 81       	ldd	r24, Y+2	; 0x02
    46b4:	9b 81       	ldd	r25, Y+3	; 0x03
    46b6:	ec 81       	ldd	r30, Y+4	; 0x04
    46b8:	fd 81       	ldd	r31, Y+5	; 0x05
    46ba:	91 83       	std	Z+1, r25	; 0x01
    46bc:	80 83       	st	Z, r24
		status = EYES_MEASURE_OK;
    46be:	81 e0       	ldi	r24, 0x01	; 1
    46c0:	89 83       	std	Y+1, r24	; 0x01
    46c2:	13 c0       	rjmp	.+38     	; 0x46ea <EYES_MeasureDist+0xa4>
		break;

	case ULTRASONIC_TIMEOUT:
		*u16Distance = EYES_MEASURE_FAR_NUM;
    46c4:	ec 81       	ldd	r30, Y+4	; 0x04
    46c6:	fd 81       	ldd	r31, Y+5	; 0x05
    46c8:	80 e1       	ldi	r24, 0x10	; 16
    46ca:	97 e2       	ldi	r25, 0x27	; 39
    46cc:	91 83       	std	Z+1, r25	; 0x01
    46ce:	80 83       	st	Z, r24
		status = EYES_MEASURE_OK;
    46d0:	81 e0       	ldi	r24, 0x01	; 1
    46d2:	89 83       	std	Y+1, r24	; 0x01
    46d4:	0a c0       	rjmp	.+20     	; 0x46ea <EYES_MeasureDist+0xa4>
		break;

	case ULTRASONIC_OUT_OF_RANGE:
		*u16Distance = 0;
    46d6:	ec 81       	ldd	r30, Y+4	; 0x04
    46d8:	fd 81       	ldd	r31, Y+5	; 0x05
    46da:	11 82       	std	Z+1, r1	; 0x01
    46dc:	10 82       	st	Z, r1
		status = EYES_MEASURE_OK;
    46de:	81 e0       	ldi	r24, 0x01	; 1
    46e0:	89 83       	std	Y+1, r24	; 0x01
    46e2:	03 c0       	rjmp	.+6      	; 0x46ea <EYES_MeasureDist+0xa4>
		break;

	case ULTRASONIC_ERROR:
		status = EYES_MEASURE_ERROR;
    46e4:	19 82       	std	Y+1, r1	; 0x01
    46e6:	01 c0       	rjmp	.+2      	; 0x46ea <EYES_MeasureDist+0xa4>
		break;

	default:
		status = EYES_MEASURE_ERROR;
    46e8:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return (status);
    46ea:	99 81       	ldd	r25, Y+1	; 0x01
    46ec:	98 87       	std	Y+8, r25	; 0x08
    46ee:	88 85       	ldd	r24, Y+8	; 0x08
}
    46f0:	28 96       	adiw	r28, 0x08	; 8
    46f2:	0f b6       	in	r0, 0x3f	; 63
    46f4:	f8 94       	cli
    46f6:	de bf       	out	0x3e, r29	; 62
    46f8:	0f be       	out	0x3f, r0	; 63
    46fa:	cd bf       	out	0x3d, r28	; 61
    46fc:	cf 91       	pop	r28
    46fe:	df 91       	pop	r29
    4700:	08 95       	ret

00004702 <EYES_SetAlarm>:

void EYES_SetAlarm(){
    4702:	df 93       	push	r29
    4704:	cf 93       	push	r28
    4706:	cd b7       	in	r28, 0x3d	; 61
    4708:	de b7       	in	r29, 0x3e	; 62
	// here i can at the hardware certain pin connected to led or bazzar to sit it when error happen
}
    470a:	cf 91       	pop	r28
    470c:	df 91       	pop	r29
    470e:	08 95       	ret

00004710 <vidLineFollowerInit>:
#include "../LIB/STD_TYPES.h"

#include "LineFollower.h"


void vidLineFollowerInit(){
    4710:	df 93       	push	r29
    4712:	cf 93       	push	r28
    4714:	cd b7       	in	r28, 0x3d	; 61
    4716:	de b7       	in	r29, 0x3e	; 62
	IR_u8Init();
    4718:	0e 94 7f 21 	call	0x42fe	; 0x42fe <IR_u8Init>
}
    471c:	cf 91       	pop	r28
    471e:	df 91       	pop	r29
    4720:	08 95       	ret

00004722 <lineFollowerDetect>:

u8 lineFollowerDetect(){
    4722:	df 93       	push	r29
    4724:	cf 93       	push	r28
    4726:	00 d0       	rcall	.+0      	; 0x4728 <lineFollowerDetect+0x6>
    4728:	00 d0       	rcall	.+0      	; 0x472a <lineFollowerDetect+0x8>
    472a:	cd b7       	in	r28, 0x3d	; 61
    472c:	de b7       	in	r29, 0x3e	; 62
	u8 leftIrRead;
	u8 centerIrRead;
	u8 rightIrRead;

	if(IR_u8ReadSensor(IR_SENSOR_LEFT,&leftIrRead) != IR_OK){
    472e:	80 e0       	ldi	r24, 0x00	; 0
    4730:	9e 01       	movw	r18, r28
    4732:	2f 5f       	subi	r18, 0xFF	; 255
    4734:	3f 4f       	sbci	r19, 0xFF	; 255
    4736:	b9 01       	movw	r22, r18
    4738:	0e 94 be 21 	call	0x437c	; 0x437c <IR_u8ReadSensor>
    473c:	88 23       	and	r24, r24
    473e:	11 f0       	breq	.+4      	; 0x4744 <lineFollowerDetect+0x22>
		return LINE_FOLLOWER_ERROR;
    4740:	1c 82       	std	Y+4, r1	; 0x04
    4742:	6b c0       	rjmp	.+214    	; 0x481a <lineFollowerDetect+0xf8>
	}
	if(IR_u8ReadSensor(IR_SENSOR_CENTER,&centerIrRead) != IR_OK){
    4744:	9e 01       	movw	r18, r28
    4746:	2e 5f       	subi	r18, 0xFE	; 254
    4748:	3f 4f       	sbci	r19, 0xFF	; 255
    474a:	81 e0       	ldi	r24, 0x01	; 1
    474c:	b9 01       	movw	r22, r18
    474e:	0e 94 be 21 	call	0x437c	; 0x437c <IR_u8ReadSensor>
    4752:	88 23       	and	r24, r24
    4754:	11 f0       	breq	.+4      	; 0x475a <lineFollowerDetect+0x38>
		return LINE_FOLLOWER_ERROR;
    4756:	1c 82       	std	Y+4, r1	; 0x04
    4758:	60 c0       	rjmp	.+192    	; 0x481a <lineFollowerDetect+0xf8>
	}
	if(IR_u8ReadSensor(IR_SENSOR_RIGHT,&rightIrRead) != IR_OK){
    475a:	9e 01       	movw	r18, r28
    475c:	2d 5f       	subi	r18, 0xFD	; 253
    475e:	3f 4f       	sbci	r19, 0xFF	; 255
    4760:	82 e0       	ldi	r24, 0x02	; 2
    4762:	b9 01       	movw	r22, r18
    4764:	0e 94 be 21 	call	0x437c	; 0x437c <IR_u8ReadSensor>
    4768:	88 23       	and	r24, r24
    476a:	11 f0       	breq	.+4      	; 0x4770 <lineFollowerDetect+0x4e>
		return LINE_FOLLOWER_ERROR;
    476c:	1c 82       	std	Y+4, r1	; 0x04
    476e:	55 c0       	rjmp	.+170    	; 0x481a <lineFollowerDetect+0xf8>
	}

	if((leftIrRead == IR_NO_OBJECT)&&(centerIrRead == IR_OBJECT_DETECTED)&&(rightIrRead == IR_NO_OBJECT)){
    4770:	89 81       	ldd	r24, Y+1	; 0x01
    4772:	88 23       	and	r24, r24
    4774:	49 f4       	brne	.+18     	; 0x4788 <lineFollowerDetect+0x66>
    4776:	8a 81       	ldd	r24, Y+2	; 0x02
    4778:	81 30       	cpi	r24, 0x01	; 1
    477a:	31 f4       	brne	.+12     	; 0x4788 <lineFollowerDetect+0x66>
    477c:	8b 81       	ldd	r24, Y+3	; 0x03
    477e:	88 23       	and	r24, r24
    4780:	19 f4       	brne	.+6      	; 0x4788 <lineFollowerDetect+0x66>
		return LINE_FOLLOWER_FORWARD;
    4782:	81 e0       	ldi	r24, 0x01	; 1
    4784:	8c 83       	std	Y+4, r24	; 0x04
    4786:	49 c0       	rjmp	.+146    	; 0x481a <lineFollowerDetect+0xf8>
	}
	if((leftIrRead == IR_OBJECT_DETECTED)&&(centerIrRead == IR_NO_OBJECT)&&(rightIrRead == IR_NO_OBJECT)){
    4788:	89 81       	ldd	r24, Y+1	; 0x01
    478a:	81 30       	cpi	r24, 0x01	; 1
    478c:	49 f4       	brne	.+18     	; 0x47a0 <lineFollowerDetect+0x7e>
    478e:	8a 81       	ldd	r24, Y+2	; 0x02
    4790:	88 23       	and	r24, r24
    4792:	31 f4       	brne	.+12     	; 0x47a0 <lineFollowerDetect+0x7e>
    4794:	8b 81       	ldd	r24, Y+3	; 0x03
    4796:	88 23       	and	r24, r24
    4798:	19 f4       	brne	.+6      	; 0x47a0 <lineFollowerDetect+0x7e>
		return LINE_FOLLOWER_LEFT;
    479a:	82 e0       	ldi	r24, 0x02	; 2
    479c:	8c 83       	std	Y+4, r24	; 0x04
    479e:	3d c0       	rjmp	.+122    	; 0x481a <lineFollowerDetect+0xf8>
	}
	if((leftIrRead == IR_NO_OBJECT)&&(centerIrRead == IR_NO_OBJECT)&&(rightIrRead == IR_OBJECT_DETECTED)){
    47a0:	89 81       	ldd	r24, Y+1	; 0x01
    47a2:	88 23       	and	r24, r24
    47a4:	49 f4       	brne	.+18     	; 0x47b8 <lineFollowerDetect+0x96>
    47a6:	8a 81       	ldd	r24, Y+2	; 0x02
    47a8:	88 23       	and	r24, r24
    47aa:	31 f4       	brne	.+12     	; 0x47b8 <lineFollowerDetect+0x96>
    47ac:	8b 81       	ldd	r24, Y+3	; 0x03
    47ae:	81 30       	cpi	r24, 0x01	; 1
    47b0:	19 f4       	brne	.+6      	; 0x47b8 <lineFollowerDetect+0x96>
		return LINE_FOLLOWER_RIGHT;
    47b2:	83 e0       	ldi	r24, 0x03	; 3
    47b4:	8c 83       	std	Y+4, r24	; 0x04
    47b6:	31 c0       	rjmp	.+98     	; 0x481a <lineFollowerDetect+0xf8>
	}
	if((leftIrRead == IR_OBJECT_DETECTED)&&(centerIrRead == IR_OBJECT_DETECTED)&&(rightIrRead == IR_NO_OBJECT)){
    47b8:	89 81       	ldd	r24, Y+1	; 0x01
    47ba:	81 30       	cpi	r24, 0x01	; 1
    47bc:	49 f4       	brne	.+18     	; 0x47d0 <lineFollowerDetect+0xae>
    47be:	8a 81       	ldd	r24, Y+2	; 0x02
    47c0:	81 30       	cpi	r24, 0x01	; 1
    47c2:	31 f4       	brne	.+12     	; 0x47d0 <lineFollowerDetect+0xae>
    47c4:	8b 81       	ldd	r24, Y+3	; 0x03
    47c6:	88 23       	and	r24, r24
    47c8:	19 f4       	brne	.+6      	; 0x47d0 <lineFollowerDetect+0xae>
		return LINE_FOLLOWER_SLIGHT_LEFT;
    47ca:	84 e0       	ldi	r24, 0x04	; 4
    47cc:	8c 83       	std	Y+4, r24	; 0x04
    47ce:	25 c0       	rjmp	.+74     	; 0x481a <lineFollowerDetect+0xf8>
	}
	if((leftIrRead == IR_NO_OBJECT)&&(centerIrRead == IR_OBJECT_DETECTED)&&(rightIrRead == IR_OBJECT_DETECTED)){
    47d0:	89 81       	ldd	r24, Y+1	; 0x01
    47d2:	88 23       	and	r24, r24
    47d4:	49 f4       	brne	.+18     	; 0x47e8 <lineFollowerDetect+0xc6>
    47d6:	8a 81       	ldd	r24, Y+2	; 0x02
    47d8:	81 30       	cpi	r24, 0x01	; 1
    47da:	31 f4       	brne	.+12     	; 0x47e8 <lineFollowerDetect+0xc6>
    47dc:	8b 81       	ldd	r24, Y+3	; 0x03
    47de:	81 30       	cpi	r24, 0x01	; 1
    47e0:	19 f4       	brne	.+6      	; 0x47e8 <lineFollowerDetect+0xc6>
		return LINE_FOLLOWER_SLIGHT_RIGHT;
    47e2:	85 e0       	ldi	r24, 0x05	; 5
    47e4:	8c 83       	std	Y+4, r24	; 0x04
    47e6:	19 c0       	rjmp	.+50     	; 0x481a <lineFollowerDetect+0xf8>
	}
	if((leftIrRead == IR_NO_OBJECT)&&(centerIrRead == IR_NO_OBJECT)&&(rightIrRead == IR_NO_OBJECT)){
    47e8:	89 81       	ldd	r24, Y+1	; 0x01
    47ea:	88 23       	and	r24, r24
    47ec:	49 f4       	brne	.+18     	; 0x4800 <lineFollowerDetect+0xde>
    47ee:	8a 81       	ldd	r24, Y+2	; 0x02
    47f0:	88 23       	and	r24, r24
    47f2:	31 f4       	brne	.+12     	; 0x4800 <lineFollowerDetect+0xde>
    47f4:	8b 81       	ldd	r24, Y+3	; 0x03
    47f6:	88 23       	and	r24, r24
    47f8:	19 f4       	brne	.+6      	; 0x4800 <lineFollowerDetect+0xde>
		return LINE_FOLLOWER_STOP;
    47fa:	86 e0       	ldi	r24, 0x06	; 6
    47fc:	8c 83       	std	Y+4, r24	; 0x04
    47fe:	0d c0       	rjmp	.+26     	; 0x481a <lineFollowerDetect+0xf8>
	}
	if((leftIrRead == IR_OBJECT_DETECTED)&&(centerIrRead == IR_OBJECT_DETECTED)&&(rightIrRead == IR_OBJECT_DETECTED)){
    4800:	89 81       	ldd	r24, Y+1	; 0x01
    4802:	81 30       	cpi	r24, 0x01	; 1
    4804:	49 f4       	brne	.+18     	; 0x4818 <lineFollowerDetect+0xf6>
    4806:	8a 81       	ldd	r24, Y+2	; 0x02
    4808:	81 30       	cpi	r24, 0x01	; 1
    480a:	31 f4       	brne	.+12     	; 0x4818 <lineFollowerDetect+0xf6>
    480c:	8b 81       	ldd	r24, Y+3	; 0x03
    480e:	81 30       	cpi	r24, 0x01	; 1
    4810:	19 f4       	brne	.+6      	; 0x4818 <lineFollowerDetect+0xf6>
		return LINE_FOLLOWER_STOP;
    4812:	86 e0       	ldi	r24, 0x06	; 6
    4814:	8c 83       	std	Y+4, r24	; 0x04
    4816:	01 c0       	rjmp	.+2      	; 0x481a <lineFollowerDetect+0xf8>
	}

	return LINE_FOLLOWER_ERROR;
    4818:	1c 82       	std	Y+4, r1	; 0x04
    481a:	8c 81       	ldd	r24, Y+4	; 0x04

}
    481c:	0f 90       	pop	r0
    481e:	0f 90       	pop	r0
    4820:	0f 90       	pop	r0
    4822:	0f 90       	pop	r0
    4824:	cf 91       	pop	r28
    4826:	df 91       	pop	r29
    4828:	08 95       	ret

0000482a <carInit>:
 *  - Initializes UART and assigns the RX interrupt callback.
 *  - Initializes motors, ultrasonic sensor (Eyes), and line follower sensors.
 *  - Enables global interrupts.
 *  - Stops the car initially.
 * ================================================================ */
void carInit() {
    482a:	df 93       	push	r29
    482c:	cf 93       	push	r28
    482e:	cd b7       	in	r28, 0x3d	; 61
    4830:	de b7       	in	r29, 0x3e	; 62
	UART_voidSetRxCallback(SimpleRxCallback);  // Set UART interrupt handler
    4832:	8e ef       	ldi	r24, 0xFE	; 254
    4834:	98 e2       	ldi	r25, 0x28	; 40
    4836:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <UART_voidSetRxCallback>
	UART_vidInit();                            // Initialize UART
    483a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <UART_vidInit>
	vdCarInitMotors();                         // Initialize motor driver pins
    483e:	0e 94 b6 22 	call	0x456c	; 0x456c <vdCarInitMotors>
	EYES_vdInit();                             // Initialize ultrasonic (eyes)
    4842:	0e 94 ed 22 	call	0x45da	; 0x45da <EYES_vdInit>
	vidLineFollowerInit();                     // Initialize line follower sensors
    4846:	0e 94 88 23 	call	0x4710	; 0x4710 <vidLineFollowerInit>
	vdCarStop();                               // Stop motors initially
    484a:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <vdCarStop>
	sei();                                     // Enable global interrupts
    484e:	78 94       	sei
}
    4850:	cf 91       	pop	r28
    4852:	df 91       	pop	r29
    4854:	08 95       	ret

00004856 <handleMode1>:
 * ---------------------------------------------------------------
 * Description:
 *  Handles manual control mode.
 *  The car moves according to direction commands received from UART.
 * ================================================================ */
void handleMode1() {
    4856:	df 93       	push	r29
    4858:	cf 93       	push	r28
    485a:	00 d0       	rcall	.+0      	; 0x485c <handleMode1+0x6>
    485c:	cd b7       	in	r28, 0x3d	; 61
    485e:	de b7       	in	r29, 0x3e	; 62
	switch(SelectedDirec) {
    4860:	80 91 69 00 	lds	r24, 0x0069
    4864:	28 2f       	mov	r18, r24
    4866:	30 e0       	ldi	r19, 0x00	; 0
    4868:	3a 83       	std	Y+2, r19	; 0x02
    486a:	29 83       	std	Y+1, r18	; 0x01
    486c:	89 81       	ldd	r24, Y+1	; 0x01
    486e:	9a 81       	ldd	r25, Y+2	; 0x02
    4870:	8c 34       	cpi	r24, 0x4C	; 76
    4872:	91 05       	cpc	r25, r1
    4874:	21 f1       	breq	.+72     	; 0x48be <handleMode1+0x68>
    4876:	29 81       	ldd	r18, Y+1	; 0x01
    4878:	3a 81       	ldd	r19, Y+2	; 0x02
    487a:	2d 34       	cpi	r18, 0x4D	; 77
    487c:	31 05       	cpc	r19, r1
    487e:	5c f4       	brge	.+22     	; 0x4896 <handleMode1+0x40>
    4880:	89 81       	ldd	r24, Y+1	; 0x01
    4882:	9a 81       	ldd	r25, Y+2	; 0x02
    4884:	82 34       	cpi	r24, 0x42	; 66
    4886:	91 05       	cpc	r25, r1
    4888:	a1 f0       	breq	.+40     	; 0x48b2 <handleMode1+0x5c>
    488a:	29 81       	ldd	r18, Y+1	; 0x01
    488c:	3a 81       	ldd	r19, Y+2	; 0x02
    488e:	26 34       	cpi	r18, 0x46	; 70
    4890:	31 05       	cpc	r19, r1
    4892:	61 f0       	breq	.+24     	; 0x48ac <handleMode1+0x56>
    4894:	19 c0       	rjmp	.+50     	; 0x48c8 <handleMode1+0x72>
    4896:	89 81       	ldd	r24, Y+1	; 0x01
    4898:	9a 81       	ldd	r25, Y+2	; 0x02
    489a:	82 35       	cpi	r24, 0x52	; 82
    489c:	91 05       	cpc	r25, r1
    489e:	61 f0       	breq	.+24     	; 0x48b8 <handleMode1+0x62>
    48a0:	29 81       	ldd	r18, Y+1	; 0x01
    48a2:	3a 81       	ldd	r19, Y+2	; 0x02
    48a4:	23 35       	cpi	r18, 0x53	; 83
    48a6:	31 05       	cpc	r19, r1
    48a8:	69 f0       	breq	.+26     	; 0x48c4 <handleMode1+0x6e>
    48aa:	0e c0       	rjmp	.+28     	; 0x48c8 <handleMode1+0x72>
	case FORWARD_DIRECTION  : vdCarMoveUp();    break;
    48ac:	0e 94 ab 22 	call	0x4556	; 0x4556 <vdCarMoveUp>
    48b0:	0b c0       	rjmp	.+22     	; 0x48c8 <handleMode1+0x72>
	case BACKWARD_DIRECTION : vdCarMoveBack();  break;
    48b2:	0e 94 c1 22 	call	0x4582	; 0x4582 <vdCarMoveBack>
    48b6:	08 c0       	rjmp	.+16     	; 0x48c8 <handleMode1+0x72>
	case RIGHT_DIRECTION    : vdCarMoveRight(); break;
    48b8:	0e 94 cc 22 	call	0x4598	; 0x4598 <vdCarMoveRight>
    48bc:	05 c0       	rjmp	.+10     	; 0x48c8 <handleMode1+0x72>
	case LEFT_DIRECTION     : vdCarMoveLeft();  break;
    48be:	0e 94 d7 22 	call	0x45ae	; 0x45ae <vdCarMoveLeft>
    48c2:	02 c0       	rjmp	.+4      	; 0x48c8 <handleMode1+0x72>
	case STOP_MOVE          : vdCarStop();      break;
    48c4:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <vdCarStop>
	}
}
    48c8:	0f 90       	pop	r0
    48ca:	0f 90       	pop	r0
    48cc:	cf 91       	pop	r28
    48ce:	df 91       	pop	r29
    48d0:	08 95       	ret

000048d2 <handleMode2>:
 *  The car:
 *    - Moves forward if no obstacle is detected within EYES_THRESHOLD distance.
 *    - Stops and makes a decision (turn left/right) if an obstacle is close.
 *    - Moves backward slightly if too close to the obstacle.
 * ================================================================ */
void handleMode2() {
    48d2:	0f 93       	push	r16
    48d4:	1f 93       	push	r17
    48d6:	df 93       	push	r29
    48d8:	cf 93       	push	r28
    48da:	cd b7       	in	r28, 0x3d	; 61
    48dc:	de b7       	in	r29, 0x3e	; 62
    48de:	c8 56       	subi	r28, 0x68	; 104
    48e0:	d0 40       	sbci	r29, 0x00	; 0
    48e2:	0f b6       	in	r0, 0x3f	; 63
    48e4:	f8 94       	cli
    48e6:	de bf       	out	0x3e, r29	; 62
    48e8:	0f be       	out	0x3f, r0	; 63
    48ea:	cd bf       	out	0x3d, r28	; 61
	u16 distance = 0;
    48ec:	fe 01       	movw	r30, r28
    48ee:	ed 59       	subi	r30, 0x9D	; 157
    48f0:	ff 4f       	sbci	r31, 0xFF	; 255
    48f2:	11 82       	std	Z+1, r1	; 0x01
    48f4:	10 82       	st	Z, r1

	// Measure front distance
	if (EYES_MeasureDist(&distance) != EYES_MEASURE_OK) {
    48f6:	ce 01       	movw	r24, r28
    48f8:	8d 59       	subi	r24, 0x9D	; 157
    48fa:	9f 4f       	sbci	r25, 0xFF	; 255
    48fc:	0e 94 23 23 	call	0x4646	; 0x4646 <EYES_MeasureDist>
    4900:	81 30       	cpi	r24, 0x01	; 1
    4902:	19 f0       	breq	.+6      	; 0x490a <handleMode2+0x38>
		EYES_SetAlarm();  // Trigger error/alarm (e.g., LED)
    4904:	0e 94 81 23 	call	0x4702	; 0x4702 <EYES_SetAlarm>
    4908:	fd c3       	rjmp	.+2042   	; 0x5104 <handleMode2+0x832>
		return;
	}

	// If no obstacle in front — move forward
	if (distance > EYES_THRESHOLD) {
    490a:	fe 01       	movw	r30, r28
    490c:	ed 59       	subi	r30, 0x9D	; 157
    490e:	ff 4f       	sbci	r31, 0xFF	; 255
    4910:	80 81       	ld	r24, Z
    4912:	91 81       	ldd	r25, Z+1	; 0x01
    4914:	89 32       	cpi	r24, 0x29	; 41
    4916:	91 05       	cpc	r25, r1
    4918:	18 f0       	brcs	.+6      	; 0x4920 <handleMode2+0x4e>
		vdCarMoveUp();
    491a:	0e 94 ab 22 	call	0x4556	; 0x4556 <vdCarMoveUp>
    491e:	f2 c3       	rjmp	.+2020   	; 0x5104 <handleMode2+0x832>
	} else {
		// Stop and decide a new direction
		vdCarStop();
    4920:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <vdCarStop>
    4924:	fe 01       	movw	r30, r28
    4926:	e1 5a       	subi	r30, 0xA1	; 161
    4928:	ff 4f       	sbci	r31, 0xFF	; 255
    492a:	80 e0       	ldi	r24, 0x00	; 0
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	a6 e1       	ldi	r26, 0x16	; 22
    4930:	b4 e4       	ldi	r27, 0x44	; 68
    4932:	80 83       	st	Z, r24
    4934:	91 83       	std	Z+1, r25	; 0x01
    4936:	a2 83       	std	Z+2, r26	; 0x02
    4938:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    493a:	8e 01       	movw	r16, r28
    493c:	05 5a       	subi	r16, 0xA5	; 165
    493e:	1f 4f       	sbci	r17, 0xFF	; 255
    4940:	fe 01       	movw	r30, r28
    4942:	e1 5a       	subi	r30, 0xA1	; 161
    4944:	ff 4f       	sbci	r31, 0xFF	; 255
    4946:	60 81       	ld	r22, Z
    4948:	71 81       	ldd	r23, Z+1	; 0x01
    494a:	82 81       	ldd	r24, Z+2	; 0x02
    494c:	93 81       	ldd	r25, Z+3	; 0x03
    494e:	20 e0       	ldi	r18, 0x00	; 0
    4950:	30 e0       	ldi	r19, 0x00	; 0
    4952:	4a ef       	ldi	r20, 0xFA	; 250
    4954:	54 e4       	ldi	r21, 0x44	; 68
    4956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    495a:	dc 01       	movw	r26, r24
    495c:	cb 01       	movw	r24, r22
    495e:	f8 01       	movw	r30, r16
    4960:	80 83       	st	Z, r24
    4962:	91 83       	std	Z+1, r25	; 0x01
    4964:	a2 83       	std	Z+2, r26	; 0x02
    4966:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4968:	fe 01       	movw	r30, r28
    496a:	e5 5a       	subi	r30, 0xA5	; 165
    496c:	ff 4f       	sbci	r31, 0xFF	; 255
    496e:	60 81       	ld	r22, Z
    4970:	71 81       	ldd	r23, Z+1	; 0x01
    4972:	82 81       	ldd	r24, Z+2	; 0x02
    4974:	93 81       	ldd	r25, Z+3	; 0x03
    4976:	20 e0       	ldi	r18, 0x00	; 0
    4978:	30 e0       	ldi	r19, 0x00	; 0
    497a:	40 e8       	ldi	r20, 0x80	; 128
    497c:	5f e3       	ldi	r21, 0x3F	; 63
    497e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4982:	88 23       	and	r24, r24
    4984:	44 f4       	brge	.+16     	; 0x4996 <handleMode2+0xc4>
		__ticks = 1;
    4986:	fe 01       	movw	r30, r28
    4988:	e7 5a       	subi	r30, 0xA7	; 167
    498a:	ff 4f       	sbci	r31, 0xFF	; 255
    498c:	81 e0       	ldi	r24, 0x01	; 1
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	91 83       	std	Z+1, r25	; 0x01
    4992:	80 83       	st	Z, r24
    4994:	64 c0       	rjmp	.+200    	; 0x4a5e <handleMode2+0x18c>
	else if (__tmp > 65535)
    4996:	fe 01       	movw	r30, r28
    4998:	e5 5a       	subi	r30, 0xA5	; 165
    499a:	ff 4f       	sbci	r31, 0xFF	; 255
    499c:	60 81       	ld	r22, Z
    499e:	71 81       	ldd	r23, Z+1	; 0x01
    49a0:	82 81       	ldd	r24, Z+2	; 0x02
    49a2:	93 81       	ldd	r25, Z+3	; 0x03
    49a4:	20 e0       	ldi	r18, 0x00	; 0
    49a6:	3f ef       	ldi	r19, 0xFF	; 255
    49a8:	4f e7       	ldi	r20, 0x7F	; 127
    49aa:	57 e4       	ldi	r21, 0x47	; 71
    49ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49b0:	18 16       	cp	r1, r24
    49b2:	0c f0       	brlt	.+2      	; 0x49b6 <handleMode2+0xe4>
    49b4:	43 c0       	rjmp	.+134    	; 0x4a3c <handleMode2+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49b6:	fe 01       	movw	r30, r28
    49b8:	e1 5a       	subi	r30, 0xA1	; 161
    49ba:	ff 4f       	sbci	r31, 0xFF	; 255
    49bc:	60 81       	ld	r22, Z
    49be:	71 81       	ldd	r23, Z+1	; 0x01
    49c0:	82 81       	ldd	r24, Z+2	; 0x02
    49c2:	93 81       	ldd	r25, Z+3	; 0x03
    49c4:	20 e0       	ldi	r18, 0x00	; 0
    49c6:	30 e0       	ldi	r19, 0x00	; 0
    49c8:	40 e2       	ldi	r20, 0x20	; 32
    49ca:	51 e4       	ldi	r21, 0x41	; 65
    49cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49d0:	dc 01       	movw	r26, r24
    49d2:	cb 01       	movw	r24, r22
    49d4:	8e 01       	movw	r16, r28
    49d6:	07 5a       	subi	r16, 0xA7	; 167
    49d8:	1f 4f       	sbci	r17, 0xFF	; 255
    49da:	bc 01       	movw	r22, r24
    49dc:	cd 01       	movw	r24, r26
    49de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49e2:	dc 01       	movw	r26, r24
    49e4:	cb 01       	movw	r24, r22
    49e6:	f8 01       	movw	r30, r16
    49e8:	91 83       	std	Z+1, r25	; 0x01
    49ea:	80 83       	st	Z, r24
    49ec:	1f c0       	rjmp	.+62     	; 0x4a2c <handleMode2+0x15a>
    49ee:	fe 01       	movw	r30, r28
    49f0:	e9 5a       	subi	r30, 0xA9	; 169
    49f2:	ff 4f       	sbci	r31, 0xFF	; 255
    49f4:	88 ec       	ldi	r24, 0xC8	; 200
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	91 83       	std	Z+1, r25	; 0x01
    49fa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    49fc:	fe 01       	movw	r30, r28
    49fe:	e9 5a       	subi	r30, 0xA9	; 169
    4a00:	ff 4f       	sbci	r31, 0xFF	; 255
    4a02:	80 81       	ld	r24, Z
    4a04:	91 81       	ldd	r25, Z+1	; 0x01
    4a06:	01 97       	sbiw	r24, 0x01	; 1
    4a08:	f1 f7       	brne	.-4      	; 0x4a06 <handleMode2+0x134>
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	e9 5a       	subi	r30, 0xA9	; 169
    4a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a10:	91 83       	std	Z+1, r25	; 0x01
    4a12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a14:	de 01       	movw	r26, r28
    4a16:	a7 5a       	subi	r26, 0xA7	; 167
    4a18:	bf 4f       	sbci	r27, 0xFF	; 255
    4a1a:	fe 01       	movw	r30, r28
    4a1c:	e7 5a       	subi	r30, 0xA7	; 167
    4a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a20:	80 81       	ld	r24, Z
    4a22:	91 81       	ldd	r25, Z+1	; 0x01
    4a24:	01 97       	sbiw	r24, 0x01	; 1
    4a26:	11 96       	adiw	r26, 0x01	; 1
    4a28:	9c 93       	st	X, r25
    4a2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a2c:	fe 01       	movw	r30, r28
    4a2e:	e7 5a       	subi	r30, 0xA7	; 167
    4a30:	ff 4f       	sbci	r31, 0xFF	; 255
    4a32:	80 81       	ld	r24, Z
    4a34:	91 81       	ldd	r25, Z+1	; 0x01
    4a36:	00 97       	sbiw	r24, 0x00	; 0
    4a38:	d1 f6       	brne	.-76     	; 0x49ee <handleMode2+0x11c>
    4a3a:	28 c0       	rjmp	.+80     	; 0x4a8c <handleMode2+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a3c:	8e 01       	movw	r16, r28
    4a3e:	07 5a       	subi	r16, 0xA7	; 167
    4a40:	1f 4f       	sbci	r17, 0xFF	; 255
    4a42:	fe 01       	movw	r30, r28
    4a44:	e5 5a       	subi	r30, 0xA5	; 165
    4a46:	ff 4f       	sbci	r31, 0xFF	; 255
    4a48:	60 81       	ld	r22, Z
    4a4a:	71 81       	ldd	r23, Z+1	; 0x01
    4a4c:	82 81       	ldd	r24, Z+2	; 0x02
    4a4e:	93 81       	ldd	r25, Z+3	; 0x03
    4a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a54:	dc 01       	movw	r26, r24
    4a56:	cb 01       	movw	r24, r22
    4a58:	f8 01       	movw	r30, r16
    4a5a:	91 83       	std	Z+1, r25	; 0x01
    4a5c:	80 83       	st	Z, r24
    4a5e:	de 01       	movw	r26, r28
    4a60:	ab 5a       	subi	r26, 0xAB	; 171
    4a62:	bf 4f       	sbci	r27, 0xFF	; 255
    4a64:	fe 01       	movw	r30, r28
    4a66:	e7 5a       	subi	r30, 0xA7	; 167
    4a68:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6a:	80 81       	ld	r24, Z
    4a6c:	91 81       	ldd	r25, Z+1	; 0x01
    4a6e:	11 96       	adiw	r26, 0x01	; 1
    4a70:	9c 93       	st	X, r25
    4a72:	8e 93       	st	-X, r24
    4a74:	fe 01       	movw	r30, r28
    4a76:	eb 5a       	subi	r30, 0xAB	; 171
    4a78:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7a:	80 81       	ld	r24, Z
    4a7c:	91 81       	ldd	r25, Z+1	; 0x01
    4a7e:	01 97       	sbiw	r24, 0x01	; 1
    4a80:	f1 f7       	brne	.-4      	; 0x4a7e <handleMode2+0x1ac>
    4a82:	fe 01       	movw	r30, r28
    4a84:	eb 5a       	subi	r30, 0xAB	; 171
    4a86:	ff 4f       	sbci	r31, 0xFF	; 255
    4a88:	91 83       	std	Z+1, r25	; 0x01
    4a8a:	80 83       	st	Z, r24
		_delay_ms(600);

		// Too close — move backward slightly
		if (distance < 15) {
    4a8c:	fe 01       	movw	r30, r28
    4a8e:	ed 59       	subi	r30, 0x9D	; 157
    4a90:	ff 4f       	sbci	r31, 0xFF	; 255
    4a92:	80 81       	ld	r24, Z
    4a94:	91 81       	ldd	r25, Z+1	; 0x01
    4a96:	8f 30       	cpi	r24, 0x0F	; 15
    4a98:	91 05       	cpc	r25, r1
    4a9a:	08 f0       	brcs	.+2      	; 0x4a9e <handleMode2+0x1cc>
    4a9c:	b7 c0       	rjmp	.+366    	; 0x4c0c <handleMode2+0x33a>
			vdCarMoveBack();
    4a9e:	0e 94 c1 22 	call	0x4582	; 0x4582 <vdCarMoveBack>
    4aa2:	fe 01       	movw	r30, r28
    4aa4:	ef 5a       	subi	r30, 0xAF	; 175
    4aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa8:	80 e0       	ldi	r24, 0x00	; 0
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	a6 e9       	ldi	r26, 0x96	; 150
    4aae:	b3 e4       	ldi	r27, 0x43	; 67
    4ab0:	80 83       	st	Z, r24
    4ab2:	91 83       	std	Z+1, r25	; 0x01
    4ab4:	a2 83       	std	Z+2, r26	; 0x02
    4ab6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ab8:	8e 01       	movw	r16, r28
    4aba:	03 5b       	subi	r16, 0xB3	; 179
    4abc:	1f 4f       	sbci	r17, 0xFF	; 255
    4abe:	fe 01       	movw	r30, r28
    4ac0:	ef 5a       	subi	r30, 0xAF	; 175
    4ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac4:	60 81       	ld	r22, Z
    4ac6:	71 81       	ldd	r23, Z+1	; 0x01
    4ac8:	82 81       	ldd	r24, Z+2	; 0x02
    4aca:	93 81       	ldd	r25, Z+3	; 0x03
    4acc:	20 e0       	ldi	r18, 0x00	; 0
    4ace:	30 e0       	ldi	r19, 0x00	; 0
    4ad0:	4a ef       	ldi	r20, 0xFA	; 250
    4ad2:	54 e4       	ldi	r21, 0x44	; 68
    4ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ad8:	dc 01       	movw	r26, r24
    4ada:	cb 01       	movw	r24, r22
    4adc:	f8 01       	movw	r30, r16
    4ade:	80 83       	st	Z, r24
    4ae0:	91 83       	std	Z+1, r25	; 0x01
    4ae2:	a2 83       	std	Z+2, r26	; 0x02
    4ae4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ae6:	fe 01       	movw	r30, r28
    4ae8:	e3 5b       	subi	r30, 0xB3	; 179
    4aea:	ff 4f       	sbci	r31, 0xFF	; 255
    4aec:	60 81       	ld	r22, Z
    4aee:	71 81       	ldd	r23, Z+1	; 0x01
    4af0:	82 81       	ldd	r24, Z+2	; 0x02
    4af2:	93 81       	ldd	r25, Z+3	; 0x03
    4af4:	20 e0       	ldi	r18, 0x00	; 0
    4af6:	30 e0       	ldi	r19, 0x00	; 0
    4af8:	40 e8       	ldi	r20, 0x80	; 128
    4afa:	5f e3       	ldi	r21, 0x3F	; 63
    4afc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b00:	88 23       	and	r24, r24
    4b02:	44 f4       	brge	.+16     	; 0x4b14 <handleMode2+0x242>
		__ticks = 1;
    4b04:	fe 01       	movw	r30, r28
    4b06:	e5 5b       	subi	r30, 0xB5	; 181
    4b08:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0a:	81 e0       	ldi	r24, 0x01	; 1
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	91 83       	std	Z+1, r25	; 0x01
    4b10:	80 83       	st	Z, r24
    4b12:	64 c0       	rjmp	.+200    	; 0x4bdc <handleMode2+0x30a>
	else if (__tmp > 65535)
    4b14:	fe 01       	movw	r30, r28
    4b16:	e3 5b       	subi	r30, 0xB3	; 179
    4b18:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1a:	60 81       	ld	r22, Z
    4b1c:	71 81       	ldd	r23, Z+1	; 0x01
    4b1e:	82 81       	ldd	r24, Z+2	; 0x02
    4b20:	93 81       	ldd	r25, Z+3	; 0x03
    4b22:	20 e0       	ldi	r18, 0x00	; 0
    4b24:	3f ef       	ldi	r19, 0xFF	; 255
    4b26:	4f e7       	ldi	r20, 0x7F	; 127
    4b28:	57 e4       	ldi	r21, 0x47	; 71
    4b2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b2e:	18 16       	cp	r1, r24
    4b30:	0c f0       	brlt	.+2      	; 0x4b34 <handleMode2+0x262>
    4b32:	43 c0       	rjmp	.+134    	; 0x4bba <handleMode2+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b34:	fe 01       	movw	r30, r28
    4b36:	ef 5a       	subi	r30, 0xAF	; 175
    4b38:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3a:	60 81       	ld	r22, Z
    4b3c:	71 81       	ldd	r23, Z+1	; 0x01
    4b3e:	82 81       	ldd	r24, Z+2	; 0x02
    4b40:	93 81       	ldd	r25, Z+3	; 0x03
    4b42:	20 e0       	ldi	r18, 0x00	; 0
    4b44:	30 e0       	ldi	r19, 0x00	; 0
    4b46:	40 e2       	ldi	r20, 0x20	; 32
    4b48:	51 e4       	ldi	r21, 0x41	; 65
    4b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b4e:	dc 01       	movw	r26, r24
    4b50:	cb 01       	movw	r24, r22
    4b52:	8e 01       	movw	r16, r28
    4b54:	05 5b       	subi	r16, 0xB5	; 181
    4b56:	1f 4f       	sbci	r17, 0xFF	; 255
    4b58:	bc 01       	movw	r22, r24
    4b5a:	cd 01       	movw	r24, r26
    4b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b60:	dc 01       	movw	r26, r24
    4b62:	cb 01       	movw	r24, r22
    4b64:	f8 01       	movw	r30, r16
    4b66:	91 83       	std	Z+1, r25	; 0x01
    4b68:	80 83       	st	Z, r24
    4b6a:	1f c0       	rjmp	.+62     	; 0x4baa <handleMode2+0x2d8>
    4b6c:	fe 01       	movw	r30, r28
    4b6e:	e7 5b       	subi	r30, 0xB7	; 183
    4b70:	ff 4f       	sbci	r31, 0xFF	; 255
    4b72:	88 ec       	ldi	r24, 0xC8	; 200
    4b74:	90 e0       	ldi	r25, 0x00	; 0
    4b76:	91 83       	std	Z+1, r25	; 0x01
    4b78:	80 83       	st	Z, r24
    4b7a:	fe 01       	movw	r30, r28
    4b7c:	e7 5b       	subi	r30, 0xB7	; 183
    4b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b80:	80 81       	ld	r24, Z
    4b82:	91 81       	ldd	r25, Z+1	; 0x01
    4b84:	01 97       	sbiw	r24, 0x01	; 1
    4b86:	f1 f7       	brne	.-4      	; 0x4b84 <handleMode2+0x2b2>
    4b88:	fe 01       	movw	r30, r28
    4b8a:	e7 5b       	subi	r30, 0xB7	; 183
    4b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8e:	91 83       	std	Z+1, r25	; 0x01
    4b90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b92:	de 01       	movw	r26, r28
    4b94:	a5 5b       	subi	r26, 0xB5	; 181
    4b96:	bf 4f       	sbci	r27, 0xFF	; 255
    4b98:	fe 01       	movw	r30, r28
    4b9a:	e5 5b       	subi	r30, 0xB5	; 181
    4b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9e:	80 81       	ld	r24, Z
    4ba0:	91 81       	ldd	r25, Z+1	; 0x01
    4ba2:	01 97       	sbiw	r24, 0x01	; 1
    4ba4:	11 96       	adiw	r26, 0x01	; 1
    4ba6:	9c 93       	st	X, r25
    4ba8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4baa:	fe 01       	movw	r30, r28
    4bac:	e5 5b       	subi	r30, 0xB5	; 181
    4bae:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb0:	80 81       	ld	r24, Z
    4bb2:	91 81       	ldd	r25, Z+1	; 0x01
    4bb4:	00 97       	sbiw	r24, 0x00	; 0
    4bb6:	d1 f6       	brne	.-76     	; 0x4b6c <handleMode2+0x29a>
    4bb8:	27 c0       	rjmp	.+78     	; 0x4c08 <handleMode2+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bba:	8e 01       	movw	r16, r28
    4bbc:	05 5b       	subi	r16, 0xB5	; 181
    4bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    4bc0:	fe 01       	movw	r30, r28
    4bc2:	e3 5b       	subi	r30, 0xB3	; 179
    4bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc6:	60 81       	ld	r22, Z
    4bc8:	71 81       	ldd	r23, Z+1	; 0x01
    4bca:	82 81       	ldd	r24, Z+2	; 0x02
    4bcc:	93 81       	ldd	r25, Z+3	; 0x03
    4bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bd2:	dc 01       	movw	r26, r24
    4bd4:	cb 01       	movw	r24, r22
    4bd6:	f8 01       	movw	r30, r16
    4bd8:	91 83       	std	Z+1, r25	; 0x01
    4bda:	80 83       	st	Z, r24
    4bdc:	de 01       	movw	r26, r28
    4bde:	a9 5b       	subi	r26, 0xB9	; 185
    4be0:	bf 4f       	sbci	r27, 0xFF	; 255
    4be2:	fe 01       	movw	r30, r28
    4be4:	e5 5b       	subi	r30, 0xB5	; 181
    4be6:	ff 4f       	sbci	r31, 0xFF	; 255
    4be8:	80 81       	ld	r24, Z
    4bea:	91 81       	ldd	r25, Z+1	; 0x01
    4bec:	8d 93       	st	X+, r24
    4bee:	9c 93       	st	X, r25
    4bf0:	fe 01       	movw	r30, r28
    4bf2:	e9 5b       	subi	r30, 0xB9	; 185
    4bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf6:	80 81       	ld	r24, Z
    4bf8:	91 81       	ldd	r25, Z+1	; 0x01
    4bfa:	01 97       	sbiw	r24, 0x01	; 1
    4bfc:	f1 f7       	brne	.-4      	; 0x4bfa <handleMode2+0x328>
    4bfe:	fe 01       	movw	r30, r28
    4c00:	e9 5b       	subi	r30, 0xB9	; 185
    4c02:	ff 4f       	sbci	r31, 0xFF	; 255
    4c04:	91 83       	std	Z+1, r25	; 0x01
    4c06:	80 83       	st	Z, r24
			_delay_ms(300);
			vdCarStop();
    4c08:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <vdCarStop>
		}

		// Scan right side
		EYES_LookRight();
    4c0c:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <EYES_LookRight>
    4c10:	fe 01       	movw	r30, r28
    4c12:	ed 5b       	subi	r30, 0xBD	; 189
    4c14:	ff 4f       	sbci	r31, 0xFF	; 255
    4c16:	80 e0       	ldi	r24, 0x00	; 0
    4c18:	90 e0       	ldi	r25, 0x00	; 0
    4c1a:	a6 e1       	ldi	r26, 0x16	; 22
    4c1c:	b4 e4       	ldi	r27, 0x44	; 68
    4c1e:	80 83       	st	Z, r24
    4c20:	91 83       	std	Z+1, r25	; 0x01
    4c22:	a2 83       	std	Z+2, r26	; 0x02
    4c24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c26:	8e 01       	movw	r16, r28
    4c28:	01 5c       	subi	r16, 0xC1	; 193
    4c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c2c:	fe 01       	movw	r30, r28
    4c2e:	ed 5b       	subi	r30, 0xBD	; 189
    4c30:	ff 4f       	sbci	r31, 0xFF	; 255
    4c32:	60 81       	ld	r22, Z
    4c34:	71 81       	ldd	r23, Z+1	; 0x01
    4c36:	82 81       	ldd	r24, Z+2	; 0x02
    4c38:	93 81       	ldd	r25, Z+3	; 0x03
    4c3a:	20 e0       	ldi	r18, 0x00	; 0
    4c3c:	30 e0       	ldi	r19, 0x00	; 0
    4c3e:	4a ef       	ldi	r20, 0xFA	; 250
    4c40:	54 e4       	ldi	r21, 0x44	; 68
    4c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c46:	dc 01       	movw	r26, r24
    4c48:	cb 01       	movw	r24, r22
    4c4a:	f8 01       	movw	r30, r16
    4c4c:	80 83       	st	Z, r24
    4c4e:	91 83       	std	Z+1, r25	; 0x01
    4c50:	a2 83       	std	Z+2, r26	; 0x02
    4c52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c54:	fe 01       	movw	r30, r28
    4c56:	ff 96       	adiw	r30, 0x3f	; 63
    4c58:	60 81       	ld	r22, Z
    4c5a:	71 81       	ldd	r23, Z+1	; 0x01
    4c5c:	82 81       	ldd	r24, Z+2	; 0x02
    4c5e:	93 81       	ldd	r25, Z+3	; 0x03
    4c60:	20 e0       	ldi	r18, 0x00	; 0
    4c62:	30 e0       	ldi	r19, 0x00	; 0
    4c64:	40 e8       	ldi	r20, 0x80	; 128
    4c66:	5f e3       	ldi	r21, 0x3F	; 63
    4c68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c6c:	88 23       	and	r24, r24
    4c6e:	2c f4       	brge	.+10     	; 0x4c7a <handleMode2+0x3a8>
		__ticks = 1;
    4c70:	81 e0       	ldi	r24, 0x01	; 1
    4c72:	90 e0       	ldi	r25, 0x00	; 0
    4c74:	9e af       	std	Y+62, r25	; 0x3e
    4c76:	8d af       	std	Y+61, r24	; 0x3d
    4c78:	46 c0       	rjmp	.+140    	; 0x4d06 <handleMode2+0x434>
	else if (__tmp > 65535)
    4c7a:	fe 01       	movw	r30, r28
    4c7c:	ff 96       	adiw	r30, 0x3f	; 63
    4c7e:	60 81       	ld	r22, Z
    4c80:	71 81       	ldd	r23, Z+1	; 0x01
    4c82:	82 81       	ldd	r24, Z+2	; 0x02
    4c84:	93 81       	ldd	r25, Z+3	; 0x03
    4c86:	20 e0       	ldi	r18, 0x00	; 0
    4c88:	3f ef       	ldi	r19, 0xFF	; 255
    4c8a:	4f e7       	ldi	r20, 0x7F	; 127
    4c8c:	57 e4       	ldi	r21, 0x47	; 71
    4c8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c92:	18 16       	cp	r1, r24
    4c94:	64 f5       	brge	.+88     	; 0x4cee <handleMode2+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c96:	fe 01       	movw	r30, r28
    4c98:	ed 5b       	subi	r30, 0xBD	; 189
    4c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9c:	60 81       	ld	r22, Z
    4c9e:	71 81       	ldd	r23, Z+1	; 0x01
    4ca0:	82 81       	ldd	r24, Z+2	; 0x02
    4ca2:	93 81       	ldd	r25, Z+3	; 0x03
    4ca4:	20 e0       	ldi	r18, 0x00	; 0
    4ca6:	30 e0       	ldi	r19, 0x00	; 0
    4ca8:	40 e2       	ldi	r20, 0x20	; 32
    4caa:	51 e4       	ldi	r21, 0x41	; 65
    4cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cb0:	dc 01       	movw	r26, r24
    4cb2:	cb 01       	movw	r24, r22
    4cb4:	bc 01       	movw	r22, r24
    4cb6:	cd 01       	movw	r24, r26
    4cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cbc:	dc 01       	movw	r26, r24
    4cbe:	cb 01       	movw	r24, r22
    4cc0:	9e af       	std	Y+62, r25	; 0x3e
    4cc2:	8d af       	std	Y+61, r24	; 0x3d
    4cc4:	0f c0       	rjmp	.+30     	; 0x4ce4 <handleMode2+0x412>
    4cc6:	88 ec       	ldi	r24, 0xC8	; 200
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	9c af       	std	Y+60, r25	; 0x3c
    4ccc:	8b af       	std	Y+59, r24	; 0x3b
    4cce:	8b ad       	ldd	r24, Y+59	; 0x3b
    4cd0:	9c ad       	ldd	r25, Y+60	; 0x3c
    4cd2:	01 97       	sbiw	r24, 0x01	; 1
    4cd4:	f1 f7       	brne	.-4      	; 0x4cd2 <handleMode2+0x400>
    4cd6:	9c af       	std	Y+60, r25	; 0x3c
    4cd8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cda:	8d ad       	ldd	r24, Y+61	; 0x3d
    4cdc:	9e ad       	ldd	r25, Y+62	; 0x3e
    4cde:	01 97       	sbiw	r24, 0x01	; 1
    4ce0:	9e af       	std	Y+62, r25	; 0x3e
    4ce2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ce4:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ce6:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ce8:	00 97       	sbiw	r24, 0x00	; 0
    4cea:	69 f7       	brne	.-38     	; 0x4cc6 <handleMode2+0x3f4>
    4cec:	16 c0       	rjmp	.+44     	; 0x4d1a <handleMode2+0x448>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cee:	fe 01       	movw	r30, r28
    4cf0:	ff 96       	adiw	r30, 0x3f	; 63
    4cf2:	60 81       	ld	r22, Z
    4cf4:	71 81       	ldd	r23, Z+1	; 0x01
    4cf6:	82 81       	ldd	r24, Z+2	; 0x02
    4cf8:	93 81       	ldd	r25, Z+3	; 0x03
    4cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cfe:	dc 01       	movw	r26, r24
    4d00:	cb 01       	movw	r24, r22
    4d02:	9e af       	std	Y+62, r25	; 0x3e
    4d04:	8d af       	std	Y+61, r24	; 0x3d
    4d06:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d08:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d0a:	9a af       	std	Y+58, r25	; 0x3a
    4d0c:	89 af       	std	Y+57, r24	; 0x39
    4d0e:	89 ad       	ldd	r24, Y+57	; 0x39
    4d10:	9a ad       	ldd	r25, Y+58	; 0x3a
    4d12:	01 97       	sbiw	r24, 0x01	; 1
    4d14:	f1 f7       	brne	.-4      	; 0x4d12 <handleMode2+0x440>
    4d16:	9a af       	std	Y+58, r25	; 0x3a
    4d18:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(600);
		u16 rightDist;
		if (EYES_MeasureDist(&rightDist) != EYES_MEASURE_OK) {
    4d1a:	ce 01       	movw	r24, r28
    4d1c:	8b 59       	subi	r24, 0x9B	; 155
    4d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d20:	0e 94 23 23 	call	0x4646	; 0x4646 <EYES_MeasureDist>
    4d24:	81 30       	cpi	r24, 0x01	; 1
    4d26:	19 f0       	breq	.+6      	; 0x4d2e <handleMode2+0x45c>
			EYES_SetAlarm();
    4d28:	0e 94 81 23 	call	0x4702	; 0x4702 <EYES_SetAlarm>
    4d2c:	eb c1       	rjmp	.+982    	; 0x5104 <handleMode2+0x832>
			return;
		}

		// Scan left side
		EYES_LookLeft();
    4d2e:	0e 94 09 23 	call	0x4612	; 0x4612 <EYES_LookLeft>
    4d32:	80 e0       	ldi	r24, 0x00	; 0
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	a6 e1       	ldi	r26, 0x16	; 22
    4d38:	b4 e4       	ldi	r27, 0x44	; 68
    4d3a:	8d ab       	std	Y+53, r24	; 0x35
    4d3c:	9e ab       	std	Y+54, r25	; 0x36
    4d3e:	af ab       	std	Y+55, r26	; 0x37
    4d40:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d42:	6d a9       	ldd	r22, Y+53	; 0x35
    4d44:	7e a9       	ldd	r23, Y+54	; 0x36
    4d46:	8f a9       	ldd	r24, Y+55	; 0x37
    4d48:	98 ad       	ldd	r25, Y+56	; 0x38
    4d4a:	20 e0       	ldi	r18, 0x00	; 0
    4d4c:	30 e0       	ldi	r19, 0x00	; 0
    4d4e:	4a ef       	ldi	r20, 0xFA	; 250
    4d50:	54 e4       	ldi	r21, 0x44	; 68
    4d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d56:	dc 01       	movw	r26, r24
    4d58:	cb 01       	movw	r24, r22
    4d5a:	89 ab       	std	Y+49, r24	; 0x31
    4d5c:	9a ab       	std	Y+50, r25	; 0x32
    4d5e:	ab ab       	std	Y+51, r26	; 0x33
    4d60:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4d62:	69 a9       	ldd	r22, Y+49	; 0x31
    4d64:	7a a9       	ldd	r23, Y+50	; 0x32
    4d66:	8b a9       	ldd	r24, Y+51	; 0x33
    4d68:	9c a9       	ldd	r25, Y+52	; 0x34
    4d6a:	20 e0       	ldi	r18, 0x00	; 0
    4d6c:	30 e0       	ldi	r19, 0x00	; 0
    4d6e:	40 e8       	ldi	r20, 0x80	; 128
    4d70:	5f e3       	ldi	r21, 0x3F	; 63
    4d72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d76:	88 23       	and	r24, r24
    4d78:	2c f4       	brge	.+10     	; 0x4d84 <handleMode2+0x4b2>
		__ticks = 1;
    4d7a:	81 e0       	ldi	r24, 0x01	; 1
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	98 ab       	std	Y+48, r25	; 0x30
    4d80:	8f a7       	std	Y+47, r24	; 0x2f
    4d82:	3f c0       	rjmp	.+126    	; 0x4e02 <handleMode2+0x530>
	else if (__tmp > 65535)
    4d84:	69 a9       	ldd	r22, Y+49	; 0x31
    4d86:	7a a9       	ldd	r23, Y+50	; 0x32
    4d88:	8b a9       	ldd	r24, Y+51	; 0x33
    4d8a:	9c a9       	ldd	r25, Y+52	; 0x34
    4d8c:	20 e0       	ldi	r18, 0x00	; 0
    4d8e:	3f ef       	ldi	r19, 0xFF	; 255
    4d90:	4f e7       	ldi	r20, 0x7F	; 127
    4d92:	57 e4       	ldi	r21, 0x47	; 71
    4d94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d98:	18 16       	cp	r1, r24
    4d9a:	4c f5       	brge	.+82     	; 0x4dee <handleMode2+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d9c:	6d a9       	ldd	r22, Y+53	; 0x35
    4d9e:	7e a9       	ldd	r23, Y+54	; 0x36
    4da0:	8f a9       	ldd	r24, Y+55	; 0x37
    4da2:	98 ad       	ldd	r25, Y+56	; 0x38
    4da4:	20 e0       	ldi	r18, 0x00	; 0
    4da6:	30 e0       	ldi	r19, 0x00	; 0
    4da8:	40 e2       	ldi	r20, 0x20	; 32
    4daa:	51 e4       	ldi	r21, 0x41	; 65
    4dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4db0:	dc 01       	movw	r26, r24
    4db2:	cb 01       	movw	r24, r22
    4db4:	bc 01       	movw	r22, r24
    4db6:	cd 01       	movw	r24, r26
    4db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dbc:	dc 01       	movw	r26, r24
    4dbe:	cb 01       	movw	r24, r22
    4dc0:	98 ab       	std	Y+48, r25	; 0x30
    4dc2:	8f a7       	std	Y+47, r24	; 0x2f
    4dc4:	0f c0       	rjmp	.+30     	; 0x4de4 <handleMode2+0x512>
    4dc6:	88 ec       	ldi	r24, 0xC8	; 200
    4dc8:	90 e0       	ldi	r25, 0x00	; 0
    4dca:	9e a7       	std	Y+46, r25	; 0x2e
    4dcc:	8d a7       	std	Y+45, r24	; 0x2d
    4dce:	8d a5       	ldd	r24, Y+45	; 0x2d
    4dd0:	9e a5       	ldd	r25, Y+46	; 0x2e
    4dd2:	01 97       	sbiw	r24, 0x01	; 1
    4dd4:	f1 f7       	brne	.-4      	; 0x4dd2 <handleMode2+0x500>
    4dd6:	9e a7       	std	Y+46, r25	; 0x2e
    4dd8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dda:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ddc:	98 a9       	ldd	r25, Y+48	; 0x30
    4dde:	01 97       	sbiw	r24, 0x01	; 1
    4de0:	98 ab       	std	Y+48, r25	; 0x30
    4de2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4de4:	8f a5       	ldd	r24, Y+47	; 0x2f
    4de6:	98 a9       	ldd	r25, Y+48	; 0x30
    4de8:	00 97       	sbiw	r24, 0x00	; 0
    4dea:	69 f7       	brne	.-38     	; 0x4dc6 <handleMode2+0x4f4>
    4dec:	14 c0       	rjmp	.+40     	; 0x4e16 <handleMode2+0x544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dee:	69 a9       	ldd	r22, Y+49	; 0x31
    4df0:	7a a9       	ldd	r23, Y+50	; 0x32
    4df2:	8b a9       	ldd	r24, Y+51	; 0x33
    4df4:	9c a9       	ldd	r25, Y+52	; 0x34
    4df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dfa:	dc 01       	movw	r26, r24
    4dfc:	cb 01       	movw	r24, r22
    4dfe:	98 ab       	std	Y+48, r25	; 0x30
    4e00:	8f a7       	std	Y+47, r24	; 0x2f
    4e02:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e04:	98 a9       	ldd	r25, Y+48	; 0x30
    4e06:	9c a7       	std	Y+44, r25	; 0x2c
    4e08:	8b a7       	std	Y+43, r24	; 0x2b
    4e0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e0e:	01 97       	sbiw	r24, 0x01	; 1
    4e10:	f1 f7       	brne	.-4      	; 0x4e0e <handleMode2+0x53c>
    4e12:	9c a7       	std	Y+44, r25	; 0x2c
    4e14:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(600);
		u16 leftDist;
		if (EYES_MeasureDist(&leftDist) != EYES_MEASURE_OK) {
    4e16:	ce 01       	movw	r24, r28
    4e18:	89 59       	subi	r24, 0x99	; 153
    4e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e1c:	0e 94 23 23 	call	0x4646	; 0x4646 <EYES_MeasureDist>
    4e20:	81 30       	cpi	r24, 0x01	; 1
    4e22:	19 f0       	breq	.+6      	; 0x4e2a <handleMode2+0x558>
			EYES_SetAlarm();
    4e24:	0e 94 81 23 	call	0x4702	; 0x4702 <EYES_SetAlarm>
    4e28:	6d c1       	rjmp	.+730    	; 0x5104 <handleMode2+0x832>
			return;
		}

		// Compare left and right distances
		if (rightDist > leftDist) {
    4e2a:	fe 01       	movw	r30, r28
    4e2c:	eb 59       	subi	r30, 0x9B	; 155
    4e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e30:	20 81       	ld	r18, Z
    4e32:	31 81       	ldd	r19, Z+1	; 0x01
    4e34:	fe 01       	movw	r30, r28
    4e36:	e9 59       	subi	r30, 0x99	; 153
    4e38:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3a:	80 81       	ld	r24, Z
    4e3c:	91 81       	ldd	r25, Z+1	; 0x01
    4e3e:	82 17       	cp	r24, r18
    4e40:	93 07       	cpc	r25, r19
    4e42:	08 f0       	brcs	.+2      	; 0x4e46 <handleMode2+0x574>
    4e44:	75 c0       	rjmp	.+234    	; 0x4f30 <handleMode2+0x65e>
			// More space on the right — turn right
			vdCarMoveRight();
    4e46:	0e 94 cc 22 	call	0x4598	; 0x4598 <vdCarMoveRight>
    4e4a:	80 e0       	ldi	r24, 0x00	; 0
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	a6 e9       	ldi	r26, 0x96	; 150
    4e50:	b3 e4       	ldi	r27, 0x43	; 67
    4e52:	8f a3       	std	Y+39, r24	; 0x27
    4e54:	98 a7       	std	Y+40, r25	; 0x28
    4e56:	a9 a7       	std	Y+41, r26	; 0x29
    4e58:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e5a:	6f a1       	ldd	r22, Y+39	; 0x27
    4e5c:	78 a5       	ldd	r23, Y+40	; 0x28
    4e5e:	89 a5       	ldd	r24, Y+41	; 0x29
    4e60:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e62:	20 e0       	ldi	r18, 0x00	; 0
    4e64:	30 e0       	ldi	r19, 0x00	; 0
    4e66:	4a ef       	ldi	r20, 0xFA	; 250
    4e68:	54 e4       	ldi	r21, 0x44	; 68
    4e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e6e:	dc 01       	movw	r26, r24
    4e70:	cb 01       	movw	r24, r22
    4e72:	8b a3       	std	Y+35, r24	; 0x23
    4e74:	9c a3       	std	Y+36, r25	; 0x24
    4e76:	ad a3       	std	Y+37, r26	; 0x25
    4e78:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4e7a:	6b a1       	ldd	r22, Y+35	; 0x23
    4e7c:	7c a1       	ldd	r23, Y+36	; 0x24
    4e7e:	8d a1       	ldd	r24, Y+37	; 0x25
    4e80:	9e a1       	ldd	r25, Y+38	; 0x26
    4e82:	20 e0       	ldi	r18, 0x00	; 0
    4e84:	30 e0       	ldi	r19, 0x00	; 0
    4e86:	40 e8       	ldi	r20, 0x80	; 128
    4e88:	5f e3       	ldi	r21, 0x3F	; 63
    4e8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e8e:	88 23       	and	r24, r24
    4e90:	2c f4       	brge	.+10     	; 0x4e9c <handleMode2+0x5ca>
		__ticks = 1;
    4e92:	81 e0       	ldi	r24, 0x01	; 1
    4e94:	90 e0       	ldi	r25, 0x00	; 0
    4e96:	9a a3       	std	Y+34, r25	; 0x22
    4e98:	89 a3       	std	Y+33, r24	; 0x21
    4e9a:	3f c0       	rjmp	.+126    	; 0x4f1a <handleMode2+0x648>
	else if (__tmp > 65535)
    4e9c:	6b a1       	ldd	r22, Y+35	; 0x23
    4e9e:	7c a1       	ldd	r23, Y+36	; 0x24
    4ea0:	8d a1       	ldd	r24, Y+37	; 0x25
    4ea2:	9e a1       	ldd	r25, Y+38	; 0x26
    4ea4:	20 e0       	ldi	r18, 0x00	; 0
    4ea6:	3f ef       	ldi	r19, 0xFF	; 255
    4ea8:	4f e7       	ldi	r20, 0x7F	; 127
    4eaa:	57 e4       	ldi	r21, 0x47	; 71
    4eac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4eb0:	18 16       	cp	r1, r24
    4eb2:	4c f5       	brge	.+82     	; 0x4f06 <handleMode2+0x634>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eb4:	6f a1       	ldd	r22, Y+39	; 0x27
    4eb6:	78 a5       	ldd	r23, Y+40	; 0x28
    4eb8:	89 a5       	ldd	r24, Y+41	; 0x29
    4eba:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ebc:	20 e0       	ldi	r18, 0x00	; 0
    4ebe:	30 e0       	ldi	r19, 0x00	; 0
    4ec0:	40 e2       	ldi	r20, 0x20	; 32
    4ec2:	51 e4       	ldi	r21, 0x41	; 65
    4ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ec8:	dc 01       	movw	r26, r24
    4eca:	cb 01       	movw	r24, r22
    4ecc:	bc 01       	movw	r22, r24
    4ece:	cd 01       	movw	r24, r26
    4ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed4:	dc 01       	movw	r26, r24
    4ed6:	cb 01       	movw	r24, r22
    4ed8:	9a a3       	std	Y+34, r25	; 0x22
    4eda:	89 a3       	std	Y+33, r24	; 0x21
    4edc:	0f c0       	rjmp	.+30     	; 0x4efc <handleMode2+0x62a>
    4ede:	88 ec       	ldi	r24, 0xC8	; 200
    4ee0:	90 e0       	ldi	r25, 0x00	; 0
    4ee2:	98 a3       	std	Y+32, r25	; 0x20
    4ee4:	8f 8f       	std	Y+31, r24	; 0x1f
    4ee6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ee8:	98 a1       	ldd	r25, Y+32	; 0x20
    4eea:	01 97       	sbiw	r24, 0x01	; 1
    4eec:	f1 f7       	brne	.-4      	; 0x4eea <handleMode2+0x618>
    4eee:	98 a3       	std	Y+32, r25	; 0x20
    4ef0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ef2:	89 a1       	ldd	r24, Y+33	; 0x21
    4ef4:	9a a1       	ldd	r25, Y+34	; 0x22
    4ef6:	01 97       	sbiw	r24, 0x01	; 1
    4ef8:	9a a3       	std	Y+34, r25	; 0x22
    4efa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4efc:	89 a1       	ldd	r24, Y+33	; 0x21
    4efe:	9a a1       	ldd	r25, Y+34	; 0x22
    4f00:	00 97       	sbiw	r24, 0x00	; 0
    4f02:	69 f7       	brne	.-38     	; 0x4ede <handleMode2+0x60c>
    4f04:	89 c0       	rjmp	.+274    	; 0x5018 <handleMode2+0x746>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f06:	6b a1       	ldd	r22, Y+35	; 0x23
    4f08:	7c a1       	ldd	r23, Y+36	; 0x24
    4f0a:	8d a1       	ldd	r24, Y+37	; 0x25
    4f0c:	9e a1       	ldd	r25, Y+38	; 0x26
    4f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f12:	dc 01       	movw	r26, r24
    4f14:	cb 01       	movw	r24, r22
    4f16:	9a a3       	std	Y+34, r25	; 0x22
    4f18:	89 a3       	std	Y+33, r24	; 0x21
    4f1a:	89 a1       	ldd	r24, Y+33	; 0x21
    4f1c:	9a a1       	ldd	r25, Y+34	; 0x22
    4f1e:	9e 8f       	std	Y+30, r25	; 0x1e
    4f20:	8d 8f       	std	Y+29, r24	; 0x1d
    4f22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f26:	01 97       	sbiw	r24, 0x01	; 1
    4f28:	f1 f7       	brne	.-4      	; 0x4f26 <handleMode2+0x654>
    4f2a:	9e 8f       	std	Y+30, r25	; 0x1e
    4f2c:	8d 8f       	std	Y+29, r24	; 0x1d
    4f2e:	74 c0       	rjmp	.+232    	; 0x5018 <handleMode2+0x746>
			_delay_ms(300);
		} else {
			// More space on the left — turn left
			vdCarMoveLeft();
    4f30:	0e 94 d7 22 	call	0x45ae	; 0x45ae <vdCarMoveLeft>
    4f34:	80 e0       	ldi	r24, 0x00	; 0
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	a6 e9       	ldi	r26, 0x96	; 150
    4f3a:	b3 e4       	ldi	r27, 0x43	; 67
    4f3c:	89 8f       	std	Y+25, r24	; 0x19
    4f3e:	9a 8f       	std	Y+26, r25	; 0x1a
    4f40:	ab 8f       	std	Y+27, r26	; 0x1b
    4f42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f44:	69 8d       	ldd	r22, Y+25	; 0x19
    4f46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f4c:	20 e0       	ldi	r18, 0x00	; 0
    4f4e:	30 e0       	ldi	r19, 0x00	; 0
    4f50:	4a ef       	ldi	r20, 0xFA	; 250
    4f52:	54 e4       	ldi	r21, 0x44	; 68
    4f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f58:	dc 01       	movw	r26, r24
    4f5a:	cb 01       	movw	r24, r22
    4f5c:	8d 8b       	std	Y+21, r24	; 0x15
    4f5e:	9e 8b       	std	Y+22, r25	; 0x16
    4f60:	af 8b       	std	Y+23, r26	; 0x17
    4f62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4f64:	6d 89       	ldd	r22, Y+21	; 0x15
    4f66:	7e 89       	ldd	r23, Y+22	; 0x16
    4f68:	8f 89       	ldd	r24, Y+23	; 0x17
    4f6a:	98 8d       	ldd	r25, Y+24	; 0x18
    4f6c:	20 e0       	ldi	r18, 0x00	; 0
    4f6e:	30 e0       	ldi	r19, 0x00	; 0
    4f70:	40 e8       	ldi	r20, 0x80	; 128
    4f72:	5f e3       	ldi	r21, 0x3F	; 63
    4f74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f78:	88 23       	and	r24, r24
    4f7a:	2c f4       	brge	.+10     	; 0x4f86 <handleMode2+0x6b4>
		__ticks = 1;
    4f7c:	81 e0       	ldi	r24, 0x01	; 1
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	9c 8b       	std	Y+20, r25	; 0x14
    4f82:	8b 8b       	std	Y+19, r24	; 0x13
    4f84:	3f c0       	rjmp	.+126    	; 0x5004 <handleMode2+0x732>
	else if (__tmp > 65535)
    4f86:	6d 89       	ldd	r22, Y+21	; 0x15
    4f88:	7e 89       	ldd	r23, Y+22	; 0x16
    4f8a:	8f 89       	ldd	r24, Y+23	; 0x17
    4f8c:	98 8d       	ldd	r25, Y+24	; 0x18
    4f8e:	20 e0       	ldi	r18, 0x00	; 0
    4f90:	3f ef       	ldi	r19, 0xFF	; 255
    4f92:	4f e7       	ldi	r20, 0x7F	; 127
    4f94:	57 e4       	ldi	r21, 0x47	; 71
    4f96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f9a:	18 16       	cp	r1, r24
    4f9c:	4c f5       	brge	.+82     	; 0x4ff0 <handleMode2+0x71e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f9e:	69 8d       	ldd	r22, Y+25	; 0x19
    4fa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4fa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fa6:	20 e0       	ldi	r18, 0x00	; 0
    4fa8:	30 e0       	ldi	r19, 0x00	; 0
    4faa:	40 e2       	ldi	r20, 0x20	; 32
    4fac:	51 e4       	ldi	r21, 0x41	; 65
    4fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fb2:	dc 01       	movw	r26, r24
    4fb4:	cb 01       	movw	r24, r22
    4fb6:	bc 01       	movw	r22, r24
    4fb8:	cd 01       	movw	r24, r26
    4fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fbe:	dc 01       	movw	r26, r24
    4fc0:	cb 01       	movw	r24, r22
    4fc2:	9c 8b       	std	Y+20, r25	; 0x14
    4fc4:	8b 8b       	std	Y+19, r24	; 0x13
    4fc6:	0f c0       	rjmp	.+30     	; 0x4fe6 <handleMode2+0x714>
    4fc8:	88 ec       	ldi	r24, 0xC8	; 200
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	9a 8b       	std	Y+18, r25	; 0x12
    4fce:	89 8b       	std	Y+17, r24	; 0x11
    4fd0:	89 89       	ldd	r24, Y+17	; 0x11
    4fd2:	9a 89       	ldd	r25, Y+18	; 0x12
    4fd4:	01 97       	sbiw	r24, 0x01	; 1
    4fd6:	f1 f7       	brne	.-4      	; 0x4fd4 <handleMode2+0x702>
    4fd8:	9a 8b       	std	Y+18, r25	; 0x12
    4fda:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fdc:	8b 89       	ldd	r24, Y+19	; 0x13
    4fde:	9c 89       	ldd	r25, Y+20	; 0x14
    4fe0:	01 97       	sbiw	r24, 0x01	; 1
    4fe2:	9c 8b       	std	Y+20, r25	; 0x14
    4fe4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fe6:	8b 89       	ldd	r24, Y+19	; 0x13
    4fe8:	9c 89       	ldd	r25, Y+20	; 0x14
    4fea:	00 97       	sbiw	r24, 0x00	; 0
    4fec:	69 f7       	brne	.-38     	; 0x4fc8 <handleMode2+0x6f6>
    4fee:	14 c0       	rjmp	.+40     	; 0x5018 <handleMode2+0x746>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ff0:	6d 89       	ldd	r22, Y+21	; 0x15
    4ff2:	7e 89       	ldd	r23, Y+22	; 0x16
    4ff4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ff6:	98 8d       	ldd	r25, Y+24	; 0x18
    4ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ffc:	dc 01       	movw	r26, r24
    4ffe:	cb 01       	movw	r24, r22
    5000:	9c 8b       	std	Y+20, r25	; 0x14
    5002:	8b 8b       	std	Y+19, r24	; 0x13
    5004:	8b 89       	ldd	r24, Y+19	; 0x13
    5006:	9c 89       	ldd	r25, Y+20	; 0x14
    5008:	98 8b       	std	Y+16, r25	; 0x10
    500a:	8f 87       	std	Y+15, r24	; 0x0f
    500c:	8f 85       	ldd	r24, Y+15	; 0x0f
    500e:	98 89       	ldd	r25, Y+16	; 0x10
    5010:	01 97       	sbiw	r24, 0x01	; 1
    5012:	f1 f7       	brne	.-4      	; 0x5010 <handleMode2+0x73e>
    5014:	98 8b       	std	Y+16, r25	; 0x10
    5016:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(300);
		}

		vdCarStop();
    5018:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <vdCarStop>
		EYES_LookForward();  // Reset servo to forward direction
    501c:	0e 94 16 23 	call	0x462c	; 0x462c <EYES_LookForward>
    5020:	80 e0       	ldi	r24, 0x00	; 0
    5022:	90 e0       	ldi	r25, 0x00	; 0
    5024:	a6 e9       	ldi	r26, 0x96	; 150
    5026:	b3 e4       	ldi	r27, 0x43	; 67
    5028:	8b 87       	std	Y+11, r24	; 0x0b
    502a:	9c 87       	std	Y+12, r25	; 0x0c
    502c:	ad 87       	std	Y+13, r26	; 0x0d
    502e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5030:	6b 85       	ldd	r22, Y+11	; 0x0b
    5032:	7c 85       	ldd	r23, Y+12	; 0x0c
    5034:	8d 85       	ldd	r24, Y+13	; 0x0d
    5036:	9e 85       	ldd	r25, Y+14	; 0x0e
    5038:	20 e0       	ldi	r18, 0x00	; 0
    503a:	30 e0       	ldi	r19, 0x00	; 0
    503c:	4a ef       	ldi	r20, 0xFA	; 250
    503e:	54 e4       	ldi	r21, 0x44	; 68
    5040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5044:	dc 01       	movw	r26, r24
    5046:	cb 01       	movw	r24, r22
    5048:	8f 83       	std	Y+7, r24	; 0x07
    504a:	98 87       	std	Y+8, r25	; 0x08
    504c:	a9 87       	std	Y+9, r26	; 0x09
    504e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5050:	6f 81       	ldd	r22, Y+7	; 0x07
    5052:	78 85       	ldd	r23, Y+8	; 0x08
    5054:	89 85       	ldd	r24, Y+9	; 0x09
    5056:	9a 85       	ldd	r25, Y+10	; 0x0a
    5058:	20 e0       	ldi	r18, 0x00	; 0
    505a:	30 e0       	ldi	r19, 0x00	; 0
    505c:	40 e8       	ldi	r20, 0x80	; 128
    505e:	5f e3       	ldi	r21, 0x3F	; 63
    5060:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5064:	88 23       	and	r24, r24
    5066:	2c f4       	brge	.+10     	; 0x5072 <handleMode2+0x7a0>
		__ticks = 1;
    5068:	81 e0       	ldi	r24, 0x01	; 1
    506a:	90 e0       	ldi	r25, 0x00	; 0
    506c:	9e 83       	std	Y+6, r25	; 0x06
    506e:	8d 83       	std	Y+5, r24	; 0x05
    5070:	3f c0       	rjmp	.+126    	; 0x50f0 <handleMode2+0x81e>
	else if (__tmp > 65535)
    5072:	6f 81       	ldd	r22, Y+7	; 0x07
    5074:	78 85       	ldd	r23, Y+8	; 0x08
    5076:	89 85       	ldd	r24, Y+9	; 0x09
    5078:	9a 85       	ldd	r25, Y+10	; 0x0a
    507a:	20 e0       	ldi	r18, 0x00	; 0
    507c:	3f ef       	ldi	r19, 0xFF	; 255
    507e:	4f e7       	ldi	r20, 0x7F	; 127
    5080:	57 e4       	ldi	r21, 0x47	; 71
    5082:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5086:	18 16       	cp	r1, r24
    5088:	4c f5       	brge	.+82     	; 0x50dc <handleMode2+0x80a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    508a:	6b 85       	ldd	r22, Y+11	; 0x0b
    508c:	7c 85       	ldd	r23, Y+12	; 0x0c
    508e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5090:	9e 85       	ldd	r25, Y+14	; 0x0e
    5092:	20 e0       	ldi	r18, 0x00	; 0
    5094:	30 e0       	ldi	r19, 0x00	; 0
    5096:	40 e2       	ldi	r20, 0x20	; 32
    5098:	51 e4       	ldi	r21, 0x41	; 65
    509a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    509e:	dc 01       	movw	r26, r24
    50a0:	cb 01       	movw	r24, r22
    50a2:	bc 01       	movw	r22, r24
    50a4:	cd 01       	movw	r24, r26
    50a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50aa:	dc 01       	movw	r26, r24
    50ac:	cb 01       	movw	r24, r22
    50ae:	9e 83       	std	Y+6, r25	; 0x06
    50b0:	8d 83       	std	Y+5, r24	; 0x05
    50b2:	0f c0       	rjmp	.+30     	; 0x50d2 <handleMode2+0x800>
    50b4:	88 ec       	ldi	r24, 0xC8	; 200
    50b6:	90 e0       	ldi	r25, 0x00	; 0
    50b8:	9c 83       	std	Y+4, r25	; 0x04
    50ba:	8b 83       	std	Y+3, r24	; 0x03
    50bc:	8b 81       	ldd	r24, Y+3	; 0x03
    50be:	9c 81       	ldd	r25, Y+4	; 0x04
    50c0:	01 97       	sbiw	r24, 0x01	; 1
    50c2:	f1 f7       	brne	.-4      	; 0x50c0 <handleMode2+0x7ee>
    50c4:	9c 83       	std	Y+4, r25	; 0x04
    50c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50c8:	8d 81       	ldd	r24, Y+5	; 0x05
    50ca:	9e 81       	ldd	r25, Y+6	; 0x06
    50cc:	01 97       	sbiw	r24, 0x01	; 1
    50ce:	9e 83       	std	Y+6, r25	; 0x06
    50d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50d2:	8d 81       	ldd	r24, Y+5	; 0x05
    50d4:	9e 81       	ldd	r25, Y+6	; 0x06
    50d6:	00 97       	sbiw	r24, 0x00	; 0
    50d8:	69 f7       	brne	.-38     	; 0x50b4 <handleMode2+0x7e2>
    50da:	14 c0       	rjmp	.+40     	; 0x5104 <handleMode2+0x832>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50dc:	6f 81       	ldd	r22, Y+7	; 0x07
    50de:	78 85       	ldd	r23, Y+8	; 0x08
    50e0:	89 85       	ldd	r24, Y+9	; 0x09
    50e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    50e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50e8:	dc 01       	movw	r26, r24
    50ea:	cb 01       	movw	r24, r22
    50ec:	9e 83       	std	Y+6, r25	; 0x06
    50ee:	8d 83       	std	Y+5, r24	; 0x05
    50f0:	8d 81       	ldd	r24, Y+5	; 0x05
    50f2:	9e 81       	ldd	r25, Y+6	; 0x06
    50f4:	9a 83       	std	Y+2, r25	; 0x02
    50f6:	89 83       	std	Y+1, r24	; 0x01
    50f8:	89 81       	ldd	r24, Y+1	; 0x01
    50fa:	9a 81       	ldd	r25, Y+2	; 0x02
    50fc:	01 97       	sbiw	r24, 0x01	; 1
    50fe:	f1 f7       	brne	.-4      	; 0x50fc <handleMode2+0x82a>
    5100:	9a 83       	std	Y+2, r25	; 0x02
    5102:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
	}
}
    5104:	c8 59       	subi	r28, 0x98	; 152
    5106:	df 4f       	sbci	r29, 0xFF	; 255
    5108:	0f b6       	in	r0, 0x3f	; 63
    510a:	f8 94       	cli
    510c:	de bf       	out	0x3e, r29	; 62
    510e:	0f be       	out	0x3f, r0	; 63
    5110:	cd bf       	out	0x3d, r28	; 61
    5112:	cf 91       	pop	r28
    5114:	df 91       	pop	r29
    5116:	1f 91       	pop	r17
    5118:	0f 91       	pop	r16
    511a:	08 95       	ret

0000511c <handleMode3>:
 * Description:
 *  Handles line-following mode.
 *  Uses the three IR sensors to detect line position and control direction.
 *  Based on the detected pattern, the car makes small corrections or turns.
 * ================================================================ */
void handleMode3() {
    511c:	df 93       	push	r29
    511e:	cf 93       	push	r28
    5120:	00 d0       	rcall	.+0      	; 0x5122 <handleMode3+0x6>
    5122:	0f 92       	push	r0
    5124:	cd b7       	in	r28, 0x3d	; 61
    5126:	de b7       	in	r29, 0x3e	; 62
	u8 u8LineFollowerDirec = lineFollowerDetect();  // Read direction from sensors
    5128:	0e 94 91 23 	call	0x4722	; 0x4722 <lineFollowerDetect>
    512c:	89 83       	std	Y+1, r24	; 0x01

	switch (u8LineFollowerDirec) {
    512e:	89 81       	ldd	r24, Y+1	; 0x01
    5130:	28 2f       	mov	r18, r24
    5132:	30 e0       	ldi	r19, 0x00	; 0
    5134:	3b 83       	std	Y+3, r19	; 0x03
    5136:	2a 83       	std	Y+2, r18	; 0x02
    5138:	8a 81       	ldd	r24, Y+2	; 0x02
    513a:	9b 81       	ldd	r25, Y+3	; 0x03
    513c:	83 30       	cpi	r24, 0x03	; 3
    513e:	91 05       	cpc	r25, r1
    5140:	71 f1       	breq	.+92     	; 0x519e <handleMode3+0x82>
    5142:	2a 81       	ldd	r18, Y+2	; 0x02
    5144:	3b 81       	ldd	r19, Y+3	; 0x03
    5146:	24 30       	cpi	r18, 0x04	; 4
    5148:	31 05       	cpc	r19, r1
    514a:	7c f4       	brge	.+30     	; 0x516a <handleMode3+0x4e>
    514c:	8a 81       	ldd	r24, Y+2	; 0x02
    514e:	9b 81       	ldd	r25, Y+3	; 0x03
    5150:	81 30       	cpi	r24, 0x01	; 1
    5152:	91 05       	cpc	r25, r1
    5154:	d1 f0       	breq	.+52     	; 0x518a <handleMode3+0x6e>
    5156:	2a 81       	ldd	r18, Y+2	; 0x02
    5158:	3b 81       	ldd	r19, Y+3	; 0x03
    515a:	22 30       	cpi	r18, 0x02	; 2
    515c:	31 05       	cpc	r19, r1
    515e:	d4 f4       	brge	.+52     	; 0x5194 <handleMode3+0x78>
    5160:	8a 81       	ldd	r24, Y+2	; 0x02
    5162:	9b 81       	ldd	r25, Y+3	; 0x03
    5164:	00 97       	sbiw	r24, 0x00	; 0
    5166:	69 f1       	breq	.+90     	; 0x51c2 <handleMode3+0xa6>
    5168:	2f c0       	rjmp	.+94     	; 0x51c8 <handleMode3+0xac>
    516a:	2a 81       	ldd	r18, Y+2	; 0x02
    516c:	3b 81       	ldd	r19, Y+3	; 0x03
    516e:	25 30       	cpi	r18, 0x05	; 5
    5170:	31 05       	cpc	r19, r1
    5172:	f9 f0       	breq	.+62     	; 0x51b2 <handleMode3+0x96>
    5174:	8a 81       	ldd	r24, Y+2	; 0x02
    5176:	9b 81       	ldd	r25, Y+3	; 0x03
    5178:	85 30       	cpi	r24, 0x05	; 5
    517a:	91 05       	cpc	r25, r1
    517c:	ac f0       	brlt	.+42     	; 0x51a8 <handleMode3+0x8c>
    517e:	2a 81       	ldd	r18, Y+2	; 0x02
    5180:	3b 81       	ldd	r19, Y+3	; 0x03
    5182:	26 30       	cpi	r18, 0x06	; 6
    5184:	31 05       	cpc	r19, r1
    5186:	d1 f0       	breq	.+52     	; 0x51bc <handleMode3+0xa0>
    5188:	1f c0       	rjmp	.+62     	; 0x51c8 <handleMode3+0xac>
	case LINE_FOLLOWER_FORWARD:	    vdCarMoveUp(); vdCarStop(); break;
    518a:	0e 94 ab 22 	call	0x4556	; 0x4556 <vdCarMoveUp>
    518e:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <vdCarStop>
    5192:	1c c0       	rjmp	.+56     	; 0x51cc <handleMode3+0xb0>
	case LINE_FOLLOWER_LEFT:	    vdCarMoveLeft(); vdCarStop(); break;
    5194:	0e 94 d7 22 	call	0x45ae	; 0x45ae <vdCarMoveLeft>
    5198:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <vdCarStop>
    519c:	17 c0       	rjmp	.+46     	; 0x51cc <handleMode3+0xb0>
	case LINE_FOLLOWER_RIGHT:	    vdCarMoveRight(); vdCarStop(); break;
    519e:	0e 94 cc 22 	call	0x4598	; 0x4598 <vdCarMoveRight>
    51a2:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <vdCarStop>
    51a6:	12 c0       	rjmp	.+36     	; 0x51cc <handleMode3+0xb0>
	case LINE_FOLLOWER_SLIGHT_LEFT:	vdCarMoveLeft(); vdCarStop(); break;
    51a8:	0e 94 d7 22 	call	0x45ae	; 0x45ae <vdCarMoveLeft>
    51ac:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <vdCarStop>
    51b0:	0d c0       	rjmp	.+26     	; 0x51cc <handleMode3+0xb0>
	case LINE_FOLLOWER_SLIGHT_RIGHT:vdCarMoveRight(); vdCarStop(); break;
    51b2:	0e 94 cc 22 	call	0x4598	; 0x4598 <vdCarMoveRight>
    51b6:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <vdCarStop>
    51ba:	08 c0       	rjmp	.+16     	; 0x51cc <handleMode3+0xb0>
	case LINE_FOLLOWER_STOP:	    vdCarStop(); break;
    51bc:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <vdCarStop>
    51c0:	05 c0       	rjmp	.+10     	; 0x51cc <handleMode3+0xb0>
	case LINE_FOLLOWER_ERROR:        vdCarStop(); break;
    51c2:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <vdCarStop>
    51c6:	02 c0       	rjmp	.+4      	; 0x51cc <handleMode3+0xb0>
	default:                        vdCarStop(); break;
    51c8:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <vdCarStop>
	}
}
    51cc:	0f 90       	pop	r0
    51ce:	0f 90       	pop	r0
    51d0:	0f 90       	pop	r0
    51d2:	cf 91       	pop	r28
    51d4:	df 91       	pop	r29
    51d6:	08 95       	ret

000051d8 <handleMode4>:
 * Function: handleMode4()
 * ---------------------------------------------------------------
 * Description:
 *  Reserved for future features such as maze-solving or path memorization.
 * ================================================================ */
void handleMode4() {
    51d8:	df 93       	push	r29
    51da:	cf 93       	push	r28
    51dc:	cd b7       	in	r28, 0x3d	; 61
    51de:	de b7       	in	r29, 0x3e	; 62
	// Future extension: Maze solving, path learning, etc.
}
    51e0:	cf 91       	pop	r28
    51e2:	df 91       	pop	r29
    51e4:	08 95       	ret

000051e6 <handleIdleMode>:
 * Description:
 *  Puts the car in a safe idle state:
 *    - Stops all motors
 *    - Centers the ultrasonic servo (eyes)
 * ================================================================ */
void handleIdleMode() {
    51e6:	df 93       	push	r29
    51e8:	cf 93       	push	r28
    51ea:	cd b7       	in	r28, 0x3d	; 61
    51ec:	de b7       	in	r29, 0x3e	; 62
	vdCarStop();
    51ee:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <vdCarStop>
	EYES_LookForward();
    51f2:	0e 94 16 23 	call	0x462c	; 0x462c <EYES_LookForward>
}
    51f6:	cf 91       	pop	r28
    51f8:	df 91       	pop	r29
    51fa:	08 95       	ret

000051fc <SimpleRxCallback>:
 *  UART interrupt callback function.
 *  Called automatically whenever a new byte is received via UART.
 *  Updates the mode or direction variables depending on the data.
 * ================================================================ */
void SimpleRxCallback(u8 data)
{
    51fc:	df 93       	push	r29
    51fe:	cf 93       	push	r28
    5200:	00 d0       	rcall	.+0      	; 0x5202 <SimpleRxCallback+0x6>
    5202:	0f 92       	push	r0
    5204:	cd b7       	in	r28, 0x3d	; 61
    5206:	de b7       	in	r29, 0x3e	; 62
    5208:	89 83       	std	Y+1, r24	; 0x01
	switch(data) {
    520a:	89 81       	ldd	r24, Y+1	; 0x01
    520c:	28 2f       	mov	r18, r24
    520e:	30 e0       	ldi	r19, 0x00	; 0
    5210:	3b 83       	std	Y+3, r19	; 0x03
    5212:	2a 83       	std	Y+2, r18	; 0x02
    5214:	8a 81       	ldd	r24, Y+2	; 0x02
    5216:	9b 81       	ldd	r25, Y+3	; 0x03
    5218:	82 34       	cpi	r24, 0x42	; 66
    521a:	91 05       	cpc	r25, r1
    521c:	09 f4       	brne	.+2      	; 0x5220 <SimpleRxCallback+0x24>
    521e:	5c c0       	rjmp	.+184    	; 0x52d8 <SimpleRxCallback+0xdc>
    5220:	2a 81       	ldd	r18, Y+2	; 0x02
    5222:	3b 81       	ldd	r19, Y+3	; 0x03
    5224:	23 34       	cpi	r18, 0x43	; 67
    5226:	31 05       	cpc	r19, r1
    5228:	e4 f4       	brge	.+56     	; 0x5262 <SimpleRxCallback+0x66>
    522a:	8a 81       	ldd	r24, Y+2	; 0x02
    522c:	9b 81       	ldd	r25, Y+3	; 0x03
    522e:	82 33       	cpi	r24, 0x32	; 50
    5230:	91 05       	cpc	r25, r1
    5232:	09 f4       	brne	.+2      	; 0x5236 <SimpleRxCallback+0x3a>
    5234:	3d c0       	rjmp	.+122    	; 0x52b0 <SimpleRxCallback+0xb4>
    5236:	2a 81       	ldd	r18, Y+2	; 0x02
    5238:	3b 81       	ldd	r19, Y+3	; 0x03
    523a:	23 33       	cpi	r18, 0x33	; 51
    523c:	31 05       	cpc	r19, r1
    523e:	34 f4       	brge	.+12     	; 0x524c <SimpleRxCallback+0x50>
    5240:	8a 81       	ldd	r24, Y+2	; 0x02
    5242:	9b 81       	ldd	r25, Y+3	; 0x03
    5244:	81 33       	cpi	r24, 0x31	; 49
    5246:	91 05       	cpc	r25, r1
    5248:	61 f1       	breq	.+88     	; 0x52a2 <SimpleRxCallback+0xa6>
    524a:	55 c0       	rjmp	.+170    	; 0x52f6 <SimpleRxCallback+0xfa>
    524c:	2a 81       	ldd	r18, Y+2	; 0x02
    524e:	3b 81       	ldd	r19, Y+3	; 0x03
    5250:	23 33       	cpi	r18, 0x33	; 51
    5252:	31 05       	cpc	r19, r1
    5254:	89 f1       	breq	.+98     	; 0x52b8 <SimpleRxCallback+0xbc>
    5256:	8a 81       	ldd	r24, Y+2	; 0x02
    5258:	9b 81       	ldd	r25, Y+3	; 0x03
    525a:	84 33       	cpi	r24, 0x34	; 52
    525c:	91 05       	cpc	r25, r1
    525e:	81 f1       	breq	.+96     	; 0x52c0 <SimpleRxCallback+0xc4>
    5260:	4a c0       	rjmp	.+148    	; 0x52f6 <SimpleRxCallback+0xfa>
    5262:	2a 81       	ldd	r18, Y+2	; 0x02
    5264:	3b 81       	ldd	r19, Y+3	; 0x03
    5266:	2c 34       	cpi	r18, 0x4C	; 76
    5268:	31 05       	cpc	r19, r1
    526a:	d1 f1       	breq	.+116    	; 0x52e0 <SimpleRxCallback+0xe4>
    526c:	8a 81       	ldd	r24, Y+2	; 0x02
    526e:	9b 81       	ldd	r25, Y+3	; 0x03
    5270:	8d 34       	cpi	r24, 0x4D	; 77
    5272:	91 05       	cpc	r25, r1
    5274:	5c f4       	brge	.+22     	; 0x528c <SimpleRxCallback+0x90>
    5276:	2a 81       	ldd	r18, Y+2	; 0x02
    5278:	3b 81       	ldd	r19, Y+3	; 0x03
    527a:	25 34       	cpi	r18, 0x45	; 69
    527c:	31 05       	cpc	r19, r1
    527e:	21 f1       	breq	.+72     	; 0x52c8 <SimpleRxCallback+0xcc>
    5280:	8a 81       	ldd	r24, Y+2	; 0x02
    5282:	9b 81       	ldd	r25, Y+3	; 0x03
    5284:	86 34       	cpi	r24, 0x46	; 70
    5286:	91 05       	cpc	r25, r1
    5288:	19 f1       	breq	.+70     	; 0x52d0 <SimpleRxCallback+0xd4>
    528a:	35 c0       	rjmp	.+106    	; 0x52f6 <SimpleRxCallback+0xfa>
    528c:	2a 81       	ldd	r18, Y+2	; 0x02
    528e:	3b 81       	ldd	r19, Y+3	; 0x03
    5290:	22 35       	cpi	r18, 0x52	; 82
    5292:	31 05       	cpc	r19, r1
    5294:	49 f1       	breq	.+82     	; 0x52e8 <SimpleRxCallback+0xec>
    5296:	8a 81       	ldd	r24, Y+2	; 0x02
    5298:	9b 81       	ldd	r25, Y+3	; 0x03
    529a:	83 35       	cpi	r24, 0x53	; 83
    529c:	91 05       	cpc	r25, r1
    529e:	41 f1       	breq	.+80     	; 0x52f0 <SimpleRxCallback+0xf4>
    52a0:	2a c0       	rjmp	.+84     	; 0x52f6 <SimpleRxCallback+0xfa>
	// Mode selection commands
	case MODE1: selectedMode = MODE1; SelectedDirec = STOP_MOVE; break; // Manual
    52a2:	81 e3       	ldi	r24, 0x31	; 49
    52a4:	80 93 68 00 	sts	0x0068, r24
    52a8:	83 e5       	ldi	r24, 0x53	; 83
    52aa:	80 93 69 00 	sts	0x0069, r24
    52ae:	23 c0       	rjmp	.+70     	; 0x52f6 <SimpleRxCallback+0xfa>
	case MODE2: selectedMode = MODE2; break;                      		// Obstacle Avoidance
    52b0:	82 e3       	ldi	r24, 0x32	; 50
    52b2:	80 93 68 00 	sts	0x0068, r24
    52b6:	1f c0       	rjmp	.+62     	; 0x52f6 <SimpleRxCallback+0xfa>
	case MODE3: selectedMode = MODE3; break;                      		// Line Follower
    52b8:	83 e3       	ldi	r24, 0x33	; 51
    52ba:	80 93 68 00 	sts	0x0068, r24
    52be:	1b c0       	rjmp	.+54     	; 0x52f6 <SimpleRxCallback+0xfa>
	case MODE4: selectedMode = MODE4; break;                      		// Reserved
    52c0:	84 e3       	ldi	r24, 0x34	; 52
    52c2:	80 93 68 00 	sts	0x0068, r24
    52c6:	17 c0       	rjmp	.+46     	; 0x52f6 <SimpleRxCallback+0xfa>
	case IDLE_MODE: selectedMode = IDLE_MODE; break;              		// Idle
    52c8:	85 e4       	ldi	r24, 0x45	; 69
    52ca:	80 93 68 00 	sts	0x0068, r24
    52ce:	13 c0       	rjmp	.+38     	; 0x52f6 <SimpleRxCallback+0xfa>

	// Direction control (used only in Mode 1)
	case FORWARD_DIRECTION: SelectedDirec = FORWARD_DIRECTION; break;
    52d0:	86 e4       	ldi	r24, 0x46	; 70
    52d2:	80 93 69 00 	sts	0x0069, r24
    52d6:	0f c0       	rjmp	.+30     	; 0x52f6 <SimpleRxCallback+0xfa>
	case BACKWARD_DIRECTION: SelectedDirec = BACKWARD_DIRECTION; break;
    52d8:	82 e4       	ldi	r24, 0x42	; 66
    52da:	80 93 69 00 	sts	0x0069, r24
    52de:	0b c0       	rjmp	.+22     	; 0x52f6 <SimpleRxCallback+0xfa>
	case LEFT_DIRECTION: SelectedDirec = LEFT_DIRECTION; break;
    52e0:	8c e4       	ldi	r24, 0x4C	; 76
    52e2:	80 93 69 00 	sts	0x0069, r24
    52e6:	07 c0       	rjmp	.+14     	; 0x52f6 <SimpleRxCallback+0xfa>
	case RIGHT_DIRECTION: SelectedDirec = RIGHT_DIRECTION; break;
    52e8:	82 e5       	ldi	r24, 0x52	; 82
    52ea:	80 93 69 00 	sts	0x0069, r24
    52ee:	03 c0       	rjmp	.+6      	; 0x52f6 <SimpleRxCallback+0xfa>
	case STOP_MOVE: SelectedDirec = STOP_MOVE; break;
    52f0:	83 e5       	ldi	r24, 0x53	; 83
    52f2:	80 93 69 00 	sts	0x0069, r24
	}
}
    52f6:	0f 90       	pop	r0
    52f8:	0f 90       	pop	r0
    52fa:	0f 90       	pop	r0
    52fc:	cf 91       	pop	r28
    52fe:	df 91       	pop	r29
    5300:	08 95       	ret

00005302 <main>:
#define F_C	PU         8000000UL

#include "APP/ModesHandler.h"

int main(void)
{
    5302:	df 93       	push	r29
    5304:	cf 93       	push	r28
    5306:	00 d0       	rcall	.+0      	; 0x5308 <main+0x6>
    5308:	cd b7       	in	r28, 0x3d	; 61
    530a:	de b7       	in	r29, 0x3e	; 62
    /* Main loop */
    while(1)
    {
    	switch(selectedMode){
    530c:	80 91 68 00 	lds	r24, 0x0068
    5310:	28 2f       	mov	r18, r24
    5312:	30 e0       	ldi	r19, 0x00	; 0
    5314:	3a 83       	std	Y+2, r19	; 0x02
    5316:	29 83       	std	Y+1, r18	; 0x01
    5318:	89 81       	ldd	r24, Y+1	; 0x01
    531a:	9a 81       	ldd	r25, Y+2	; 0x02
    531c:	83 33       	cpi	r24, 0x33	; 51
    531e:	91 05       	cpc	r25, r1
    5320:	09 f1       	breq	.+66     	; 0x5364 <main+0x62>
    5322:	29 81       	ldd	r18, Y+1	; 0x01
    5324:	3a 81       	ldd	r19, Y+2	; 0x02
    5326:	24 33       	cpi	r18, 0x34	; 52
    5328:	31 05       	cpc	r19, r1
    532a:	5c f4       	brge	.+22     	; 0x5342 <main+0x40>
    532c:	89 81       	ldd	r24, Y+1	; 0x01
    532e:	9a 81       	ldd	r25, Y+2	; 0x02
    5330:	81 33       	cpi	r24, 0x31	; 49
    5332:	91 05       	cpc	r25, r1
    5334:	89 f0       	breq	.+34     	; 0x5358 <main+0x56>
    5336:	29 81       	ldd	r18, Y+1	; 0x01
    5338:	3a 81       	ldd	r19, Y+2	; 0x02
    533a:	22 33       	cpi	r18, 0x32	; 50
    533c:	31 05       	cpc	r19, r1
    533e:	79 f0       	breq	.+30     	; 0x535e <main+0x5c>
    5340:	e5 cf       	rjmp	.-54     	; 0x530c <main+0xa>
    5342:	89 81       	ldd	r24, Y+1	; 0x01
    5344:	9a 81       	ldd	r25, Y+2	; 0x02
    5346:	84 33       	cpi	r24, 0x34	; 52
    5348:	91 05       	cpc	r25, r1
    534a:	79 f0       	breq	.+30     	; 0x536a <main+0x68>
    534c:	29 81       	ldd	r18, Y+1	; 0x01
    534e:	3a 81       	ldd	r19, Y+2	; 0x02
    5350:	25 34       	cpi	r18, 0x45	; 69
    5352:	31 05       	cpc	r19, r1
    5354:	69 f0       	breq	.+26     	; 0x5370 <main+0x6e>
    5356:	da cf       	rjmp	.-76     	; 0x530c <main+0xa>
    	case MODE1     : handleMode1();break;
    5358:	0e 94 2b 24 	call	0x4856	; 0x4856 <handleMode1>
    535c:	d7 cf       	rjmp	.-82     	; 0x530c <main+0xa>
    	case MODE2     : handleMode2();break;
    535e:	0e 94 69 24 	call	0x48d2	; 0x48d2 <handleMode2>
    5362:	d4 cf       	rjmp	.-88     	; 0x530c <main+0xa>
    	case MODE3     : handleMode3();break;
    5364:	0e 94 8e 28 	call	0x511c	; 0x511c <handleMode3>
    5368:	d1 cf       	rjmp	.-94     	; 0x530c <main+0xa>
    	case MODE4     : handleMode4();break;
    536a:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <handleMode4>
    536e:	ce cf       	rjmp	.-100    	; 0x530c <main+0xa>
    	case IDLE_MODE : handleIdleMode();break;
    5370:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <handleIdleMode>
    5374:	cb cf       	rjmp	.-106    	; 0x530c <main+0xa>

00005376 <__udivmodsi4>:
    5376:	a1 e2       	ldi	r26, 0x21	; 33
    5378:	1a 2e       	mov	r1, r26
    537a:	aa 1b       	sub	r26, r26
    537c:	bb 1b       	sub	r27, r27
    537e:	fd 01       	movw	r30, r26
    5380:	0d c0       	rjmp	.+26     	; 0x539c <__udivmodsi4_ep>

00005382 <__udivmodsi4_loop>:
    5382:	aa 1f       	adc	r26, r26
    5384:	bb 1f       	adc	r27, r27
    5386:	ee 1f       	adc	r30, r30
    5388:	ff 1f       	adc	r31, r31
    538a:	a2 17       	cp	r26, r18
    538c:	b3 07       	cpc	r27, r19
    538e:	e4 07       	cpc	r30, r20
    5390:	f5 07       	cpc	r31, r21
    5392:	20 f0       	brcs	.+8      	; 0x539c <__udivmodsi4_ep>
    5394:	a2 1b       	sub	r26, r18
    5396:	b3 0b       	sbc	r27, r19
    5398:	e4 0b       	sbc	r30, r20
    539a:	f5 0b       	sbc	r31, r21

0000539c <__udivmodsi4_ep>:
    539c:	66 1f       	adc	r22, r22
    539e:	77 1f       	adc	r23, r23
    53a0:	88 1f       	adc	r24, r24
    53a2:	99 1f       	adc	r25, r25
    53a4:	1a 94       	dec	r1
    53a6:	69 f7       	brne	.-38     	; 0x5382 <__udivmodsi4_loop>
    53a8:	60 95       	com	r22
    53aa:	70 95       	com	r23
    53ac:	80 95       	com	r24
    53ae:	90 95       	com	r25
    53b0:	9b 01       	movw	r18, r22
    53b2:	ac 01       	movw	r20, r24
    53b4:	bd 01       	movw	r22, r26
    53b6:	cf 01       	movw	r24, r30
    53b8:	08 95       	ret

000053ba <__divmodsi4>:
    53ba:	97 fb       	bst	r25, 7
    53bc:	09 2e       	mov	r0, r25
    53be:	05 26       	eor	r0, r21
    53c0:	0e d0       	rcall	.+28     	; 0x53de <__divmodsi4_neg1>
    53c2:	57 fd       	sbrc	r21, 7
    53c4:	04 d0       	rcall	.+8      	; 0x53ce <__divmodsi4_neg2>
    53c6:	d7 df       	rcall	.-82     	; 0x5376 <__udivmodsi4>
    53c8:	0a d0       	rcall	.+20     	; 0x53de <__divmodsi4_neg1>
    53ca:	00 1c       	adc	r0, r0
    53cc:	38 f4       	brcc	.+14     	; 0x53dc <__divmodsi4_exit>

000053ce <__divmodsi4_neg2>:
    53ce:	50 95       	com	r21
    53d0:	40 95       	com	r20
    53d2:	30 95       	com	r19
    53d4:	21 95       	neg	r18
    53d6:	3f 4f       	sbci	r19, 0xFF	; 255
    53d8:	4f 4f       	sbci	r20, 0xFF	; 255
    53da:	5f 4f       	sbci	r21, 0xFF	; 255

000053dc <__divmodsi4_exit>:
    53dc:	08 95       	ret

000053de <__divmodsi4_neg1>:
    53de:	f6 f7       	brtc	.-4      	; 0x53dc <__divmodsi4_exit>
    53e0:	90 95       	com	r25
    53e2:	80 95       	com	r24
    53e4:	70 95       	com	r23
    53e6:	61 95       	neg	r22
    53e8:	7f 4f       	sbci	r23, 0xFF	; 255
    53ea:	8f 4f       	sbci	r24, 0xFF	; 255
    53ec:	9f 4f       	sbci	r25, 0xFF	; 255
    53ee:	08 95       	ret

000053f0 <__prologue_saves__>:
    53f0:	2f 92       	push	r2
    53f2:	3f 92       	push	r3
    53f4:	4f 92       	push	r4
    53f6:	5f 92       	push	r5
    53f8:	6f 92       	push	r6
    53fa:	7f 92       	push	r7
    53fc:	8f 92       	push	r8
    53fe:	9f 92       	push	r9
    5400:	af 92       	push	r10
    5402:	bf 92       	push	r11
    5404:	cf 92       	push	r12
    5406:	df 92       	push	r13
    5408:	ef 92       	push	r14
    540a:	ff 92       	push	r15
    540c:	0f 93       	push	r16
    540e:	1f 93       	push	r17
    5410:	cf 93       	push	r28
    5412:	df 93       	push	r29
    5414:	cd b7       	in	r28, 0x3d	; 61
    5416:	de b7       	in	r29, 0x3e	; 62
    5418:	ca 1b       	sub	r28, r26
    541a:	db 0b       	sbc	r29, r27
    541c:	0f b6       	in	r0, 0x3f	; 63
    541e:	f8 94       	cli
    5420:	de bf       	out	0x3e, r29	; 62
    5422:	0f be       	out	0x3f, r0	; 63
    5424:	cd bf       	out	0x3d, r28	; 61
    5426:	09 94       	ijmp

00005428 <__epilogue_restores__>:
    5428:	2a 88       	ldd	r2, Y+18	; 0x12
    542a:	39 88       	ldd	r3, Y+17	; 0x11
    542c:	48 88       	ldd	r4, Y+16	; 0x10
    542e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5430:	6e 84       	ldd	r6, Y+14	; 0x0e
    5432:	7d 84       	ldd	r7, Y+13	; 0x0d
    5434:	8c 84       	ldd	r8, Y+12	; 0x0c
    5436:	9b 84       	ldd	r9, Y+11	; 0x0b
    5438:	aa 84       	ldd	r10, Y+10	; 0x0a
    543a:	b9 84       	ldd	r11, Y+9	; 0x09
    543c:	c8 84       	ldd	r12, Y+8	; 0x08
    543e:	df 80       	ldd	r13, Y+7	; 0x07
    5440:	ee 80       	ldd	r14, Y+6	; 0x06
    5442:	fd 80       	ldd	r15, Y+5	; 0x05
    5444:	0c 81       	ldd	r16, Y+4	; 0x04
    5446:	1b 81       	ldd	r17, Y+3	; 0x03
    5448:	aa 81       	ldd	r26, Y+2	; 0x02
    544a:	b9 81       	ldd	r27, Y+1	; 0x01
    544c:	ce 0f       	add	r28, r30
    544e:	d1 1d       	adc	r29, r1
    5450:	0f b6       	in	r0, 0x3f	; 63
    5452:	f8 94       	cli
    5454:	de bf       	out	0x3e, r29	; 62
    5456:	0f be       	out	0x3f, r0	; 63
    5458:	cd bf       	out	0x3d, r28	; 61
    545a:	ed 01       	movw	r28, r26
    545c:	08 95       	ret

0000545e <_exit>:
    545e:	f8 94       	cli

00005460 <__stop_program>:
    5460:	ff cf       	rjmp	.-2      	; 0x5460 <__stop_program>
